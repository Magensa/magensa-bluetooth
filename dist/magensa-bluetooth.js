!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["magensa-bluetooth"]=t():e["magensa-bluetooth"]=t()}(window,(function(){return function(e){var t={};function i(a){if(t[a])return t[a].exports;var s=t[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(a,s,function(t){return e[t]}.bind(null,s));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t),i.d(t,"scanForDevices",(function(){return we}));class a extends Error{constructor(e){let{message:t,code:i,name:a}=e;super(t||"Web Bluetooth API threw an unknown, or undocumented error"),this.code=i||1e3,this.name=a||"WebBluetoothError"}}var s=a;const r={filters:[{services:["0508e6f8-ad82-898f-f843-e3410cb60104"]},{services:["0508e6f8-ad82-898f-f843-e3410cb60101"]},{services:["0508e6f8-ad82-898f-f843-e3410cb60103"]}],optionalServices:["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101","0508e6f8-ad82-898f-f843-e3410cb60202","device_information"],keepRepeatedDevices:!1,acceptAllAdvertisements:!1};function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var o=class{constructor(){n(this,"logDeviceState",e=>{let t=new CustomEvent("deviceLog",{bubbles:!0,detail:e});window.dispatchEvent(t)}),n(this,"convertArrayToHexString",e=>Array.from(e,e=>("0"+(255&e).toString(16)).slice(-2)).join("").toUpperCase()),n(this,"readTwoByteLength",e=>e[0]<<8|e[1]),n(this,"bufferToUtf8",e=>new TextDecoder("utf-8").decode(Uint8Array.from(e))),n(this,"castDecToHex",e=>parseInt(e.toString(16),16)),n(this,"newArrayPartial",(e,t)=>new Array(t).fill(e)),n(this,"readByteArray",e=>{let t=[];for(let i=0;i<e.byteLength;i++)t.push(e.getUint8(i));return t}),n(this,"hexToAscii",e=>{let t="";for(let i=0;i<e.length&&"00"!==e.substr(i,2);i+=2)t+=String.fromCharCode(parseInt(e.substring(i,i+2),16));return t.trim()}),n(this,"hexToBytes",e=>{let t=[];for(let i=0;i<e.length;i+=2)t.push(parseInt(e.substring(i,i+2),16));return t}),n(this,"decodeRLE",e=>{const t=e.length;let i=[e[0]],a=0;for(let s=1;s<t;s++)a=s+1,a+1<t&&e[s]===e[a]?(i.push(...this.newArrayPartial(e[s],e[a+1])),s=a+1):i.push(e[s]);return i}),n(this,"buildInitialDataArray",e=>{let t=[];for(let e=Math.min(...Object.keys(this.rawData));e<this.maxBlockId;e++)t=t.concat(...this.rawData[e]);return e?this.checkRle(t):t}),n(this,"checkRle",e=>this.rleFormats[this.initialNotification[0]]?this.decodeRLE(e):e),n(this,"convertCurrencyCode",e=>{const t=e.toLowerCase();return"us"===t?[8,64]:"euro"===t?[9,120]:[0,0]}),n(this,"convertNumToAmount",(e,t)=>{t=t||12;let i=e.toString(),a=[];for(;i.length<t;)i="0"+i;for(let e=0;e<i.length;e+=2)a.push(parseInt(i.substring(e,e+2),16));return a}),n(this,"delayPromise",(e,t)=>new Promise(i=>{setTimeout(i,e,t)})),n(this,"byteArrayToNumber",e=>parseInt(this.convertArrayToHexString(e),10)),this.rleFormats=Object.freeze({0:!1,1:!0,2:!1,3:!0})}};function c(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var h=class extends o{constructor(){super(),c(this,"formatExpPAN",e=>{let t="object"==typeof e?this.bufferToUtf8(e.slice(4)):e;if(-1!==t.indexOf(";")){let e=this.splitExpPAN(t);return{maskedPAN:e[0],Last4:e[1],expirationDate:e[2],serviceCode:e[3]}}return{maskedPAN:"",Last4:"",expirationDate:"",serviceCode:""}}),c(this,"splitExpPAN",e=>{if(e.length>3){let t=e.replace(";","").replace("?","").split("="),i=t[1].slice(0,4),a=t[1].slice(4,7),s=i.slice(-2)+"/"+i.slice(0,2);return[t[0],t[0].slice(-4),s,a]}return["Not Found","Not Found","Not Found","Not Found"]})}};const d="Success, listening for swipe",l="DynaPro Mini",u="Configuration",m="Unknown",p=Object.freeze({code:0,message:"Success, there was no session to clear"}),v=Object.freeze({code:19,message:"GATT operation already in progress."}),g=Object.freeze({code:0,message:"Device Closed"}),f=Object.freeze({eDynamo:3,tDynamo:7,[l]:3,dynaProGo:7}),C=Object.freeze({msr:1,chip:2,chipmsr:3,contactless:4,contactlessmsr:5,contactlesschip:6,all:7});function b(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var D=class extends h{constructor(){super(),b(this,"tlvParser",(e,t)=>{let i,a,s,r=e.length,n=[],o=0,c=!0,h=null,d=[];for(;o<r;)if(a=e[o],c){i=0;let t=!0;if(0===a)break;for(;t&&o<r;)a=e[o],o++,d[i]=a,t=0===i?(a&this.moreTagBytesFlag1)==this.moreTagBytesFlag1:(a&this.moreTagBytesFlag2)==this.moreTagBytesFlag2,i++;h=this.convertArrayToHexString(d.slice(0,i)),c=!1}else{if(s=0,(a&this.moreLengthFlag)==this.moreLengthFlag){let t=a&this.oneByteLengthMask;o++;let i=0;for(;i<t&&o<r;)a=e[o],o++,s=((255&s)<<8)+a,i++}else s=a&this.oneByteLengthMask,o++;if(h){let i=d[0],a=(o+s>r?r:o+s)-o,c=a>0?this.convertArrayToHexString(e.slice(o,o+a)):"";n.push({tag:h,tagLength:s||c.length+.5,tagValue:this.hexOrAsciiFormatter(h,c,t)}),(i&this.constructedFlag)!=this.constructedFlag&&(o+=s)}c=!0}return n}),b(this,"hexOrAsciiFormatter",(e,t,i)=>{switch(e){case"DFDF1A":return`${t} ${this.trxStatusToString[parseInt(t,16)]}`;case"DFDF4D":case"5F20":return this.hexToAscii(t);case"DFDF25":return i?this.hexToAscii(t?t.substring(0,14):t):t;case"DFDF40":return 128===t?`${t}  CBC-MAC checked in ARQC online response`:1===t;default:return t}}),this.moreTagBytesFlag1=31,this.moreTagBytesFlag2=128,this.constructedFlag=32,this.moreLengthFlag=128,this.oneByteLengthMask=127,this.trxStatusToString=Object.freeze({0:"Approved",1:"Declined",2:"Error",16:"Cancelled By Host",17:"Confirm Amount No",18:"Confirm Amount Timeout",19:"Confirm Amount Cancel",20:"MSR Select Debit",21:"MSR Select Debit",22:"MSR Select Credit/Debit timout",23:"MSR Select Credit/Debit cancel",24:"Signature Capture Cancelled by Host (SC-S Only | SC-F only)",25:"Signature Capture Timeout (SC-S Only | SC-F Only)",26:"Signature Capture Cancelled by Cardholder (SC-S Only | SC-F Only)",27:"PIN Entry Cancelled by Host",28:"PIN entry timeout",29:"PIN entry Cancelled by Cardholder",30:"Manual Selected Cancelled by Host",31:"Manual Selection Timeout",32:"Manual Selction Cancelled by Cardholder",33:"Waiting for Card Cancelled by Host",34:"Waiting for Card Timeout",35:"Cancelled by Card Swipe (MSR) [SCRA] || Waiting for Card Cancelled by Cardholder [PIN]",36:"Waiting for Card ICC Seated",37:"Waiting for Card MSR Swiped",255:"Unknown Transaction Status"})}};class S extends Error{constructor(){super("Device communication error. Length does not match data"),this.name="BleTransmissionError",this.code=1012}}var y=S;class T extends Error{constructor(e){let{code:t,name:i,message:a}=e;super(a),this.name=i||"DeviceError",this.code=t||1e3}}var w=T;function A(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var k=class extends D{constructor(e){super(),A(this,"buildDeviceErr",e=>e instanceof DOMException?new s(e):e instanceof Error?e:new w(e)),A(this,"throwLenErr",()=>new y),A(this,"sendErrToCallback",e=>(this.errorCallback(e),e)),this.errorCallback=e.errorCallback}};const P=Object.freeze({errorCode:8,errorName:"NotFoundError"}),E=Object.freeze({code:19,name:"NetworkError"}),R=Object.freeze({code:1002,name:"DeviceNotFound",message:"Please select device to connect"}),I=Object.freeze({code:1003,name:"GattServerNotConnected",message:"Please connect desired device"}),B=Object.freeze({code:1004,name:"CommandNotSent",message:"Command characteristic not found, device not opened"}),O=Object.freeze({code:1005,name:"CommandNotSent",message:"Device not opened"}),N=Object.freeze({code:1006,name:"CommandNotSent",message:"Application From Host not found.  Device not connected"}),x=Object.freeze({code:1007,name:"ReadFailed",message:"Unable to read data from device. Communication error"}),L=Object.freeze({code:1008,name:"ResponseNotReceived",message:"Command was sent, but response was not received from device"}),M=Object.freeze({code:1009,name:"GetServiceFail",message:"Failed to retrieve primary GATT service. Please connect device"}),H=Object.freeze({code:1013,name:"CommandNotAccepted",message:"Device did not accept command"}),j=e=>Object.freeze({code:1014,name:"MissingRequiredParameter",message:`'${e}' is required to call this function.`}),$=(e,t)=>Object.freeze({code:1015,name:"IncorrectInputType",message:`Parameter type for ${t} was not correct, acceptable type(s) are: ${e.join(", ")}`}),F=(e,t)=>Object.freeze({code:1015,name:"IncorrectInputValue",message:`Parameter value for ${t} was not correct, acceptable value(s) are: ${e.join(", ")}`});function U(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var q=class extends k{constructor(e,t){super(t),U(this,"cardTypes",e=>"all"!==e?C[e]||3:f[this.deviceType]||3),U(this,"connect",()=>new Promise((e,t)=>(this.logDeviceState(`[GATT]: Device Connection Request || ${new Date}`),this.device?this.device.gatt.connect().then(t=>(this.logDeviceState(`[GATT]: Device connected - GATT Server retrieved successfully || ${new Date}`),this.gattServer=t,e())):t(this.buildDeviceErr(R))))),U(this,"disconnect",()=>new Promise(e=>this.device.gatt.connected?(this.device.gatt.disconnect(),e(g)):e(g))),U(this,"cacheCardServiceBase",e=>new Promise((t,i)=>(e=e||0,this.logDeviceState(`[GATT]: Cache Card Service Request || ${new Date}`),this.gattServer?this.findPrimaryService(e).then(e=>t(e)).catch(e=>i(e)):i(this.buildDeviceErr(I))))),U(this,"findPrimaryService",e=>new Promise((t,i)=>this.gattServer.getPrimaryService(this.deviceUUIDs[e]).then(e=>(this.cardService=e,this.logDeviceState(`[GATT]: Success! GATT Card Service retrieved and cached || ${new Date}`),this.device.addEventListener("gattserverdisconnected",this.disconnectHandler),t(e))).catch(a=>a.code===P.errorCode&&a.name===P.errorName?(this.deviceUUIDs[e+1],this.logDeviceState(`[ERROR]: Failed to connect. UUID: ${this.deviceUUIDs[e]} is not valid for this device. Trying again with UUID: ${this.deviceUUIDs[e+1]} || ${new Date}`),t(this.findPrimaryService(e+1))):(this.logDeviceState(`[ERROR]: Failed to retrieve Card Service - UUID: ${this.deviceUUIDs[e]} is not valid for this device. || ${new Date}`),i(a))))),U(this,"connectAndCache",e=>new Promise((t,i)=>{let a=t=>new Promise((i,s)=>t<4?this.connect().then(()=>this.cacheCardServiceBase(e)).then(e=>i(e)).catch(e=>e.code===E.code&&e.name===E.name?setTimeout(()=>(this.logDeviceState(`[ERROR]: Error caching GATT Service - Clearing cache and trying again. || ${new Date}`),this.clearGattCache(),i(a(t+1))),500):(this.logDeviceState(`[ERROR]: Failed to cache GATT Service || ${new Date}`),s(e))):s(this.buildDeviceErr(M)));return a(0).then(e=>t(e)).catch(e=>i(e))})),U(this,"sendArpcBase",e=>new Promise((t,i)=>{if(!this.device.gatt.connected)return i(this.buildDeviceErr(O));if("string"!=typeof e&&"object"!=typeof e)return i(this.buildDeviceErr($(["string","array of numbers"],"ARPC")));const a="string"==typeof e?e.length/2:e.length,s="string"==typeof e?this.hexToBytes(e):e;return t(this.buildArpcCommand(a,s))})),U(this,"onDestroyHandler",()=>{if(this.device&&this.device.gatt.connected)return this.device.gatt.disconnect()}),U(this,"waitForDeviceResponse",e=>new Promise(t=>{let i=a=>a<e?this.commandRespAvailable?t(!0):setTimeout(()=>i(a+1),200):t(!1);i(0)})),U(this,"disconnectHandler",e=>{this.gattServer=null,this.cardService=null,this.logDeviceState(`[Disconnected]: Disconnect event. Returning event to user, removing device listener || ${new Date}`),this.disconnectCallback(e),this.device.removeEventListener("gattserverdisconnected",this.disconnectHandler)}),U(this,"isDeviceConnected",()=>!!this.device.gatt&&this.device.gatt.connected),this.device=e,this.disconnectCallback=t.disconnectHandler,this.gattServer=null,this.cardService=null,this.deviceUUIDs=["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101"],this.statusVerbosity=Object.freeze({minimum:0,medium:1,verbose:2}),this.currencyCode=Object.freeze({dollar:[8,64],euro:[9,120],pound:[8,38],default:[0,0]}),this.transactionTypes=Object.freeze({purchase:0,cashadvance:1,cashback:2,purchasegoods:4,purchaseservices:8,contactlesscashback:9,cashmanual:18,refund:32,chiponlypayment:80}),this.commandRespAvailable=!1}};function W(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var z=class extends q{constructor(e,t){super(e,t),W(this,"validateAmount",e=>(t,i,a)=>{switch(typeof t){case"number":return t.toString().length>12?e(F(["number of 12 digits or less","byte array representation of amount (6 bytes, n12 format)"],t)):this.convertNumToAmount(t);case"object":return 6===t.length?t:e(F(["12 digit or less number","byte array representation of amount (6 bytes, n12 format)"],i));case"undefined":return void 0===a?e(j(i)):a;default:return e($(["number of 12 digits or less","byte array representation of amount (6 bytes, n12 format)"],i))}}),W(this,"validateRequiredInputs",e=>new Promise((t,i)=>{for(let t=0;t<e.length;t++){let{prop:a,validTypes:s,validValues:r,condition:n,propName:o}=e[t];if(void 0===a&&n)return i(j(o));let c=!1;for(let e=0;e<s.length;e++)if(typeof a===s[e]){c=!0;break}if(!c)return i($(s,o));if(void 0!==r){let e=!1;for(let t=0;t<r.length;t++)if(a.toLowerCase()===r[t]){e=!0;break}if(!e)return i(F(r,o))}}return t(!0)}))}};function G(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var V=class extends z{constructor(e,t){super(e,t),G(this,"decimalToBinary",e=>{let t=(e>>>0).toString(2);return"00000000".substr(t.length)+t}),G(this,"stringNumToBool",e=>!!+e),G(this,"findNullTerminatedString",e=>{let t;for(let i=0;i<e.length;i++)if(0===e[i]&&0===e[i+1]&&0===e[i+2]){t=i;break}return t?this.convertArrayToHexString(e.slice(2,t)):this.convertArrayToHexString(e.slice(2))}),G(this,"findPinLength",(e,t)=>{let i=12,a=4;return e&&"number"==typeof e&&e<=12&&(i=e>=4?e:12),t&&"number"==typeof t&&t>=4&&(a=t<=i?t:4),parseInt(`${i.toString(16)}${a.toString(16)}`,16)}),G(this,"buildPinOptionsByte",(e,t,i,a)=>{const s=Object.freeze({disabled:"00",englishfrench:"01",allspecified:"10"}),r=`000${e=e&&s[e.toLowerCase()]||s.disabled}${(t="boolean"!=typeof t||t)?"1":"0"}${"boolean"!=typeof t||t?"1":"0"}${a=a&&"string"==typeof a?"iso0"===a.toLowerCase()?"0":"1":"0"}`;return this.logDeviceState(`[PinOptionsByte]: binary string representation: ${r} || byte result: ${parseInt(r,2)}`),parseInt(r,2)}),G(this,"buildN2Format",e=>{const t=e.toString(),i=2===t.length?t:`0${t}`;return parseInt(`0x${i[0]}${i[1]}`,16)})}};function K(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var _=class extends V{constructor(e,t){super(e,t),K(this,"parseDeviceConfiguration",e=>({...this.firstDeviceControlByte(this.decimalToBinary(e[1])),...this.secondDeviceControlByte(this.decimalToBinary(e[2])),...this.maskConfigurationByte(this.decimalToBinary(e[3])),...this.msrConfigurationByte(this.decimalToBinary(e[4])),maskCharacter:this.findMaskCharacter(e[5]),leadingUnmaskedLength:parseInt(this.decimalToBinary(e[6]).slice(4),2),trailingUnmaskedLength:parseInt(this.decimalToBinary(e[6]).slice(0,4),2),emvL2IcsConfig:this.emvL2ConfigOptions[this.decimalToBinary(e[7]).slice(0,4)]||`${m}/Undocumented EMV L2 ICS ${u}`,...this.contactlessConfig(e[8])})),K(this,"contactlessConfig",e=>({contactlessSupport:this.enabledBrands[this.convertArrayToHexString([e])[0]],contactlessGuiControls:"1"===this.decimalToBinary(e)[5]?"Alternate":"Standard"})),K(this,"findMaskCharacter",e=>{if(48===e)return"ASCII: '0'";{const t=this.convertArrayToHexString([e]),i=this.hexToAscii(t);return i?`ASCII: '${i}'`:`Non-ASCII character in hex: '${t}'`}}),K(this,"firstDeviceControlByte",e=>({requireMutualAuth:this.stringNumToBool(e[0]),msrEncryptionVariant:"1"===e[1]?"DATA":"PIN",isClearTextEnabled:this.stringNumToBool(e[3]),isBeeperModeEnabled:this.stringNumToBool(e[4]),isBitmapLocked:this.stringNumToBool(e[6]),isConfigurationLocked:this.stringNumToBool(e[7])})),K(this,"secondDeviceControlByte",e=>({isArpcMacEnabled:this.stringNumToBool(e[1]),isFinancialIccCardTypeReportingEnabled:this.stringNumToBool(e[2]),arqcBatchDataOutputFormat:"1"===e[3]?"Reserved Format":"DynaPro Format"})),K(this,"maskConfigurationByte",e=>({isIsoMaskEnabled:this.stringNumToBool(e[7]),isCheckDigitEnabled:this.stringNumToBool(e[6]),isMs2Point0Enabled:"00"!==e.slice(4,6)})),K(this,"msrConfigurationByte",e=>({isAAMVAcardEnabled:this.stringNumToBool(e[7]),track3Data:this.trackDataOptions[e.slice(4,6)]||m,track2Data:this.trackDataOptions[e.slice(2,4)]||m,track1Data:this.trackDataOptions[e.slice(0,2)]||m})),this.trackDataOptions=Object.freeze({"00":"Disabled","01":"Enabled",11:"Required"}),this.emvL2ConfigOptions=Object.freeze({"0000":"No L2 Capability","0001":`${u} C1 (EMVCo certified)`,"0010":`${u} C2`,"0011":`${u} C3`,"0100":`${u} C4 (EMVCo certified)`,"0101":`${u} C5 (EMVCo certified)`,"0110":`${u} C6`,"0111":`${u} C7`}),this.enabledBrands=Object.freeze({0:"All contacless kernals enabled",1:"PayPass/MCL support disabled",2:"payWave support disabled",4:"Expresspay support disabled",8:"D-PAS support disabled"})}};function Q(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var J=class extends _{constructor(e,t){super(e,t),Q(this,"findEmvCardholderStatus",e=>({emvCardholderStatus:this.cardholderStatusIds[e]||`${m}/Undocumented Cardholder Interaction Status ID: ${e}`})),Q(this,"findOperationStatus",e=>({operationStatus:this.operationStatus[e]||`${m} Operation Status`})),Q(this,"parseDisplayMessageDone",e=>this.findOperationStatus(e[2])),Q(this,"parseEmvCompletion",e=>(this.logDeviceState(`[EMV Completion]: ${this.convertArrayToHexString(e)}`),{emvCompletionResponse:e})),Q(this,"formatSerialNumber",e=>this.deviceSerialNumber=this.hexToAscii(this.findNullTerminatedString(e))),Q(this,"handleBigBlockBegin",e=>{switch(e[1]){case 164:this.arqcArriving=!0,this.arqcTotalLen=this.readTwoByteLength([e[5],e[4]]);break;case 171:this.batchDataArriving=!0,this.batchTotalLen=this.readTwoByteLength([e[5],e[4]]);break;case 24:case 32:case 33:break;default:this.transactionStatusCallback({bufferType:this.bufferTypes[e[1]]||"Buffer type not documented"})}}),Q(this,"handleArqcBigBlockFinish",()=>{const e=this.buildInitialDataArray(!1),t=this.convertArrayToHexString(e);return this.logDeviceState(`[ARQC]: ${t}`),this.cardDataObj={...this.cardDataObj,arqcData:t,arqcDataParsed:this.tlvParser(e.slice(2))},this.rawData={},this.arqcArriving=!1,this.isQuickChipTransaction?void 0:this.transactionCallback(this.cardDataObj)}),Q(this,"handleBatchBigBlockFinish",()=>{const e=this.buildInitialDataArray(!1),t=this.convertArrayToHexString(e);this.logDeviceState(`[BATCH DATA]: ${t}`),this.transactionHasStarted=!1,this.hasTip=!1;const i=this.tlvParser(e.slice(2)),a=i.find(e=>{let{tag:t}=e;return"DFDF40"===t});return this.cardDataObj=a?{...this.cardDataObj,batchData:t,batchDataParsed:i,signatureRequired:1===a}:{...this.cardDataObj,batchData:t,batchDataParsed:i},this.rawData={},this.batchDataArriving=!1,this.transactionCallback(this.cardDataObj)}),Q(this,"handleBigBlockFinish",()=>this.arqcArriving?this.handleArqcBigBlockFinish():this.batchDataArriving?this.handleBatchBigBlockFinish():void 0),Q(this,"parseEmvCardholderInteractionStatus",e=>{switch(e[1]){case 2:return{...this.findEmvCardholderStatus(e[1]),isAmountConfirmed:1===e[4]||2!==e[4]&&`${m}/Undocumented Amount Confirmed Status`};case 4:return{...this.findEmvCardholderStatus(e[1]),applicationOrLabelName:this.bufferToUtf8(e.slice(4))};case 10:return{...this.findEmvCardholderStatus(e[1]),methodSelected:1===e[4]?"Credit":2===e[4]?"Debit":`${m}/Undocumented payment method selected`};case 32:return{...this.findEmvCardholderStatus(e[1]),tlvData:this.convertArrayToHexString(e.slice(4)),parsedTlvData:this.tlvParser(e.slice(4))};default:return void 0===e[4]?this.findEmvCardholderStatus(e[1]):{...this.findEmvCardholderStatus(e[1]),undocumentedData:this.convertArrayToHexString(e.slice(4))}}}),Q(this,"parseCardStatusReport",e=>e.length<4?this.findOperationStatus(e[2]):{...this.findOperationStatus(e[2]),cardStatus:0===e[2]?"Ok":"Error",cardType:this.cardTypesEnum[e[3]]}),Q(this,"parseAckResponse",e=>({code:e[1],message:this.ACKSTS[e[1]],commandType:this.pinCommandIds[e[2]]||"Device error or command type not documented"})),Q(this,"parseDeviceStateReport",e=>({deviceState:this.deviceState[e[1]]||`${m}/Undocumented device state id: ${e[1]}`,sessionState:this.parseSessionState(this.decimalToBinary(e[2])),deviceStatus:this.parseDeviceStatus(this.decimalToBinary(e[3])),deviceCertStatus:this.parseCertStatus(this.decimalToBinary(e[4])),hardwareStatus:this.parseHardwareStatus(this.decimalToBinary(e[5])),additionalInfo:this.parseAdditionalInfo(this.decimalToBinary(e[6]))})),Q(this,"parseSessionState",e=>({powerDidChange:this.stringNumToBool(e[0]),cardDataIsAvailable:this.stringNumToBool(e[4]),panParsedFromCard:this.stringNumToBool(e[5]),externalPanSent:this.stringNumToBool(e[6]),amountWasSent:this.stringNumToBool(e[7])})),Q(this,"parseCertStatus",e=>({msrCrlCertExists:this.stringNumToBool(e[0]),pinCrlCertExists:this.stringNumToBool(e[1]),mfgUnbindCertExists:this.stringNumToBool(e[3]),msrCaCertExists:this.stringNumToBool(e[4]),pinCaCertExists:this.stringNumToBool(e[5]),deviceCaCertExists:this.stringNumToBool(e[6]),deviceCertExists:this.stringNumToBool(e[7])})),Q(this,"parseDeviceStatus",e=>"00000000"!==e?{pinKeyStatus:this.pinKeyStatusEnum[e.slice(6)],msrKeyStatus:this.msrKeyStatusEnum[e.slice(4,6)],tamperDetected:this.stringNumToBool(e[3]),isAuthenticated:this.stringNumToBool(e[1]),deviceErrorDetected:this.stringNumToBool(e[0])}:"Ok"),Q(this,"parseHardwareStatus",e=>({IE3_only:this.stringNumToBool(e[0]),SRED:this.stringNumToBool(e[1]),MagHeadIsProgrammed:this.stringNumToBool(e[6]),tamperSensorsAreActive:this.stringNumToBool(e[7])})),Q(this,"parseAdditionalInfo",e=>({ICC_AcquirerMasterKeyIsInjected:!this.stringNumToBool(e[7]),ICC_SessionKeyIsActive:!this.stringNumToBool(e[6]),CAPK_EmvDatabaseIsCorrupted:this.stringNumToBool(e[5]),EmvTerminalDatabaseIsCorrupted:this.stringNumToBool(e[4]),cardIsPresentInChipCardConnector:this.stringNumToBool(e[3])})),Q(this,"parseCardData",e=>{const t=this.cardDataIds[e[1]]||`trackName${m}`;if(0===e[2])switch(t){case"track1":this.cardDataObj={...this.cardDataObj,[t]:this.bufferToUtf8(e.slice(4))};break;case"track2":this.cardDataObj={...this.cardDataObj,[t]:this.bufferToUtf8(e.slice(4)),...this.formatExpPAN(e)};break;case"ksnAndMagnePrintStatus":this.cardDataObj={...this.cardDataObj,ksn:this.convertArrayToHexString(e.slice(4,14)),magnePrintStatus:this.convertArrayToHexString(e.slice(-4))};break;default:this.cardDataObj={...this.cardDataObj,[t]:this.convertArrayToHexString(e.slice(4))}}else this.cardDataObj={...this.cardDataObj,[t]:this.convertStatusToString[e[2]]}}),Q(this,"parsePinResponse",e=>(this.logDeviceState(`[PIN Response]: Response from PIN Entry: ${this.convertArrayToHexString(e)}`),e.length>2?{pinData:{...this.findOperationStatus(e[1]),pinKsn:this.convertArrayToHexString(e.slice(2,12)),encryptedPinBlock:this.convertArrayToHexString(e.slice(12,20))}}:this.findOperationStatus(e[1]))),Q(this,"parseCardholderResponse",e=>{const t=Object.freeze({113:"Left function key",114:"Middle function key",116:"Right function key",120:"Enter key"});return e.length>2?{...this.findOperationStatus(e[1]),keyPressed:t[e[2]]||`${m}/Undocumented Key`}:this.findOperationStatus(e[1])}),Q(this,"parseTipCashbackReport",e=>e.length>2?this.transactionCallback({tipCashbackReport:{...this.findOperationStatus(e[1]),reportMode:0===e[2]?"Tip":"Cashback",amount:e.slice(3,9),tax:e.slice(9,15),taxRate:e.slice(15,18),tipOrCashbackAmount:e.slice(18,24)}}):this.transactionCallback({tipCashbackReport:{...this.findOperationStatus(e[1])}})),this.operationStatus=Object.freeze({0:"Ok",1:"Cardholder Cancel",2:"Timeout",3:"Host Cancel",4:"Verify fail",5:"Keypad Security",6:"Calibration Done",7:"Write with duplicate RID and index",8:"Write with corrupted Key",9:"CA Public Key reached maximum capacity",10:"CA Public Key read with invalid RID or Index"}),this.ACKSTS=Object.freeze({0:"Ok",21:"RID error/Index not found",128:"Device Error: error, tamper, missing certificate or incorrect signature detected",129:"Device not idle",130:"Data Error or Bad Paramater(s)",131:"Length Error: data size is either too small, too large, incomplete, or OID of the cert doesn't match predefined OID",132:"PAN Exists",133:"Missing or Incorrect Key",134:"Device Busy",135:"Device Locked",136:"Auth required",137:"Bad Auth",138:"Device Not Available",139:"Amount Needed - If PIN amount is required, no amount has been set",140:"Battery is critically low",141:"Device is resetting",144:"Certificate does not exist",145:"Expired (Cert/CRL)",146:"Invalid (Cert/CRL/Message)",147:"Revoked (Cert/CRL)",148:"CRL does not exist",149:"Certificate exists",150:"Duplicate KSN/Key"}),this.pinCommandIds=Object.freeze({1:"responseACK",2:"clearSession",3:"swipe",4:"requestPinEntry",5:"cancelCommand",6:"requestCardholderSelection",7:"displayMessage",8:"requestDeviceStatus",9:"requestDeviceConfiguration",10:"requestMsrData",11:"getChallenge",7:"displayMessage",162:"emvTransactionStatus",171:"requestEmvData",48:"getKsn",5:"cancelCommand",26:"requestDeviceInfo",16:"sendBigBlockData",160:"requestTipOrCashback"}),this.cardTypesEnum=Object.freeze({0:"Other",1:"Financial",2:"AAMVA",3:"Manual",4:"Unknown",5:"ICC",6:"Contactless ICC - EMV",7:"Financial MSR + ICC",8:"Contactless ICC - MSD"}),this.deviceState=Object.freeze({0:"Idle",1:"Session",2:"Wait For Card",3:"Wait For PIN",4:"Wait For Selection",5:"Displaying Message",6:"Test (Reserved for future use)",7:"Manual Card Entry",9:"Wait Cardholder Entry",10:"Chip Card",11:"ICC Kernel Test",12:"EMV Transaction",13:"Show PAN",31:"Wait for Tip Selection"}),this.pinKeyStatusEnum=Object.freeze({"00":"PIN Key OK","01":"PIN Key Exhausted",10:"No PIN Key",11:"PIN Key Not Bound"}),this.msrKeyStatusEnum=Object.freeze({"00":"MSR Key OK","01":"MSR Key Exhausted",10:"No MSR Key",11:"MSR Key Not Bound"}),this.cardDataIds=Object.freeze({1:"track1",2:"track2",3:"track3",4:"encryptedTrack1",5:"encryptedTrack2",6:"encryptedTrack3",7:"magnePrint",64:"encryptedPanAndExp",65:"serialNumber",99:"ksnAndMagnePrintStatus",100:"CBC-MAC"}),this.cardholderStatusIds=Object.freeze({1:"Waiting for amount confirmation selection",2:"Amount confirmation selected",3:"Waiting for multi-payment ICC Application selection",4:"ICC Application selected",5:"Waiting for signature capture",6:"Signature captured",7:"Waiting for language selection",8:"Language selected",9:"Waiting for credit/debit selection",10:"Credit/Debit selected",11:"Waiting for Pin Entry for ICC",12:"PIN entered for ICC",13:"Waiting for Pin Entry for MSR",14:"PIN entered for MSR",15:"Waiting for tip selection",16:"Tip interaction selected"}),this.bufferTypes=Object.freeze({2:"Device Certificate",50:"Set BIN (MAC)",66:"CSR",161:"EMV data in TLV format, Tag Data (MAC)",162:"RESERVED",163:"RESERVED",164:"EMV data in TLV format, Authorization Request (ARQC)",165:"CA Public Key (MAC)",171:"EMV data in TLV format, Batch Data"}),this.cardDataObj={},this.arqcArriving=!1,this.batchDataArriving=!1,this.arqcTotalLen=0,this.batchTotalLen=0,this.convertStatusToString=Object.freeze({0:"Ok",1:"Empty",2:"Error",4:"Disabled"})}};function Y(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var X=class extends J{constructor(e,t){super(e,t),Y(this,"buildSwipeCommand",e=>{let{timeout:t,isFallback:i,toneChoice:a,displayType:s}=e;return[1,3,t||60,!0===i?4:void 0!==s?this.displayTypes[s.toLowerCase()]:2,void 0!==a?this.toneChoice[a.toLowerCase()]:1]}),Y(this,"buildEmvCommand",e=>{let{timeout:t,pinTimeout:i,cardType:a,transactionType:s,cashBack:r,currencyCode:n,toneChoice:o,isQuickChip:c,authorizedAmount:h,emvOptions:d,taxAmount:l,taxPercent:u,tipAmount:m,balanceBeforeGenAC:p,balanceAfterGenAC:v,trxCategoryCode:g}=e;return new Promise((e,f)=>{this.isQuickChipTransaction=!1!==c,this.hasTip=this.hasTip||void 0!==m;const C=this.validateAmount(f);let b=[1,162,t||60,i||20,0,void 0!==o?this.toneChoice[o.toLowerCase()]:1,a?this.cardTypes(a.toLowerCase()):this.cardTypes("all"),void 0!==d?this.emvOptions[d.toLowerCase()]:0];const D=C(h,"authorizedAmount",[0,0,0,0,1,0]);if(void 0===D)return f(D);b=b.concat(D),b=void 0!==s?b.concat(this.transactionTypes[s.toLowerCase()]):b.concat(0);const S=C(r,"cashBack",this.newArrayPartial(0,6));if(void 0===S)return f(S);b=b.concat(S);const y=C(p,"balanceBeforeGenAC",this.newArrayPartial(0,6));if(void 0===y)return f(y);b=b.concat(y);const T=C(v,"balanceAfterGenAC",this.newArrayPartial(0,6));if(void 0===T)return f(T);b=b.concat(T),b=n?b.concat(this.currencyCode[n.toLowerCase()]||this.currencyCode.default):b.concat(this.currencyCode.dollar),b.push(void 0!==g?g:0),b.push(this.isQuickChipTransaction?1:0),b.push(this.hasTip?1:void 0!==r?2:0);const w=C(l,"taxAmount",this.newArrayPartial(0,6));if(void 0===w)return f(w);b=b.concat(w),b=void 0!==u?"number"==typeof u?b.concat(this.convertNumToAmount(u,6)):b.concat(u):b.concat(this.newArrayPartial(0,3)),b=b.concat(this.newArrayPartial(0,3));const A=C(m,"tipAmount",this.newArrayPartial(0,6));return void 0===A?f(A):(b=b.concat(A),b=b.concat(this.newArrayPartial(0,9)),e(b))})}),Y(this,"buildPinCommand",e=>{let{languageSelection:t,displayType:i,timeout:a,maxPinLength:s,minPinLength:r,toneChoice:n,waitMessage:o,verifyPin:c,pinBlockFormat:h}=e;const d=Object.freeze({enterpin:0,enterpinamount:1,reenterpinamount:2,reenterpin:3,verifypin:4});return[1,4,a||30,i&&d[i.toLowerCase()]||0,this.findPinLength(s,r),void 0!==n?this.toneChoice[n.toLowerCase()]:1,this.buildPinOptionsByte(t,o,c,h)]}),Y(this,"buildArpcCommand",(e,t)=>new Promise((i,a)=>{this.sendBigBlockData(164,e,t).then(()=>i([1,164,...this.newArrayPartial(0,10)])).catch(e=>a(e))})),Y(this,"buildTipOrCashbackCmd",e=>{let{timeout:t,commandType:i,toneChoice:a,transactionAmount:s,calculatedTaxAmount:r,taxRate:n,tipSelectionMode:o,leftButton:c,middleButton:h,rightButton:d}=e;return new Promise((e,l)=>{const u=this.validateAmount(l),m=[{prop:i,propName:"commandType",validTypes:["string"],condition:!0,validValues:["tip","cashback"]},{prop:o,propName:"tipSelectionMode",condition:i&&"cashback"!==i.toLowerCase(),validTypes:["string"],validValues:["percent","amount"]},{prop:n,propName:"taxRate",condition:!0,validTypes:["number","object"]}];this.validateRequiredInputs(m).then(()=>{let m=[1,160,void 0!==t?t:30,"tip"===i.toLowerCase()?0:1,"string"==typeof a?this.toneChoice[a.toLowerCase()]:this.toneChoice.onebeep];const p=u(s,"transactionAmount");if(void 0===p)return l(p);m=m.concat(p);const v=u(r,"calculatedTaxAmount");return void 0===v?l(v):(m=m.concat(v),m="number"==typeof n?m.concat(this.convertNumToAmount(n,6)):m.concat(n),m.push(void 0===o||"percent"===o?0:1),m.push(void 0!==c?this.buildN2Format(c):0),m.push(void 0!==h?this.buildN2Format(h):0),m.push(void 0!==d?this.buildN2Format(d):0),m=m.concat(this.newArrayPartial(0,25)),e(m))}).catch(e=>l(e))})}),Y(this,"buildDisplayCmd",e=>{let{displayTime:t,messageId:i}=e;return new Promise((e,a)=>void 0===i?a(missingRequiredFields("messageId")):e([1,7,void 0!==t?t:15,i]))}),this.toneChoice=Object.freeze({nosound:0,onebeep:1,twobeeps:2})}};function Z(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var ee=class extends X{constructor(e,t){super(e,t),Z(this,"getCardService",()=>new Promise((e,t)=>this.device?this.connectAndCache(2).then(e=>(this.logDeviceState(`[GATT]: Cache AppDataToHostLength Characteristic || ${new Date}`),e.getCharacteristic(this.deviceToHostLen))).then(e=>(this.logDeviceState(`[GATT]: Begin notifications on AppDataToHostLength Characteristic || ${new Date}`),e.startNotifications())).then(e=>(this.logDeviceState(`[GATT]: Add listener to notifications || ${new Date}`),e.removeEventListener("characteristicvaluechanged",this.dataWatcher),e.addEventListener("characteristicvaluechanged",this.dataWatcher),this.cardDataListener=e,this.logDeviceState(`[GATT]: Cache AppDataToHost Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceToHostData))).then(e=>(this.receiveDataChar=e,this.logDeviceState(`[GATT]: Cache AppDataFromHostLength Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceFromHostLen))).then(e=>(this.sendLenToDevice=e,this.logDeviceState(`[GATT]: Cache AppDataFromHost Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceFromHostData))).then(e=>(this.commandCharacteristic=e,window&&(window.removeEventListener("beforeunload",this.onDestroyHandler),window.addEventListener("beforeunload",this.onDestroyHandler)),this.logDeviceState(`[GATT]: Successfully cached all GATT services and characteristics. Returning successful pair to user || ${new Date}`),this.delayPromise(400))).then(()=>e({code:0,message:"Device Open"})).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(R)))),Z(this,"dataWatcher",e=>{let t=e.target.value.getUint8(0);return this.logDeviceState(`[NOTIFY: AppDataToHostLength]: ${this.convertArrayToHexString([t])} || ${new Date}`),this.commandSent&&3===t?(this.commandRespAvailable=!0,void(this.commandSent=!1)):this.readCommandResp()}),Z(this,"readCommandResp",()=>new Promise((e,t)=>this.receiveDataChar?this.receiveDataChar.readValue().then(e=>this.readValueHandler(e)).then(t=>e(t)).catch(i=>i.code===v.code&&i.message===v.message?(this.logDeviceState(`[INFO]: Read failed due to device being busy. Attempting read again || ${new Date}`),this.delayPromise(100).then(()=>e(this.readCommandResp()))):t(this.buildDeviceErr(i))):t(this.buildDeviceErr(x)))),Z(this,"readValueHandler",e=>new Promise(t=>{const i=this.readByteArray(e);if(this.logDeviceState(`[READ: AppDataToHost]: ${this.convertArrayToHexString(i)} || ${new Date}`),i.length)switch(i[0]){case this.reportIds.responseAck:return t(this.parseAckResponse(i));case this.reportIds.deviceStateReport:return t(this.handleDeviceStateReport(i));case this.reportIds.cardStatusReport:return t(this.handleCardStatusReport(i));case this.reportIds.cardDataReport:return t(this.handleCardDataReport(i));case this.reportIds.emvCardholderStatus:return t(this.handleCardholderStatusReport(i));case this.reportIds.emvCompletion:return t(this.handleEmvCompletion(i));case this.reportIds.bigBlockData:return t(this.handleBigBlockData(i));case this.reportIds.requestSn:return t(this.formatSerialNumber(i));case this.reportIds.deviceConfig:return t(this.parseDeviceConfiguration(i));case this.reportIds.pinResponse:return t(this.transactionCallback(this.parsePinResponse(pinResp)));case this.reportIds.selectionResponse:return t(this.parseCardholderResponse(i));case this.reportIds.displayResp:return t(this.transactionStatusCallback(this.findOperationStatus(i[1])));case this.reportIds.tipCashbackReport:return t(this.parseTipCashbackReport(i));default:return this.logDeviceState(`[Data Resp]: There is no parser for this data, returning to caller: ${this.convertArrayToHexString(i)} || ${new Date}`),t(this.transactionCallback(i))}else t(i)})),Z(this,"handleEmvCompletion",e=>(console.log("[!] EMV Completion: ",e),this.transactionStatusCallback(this.parseEmvCompletion(e)))),Z(this,"handleBigBlockData",e=>{switch(e[2]){case 0:this.handleBigBlockBegin(e);break;case 99:this.maxBlockId=Math.max(...Object.keys(this.rawData))+1,this.handleBigBlockFinish();break;default:this.rawData={...this.rawData,[e[2]]:e.slice(4)}}}),Z(this,"handleCardholderStatusReport",e=>this.transactionStatusCallback(this.parseEmvCardholderInteractionStatus(e))),Z(this,"handleCardStatusReport",e=>new Promise(t=>(this.transactionStatusCallback(this.parseCardStatusReport(e)),this.swipeHasBegun||this.transactionHasStarted?this.sendCommandWithResp(this.swipeHasBegun?[1,10,0]:[1,171,0]).then(e=>t(this.transactionStatusCallback(e))).catch(e=>this.sendErrToCallback(this.buildDeviceErr(e))):t()))),Z(this,"handleDeviceStateReport",e=>{this.dataGathered&&(this.dataGathered=!1,this.transactionCallback({swipeData:this.cardDataObj})),this.transactionStatusCallback(this.parseDeviceStateReport(e))}),Z(this,"handleCardDataReport",e=>{this.swipeHasBegun&&(this.swipeHasBegun=!1,this.dataGathered=!0),3!==e.length?this.parseCardData(e):(this.logDeviceState("[ERROR] Undocumented Card Data below"),this.logDeviceState(e))}),Z(this,"requestCardSwipe",e=>new Promise((t,i)=>(this.swipeHasBegun=!0,this.cardDataObj={},this.device.gatt.connected?this.sendCommandWithResp(this.clearSessionCmd).then(t=>(this.transactionStatusCallback(t),this.sendCommandWithResp(this.buildSwipeCommand(e||{})))).then(e=>t(e)).catch(e=>i(e)):i(this.buildDeviceErr(O))))),Z(this,"startTransaction",e=>new Promise((t,i)=>(this.transactionHasStarted=!0,this.cardDataObj={},this.logDeviceState(`[INFO]: EMV transaction begun || ${new Date}`),this.buildEmvCommand(e||{}).then(e=>this.sendCommandWithResp(e)).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e)))))),Z(this,"requestPinEntry",e=>new Promise((t,i)=>(this.logDeviceState(`[PIN]: Request for PIN entry start || ${new Date}`),console.log("pinoptions: ",e),this.device.gatt.connected?this.sendCommandWithResp(this.buildPinCommand(e||{})).then(e=>t(e)).catch(e=>i(e)):i(this.buildDeviceErr(O))))),Z(this,"sendBigBlockData",(e,t,i)=>new Promise((a,s)=>{let r=[1,16,e,0,255&t];if(t<60){r=r.concat(...this.newArrayPartial(0,60)),this.logDeviceState(`[Send Big Block Data Legacy]: ${this.convertArrayToHexString(r)}`);let n=[1,16,e,1,t,...i];return n.length<65&&(n=n.concat(...this.newArrayPartial(0,65-n.length))),this.sendPinCommand(r).then(()=>this.sendPinCommand(n)).then(()=>a()).catch(e=>s(this.buildDeviceErr(e)))}return r=r.concat([t>>8&255,t>>16&255,t>>24&255,1,...this.newArrayPartial(0,56)]),this.sendExtendedBigBlockData(e,t,i,r).then(()=>a())})),Z(this,"sendExtendedBigBlockData",(e,t,i,a)=>new Promise((s,r)=>{const n=Math.ceil(t/60);let o=!1,c=[];this.logDeviceState(`[Send Big Block Data Extended]: ${this.convertArrayToHexString(a)} || ${new Date}`);const h=()=>new Promise((e,t)=>{if(o)return this.delayPromise(500).then(()=>e(h()));const i=c.shift();return i?(o=!0,i.queuedPromise().then(()=>i.resolve()).then(()=>(o=!1,e(h()))).catch(e=>(o=!1,t(i.reject(e))))):e(!0)}),d=e=>new Promise((t,i)=>{c.push({queuedPromise:e,resolve:t,reject:i})});d(()=>new Promise(e=>this.sendPinCommand(a).then(()=>e())));for(let t=0,a=1;a<=n;a++){let s=i.slice(t,t+60),r=[1,16,e,a,s.length,...s];65!==r.length&&(r=r.concat(...this.newArrayPartial(0,65-r.length))),d(()=>new Promise(e=>this.sendPinCommand(r).then(()=>e())))}return this.logDeviceState(`[Send Big Block Data Extended]: Executing queue of ${c.length} commands || ${new Date}`),h().then(e=>s(e)).catch(e=>r(e))})),Z(this,"sendArpc",e=>new Promise((t,i)=>this.sendArpcBase(e).then(e=>this.delayPromise(200,e)).then(e=>(console.log("passed through command: ",e),this.sendCommandWithResp(e))).then(e=>(this.logDeviceState(`[Send ARPC Result]: ${this.convertArrayToHexString(e)}`),t(e))).catch(e=>i(this.buildDeviceErr(e))))),Z(this,"requestTipOrCashback",e=>new Promise((t,i)=>(this.hasTip=!0,this.buildTipOrCashbackCmd(e||{}).then(e=>(console.log("returned with this command:",e,this.convertArrayToHexString(e)),this.sendCommandWithResp(e))).then(e=>(console.log("tip-cashback resp: ",e),t(e))).catch(e=>i(this.buildDeviceErr(e)))))),Z(this,"setDisplayMessage",e=>new Promise((t,i)=>this.device&&this.device.gatt.connected?this.buildDisplayCmd(e||{}).then(e=>this.sendCommandWithResp(e)).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(O)))),Z(this,"sendPinCommand",e=>new Promise((t,i)=>(this.logDeviceState(`[AppFromHostLength]: ${this.convertArrayToHexString([e.length])} || ${new Date}`),this.sendLenToDevice?this.sendLenToDevice.writeValue(Uint8Array.of(e.length)).then(()=>(this.logDeviceState(`[AppFromHostData]: ${this.convertArrayToHexString(e)} || ${new Date}`),this.commandSent=!0,t(this.commandCharacteristic.writeValue(Uint8Array.from(e))))).catch(e=>(this.commandSent=!1,i(e))):i(this.buildDeviceErr(N))))),Z(this,"sendCommandWithResp",e=>new Promise((t,i)=>this.sendPinCommand(e).then(()=>this.commandRespAvailable?Promise.resolve(!0):this.waitForDeviceResponse(16)).then(t=>t?this.readCommandResp():this.tryCommandAgain(e)).then(e=>(this.commandRespAvailable=!1,t(e))).catch(e=>(this.commandRespAvailable=!1,i(this.buildDeviceErr(e)))))),Z(this,"tryCommandAgain",e=>new Promise((t,i)=>this.sendPinCommand(e).then(()=>this.waitForDeviceResponse(5)).then(e=>e?t(this.readCommandResp()):i(this.buildDeviceErr(L))))),Z(this,"getDeviceInfo",()=>new Promise((e,t)=>this.device.gatt.connected?this.gatherDeviceInfo().then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(O)))),Z(this,"gatherDeviceInfo",()=>new Promise((e,t)=>this.deviceSerialNumber?e({serialNumber:this.deviceSerialNumber,deviceName:this.device.name,deviceType:this.deviceType,isConnected:this.device.gatt.connected}):this.checkIfDeviceIdle().then(()=>this.getDeviceInfoProceed()).then(()=>e({serialNumber:this.deviceSerialNumber,deviceName:this.device.name,deviceType:this.deviceType,isConnected:this.device.gatt.connected})).catch(e=>t(e)))),Z(this,"getDeviceInfoProceed",()=>new Promise((e,t)=>{this.sendPinCommand([0,26,5]).then(()=>this.deviceSerialNumber?Promise.resolve(!0):this.waitForSn(7)).then(i=>i?e():t(this.buildDeviceErr(L))).catch(e=>t(e))})),Z(this,"checkIfDeviceIdle",()=>new Promise(e=>this.sendCommandWithResp([1,26,5]).then(t=>129===t.code?this.clearSession().then(()=>e(this.checkIfDeviceIdle())):(this.transactionStatusCallback(t),e())))),Z(this,"waitForSn",e=>new Promise(t=>{const i=a=>a<e?this.deviceSerialNumber?t(!0):setTimeout(()=>i(a+1),200):t(!1);i(0)})),Z(this,"cancelTransaction",()=>new Promise((e,t)=>this.commandCharacteristic?this.sendCommandWithResp([1,5,0]).then(t=>e(t)).catch(e=>t(e)):t(this.buildDeviceErr(B)))),Z(this,"clearSession",()=>new Promise((e,t)=>(this.logDeviceState(`[ClearSession]: Request to clear session || ${new Date}`),this.sendLenToDevice?this.sendCommandWithResp(this.clearSessionCmd).then(t=>(this.transactionStatusCallback(t),this.logDeviceState(`[ClearSession]: Received clear session response || ${new Date}`),this.clearInternalState(),e(t))).catch(e=>t(this.buildDeviceErr(e))):e(p)))),Z(this,"closePinDevice",()=>new Promise((e,t)=>this.cardDataListener?this.cardDataListener.stopNotifications().then(()=>(this.logDeviceState(`[Close Device]: GATT notifications stopped. Clearing JS cache || ${new Date}`),this.cardDataListener.removeEventListener("characteristicvaluechanged",this.dataWatcher),this.cardDataListener=null,this.clearGattCache(),e(this.disconnect()))).catch(e=>t(e)):this.disconnect().then(()=>(this.logDeviceState(`[Close Device]: Device Closed. Clearing JS cache || ${new Date}`),this.clearGattCache(),e())).catch(e=>t(e)))),Z(this,"closeDevice",()=>new Promise((e,t)=>this.device.gatt.connected?this.clearSession().then(()=>this.closePinDevice()).then(()=>e(g)).catch(e=>(this.disconnect(),t(this.buildDeviceErr(e)))):e(g))),Z(this,"clearInternalState",()=>{this.commandSent=!1,this.commandRespAvailable=!1,this.dataGathered=!1,this.isQuickChipTransaction=!0}),Z(this,"clearGattCache",()=>{this.transactionHasStarted=!1,this.receiveDataChar=null,this.commandCharacteristic=null,this.sendLenToDevice=null,this.clearInternalState(),this.hasTip=!1,this.swipeHasBegun=!1,this.transactionHasStarted=!1}),this.transactionCallback=t.transactionCallback||t,this.transactionStatusCallback=t.transactionStatusCallback,this.deviceFromHostLen="0508e6f8-ad82-898f-f843-e3410cb60220",this.deviceFromHostData="0508e6f8-ad82-898f-f843-e3410cb60221",this.deviceToHostLen="0508e6f8-ad82-898f-f843-e3410cb60222",this.deviceToHostData="0508e6f8-ad82-898f-f843-e3410cb60223",this.cardDataListener=null,this.receiveDataChar=null,this.commandCharacteristic=null,this.sendLenToDevice=null,this.commandSent=!1,this.swipeHasBegun=!1,this.transactionHasStarted=!1,this.dataGathered=!1,this.isQuickChipTransaction=!0,this.deviceSerialNumber=null,this.hasTip=!1,this.emvOptions=Object.freeze({normal:0,bypasspin:1,forceonline:2,acquirernotavailable:4}),this.displayTypes=Object.freeze({swipeidlealternate:0,swipecard:1,pleaseswipe:2,pleaseswipeagain:3,chiperroruseswipe:4}),this.reportIds=Object.freeze({responseAck:1,endSession:2,requestCardSwipe:3,cardStatusReport:34,deviceStateReport:32,cardDataReport:35,emvCardholderStatus:44,bigBlockData:41,emvCompletion:162,requestSn:26,deviceConfig:9,pinResponse:36,selectionResponse:37,displayResp:39,tipCashbackReport:48}),this.initialNotification=[0],this.clearSessionCmd=[1,2,0]}};var te=class extends ee{constructor(e,t){super(e,t),this.deviceType=l}};var ie=class extends ee{constructor(e,t){super(e,t),this.deviceType="dynaProGo"}};function ae(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var se=class extends q{constructor(e,t){super(e,t),ae(this,"trackIndices",e=>Object.freeze({track1DecodeStatus:e,track2DecodeStatus:e+1,track3DecodeStatus:e+2,track1Len:e+3,track2Len:e+4,track3Len:e+5,cardEncodeType:e+6,track1Start:e+7,track1End:e+118,track2Start:e+119,track2End:e+230,track3Start:e+231,track3End:e+342,cardStatus:e+343,magnePrintStatusStart:e+344,magnePrintStatusEnd:e+347,magnePrintLen:e+348,magnePrintStart:e+349,magnePrintEnd:e+476,serialNumberStart:e+477,serialNumberEnd:e+492,deviceEncStatusStart:e+493,deviceEncStatusEnd:e+494,ksnStart:e+495,ksnEnd:e+504,track1MaskedLen:e+505,track2MaskedLen:e+506,track3MaskedLen:e+507,track1MaskedStart:e+508,track1MaskedEnd:e+619,track2MaskedStart:e+620,track2MaskedEnd:e+731,track3MaskedStart:e+732,track3MaskedEnd:e+843,encSessionIdStart:e+844,encSessionIdEnd:e+851,track1AbsLen:e+852,track2AbsLen:e+853,track3AbsLen:e+854,magnePrintAbsLen:e+855})),ae(this,"parseHidData",e=>{let t=this.trackIndices(this.offset),i={};return this.dataNames.forEach(a=>{let s=e.slice(t[`${a}Start`],t[`${a}End`]+1);t.hasOwnProperty(`${a}Len`)&&(s=s.slice(0,e[t[`${a}Len`]])),i="track2Masked"===a?this.formatTrack2Masked(i,a,this.bufferToUtf8(s)):t.hasOwnProperty(`${a}DecodeStatus`)?this.formatTrackWithDecode(i,a,e[t[`${a}DecodeStatus`]],this.convertArrayToHexString(s)):"serialNumber"===a?this.formatSerialNumber(i,s):{...i,[a]:a.toLowerCase().includes("masked")?this.bufferToUtf8(s):this.convertArrayToHexString(s)}}),{swipeData:{...i}}}),ae(this,"formatSerialNumber",(e,t)=>({...e,serialNumber:this.bufferToUtf8(t.length>7?t.slice(0,7):t)})),ae(this,"formatTrack2Masked",(e,t,i)=>({...e,[t]:i,...this.formatExpPAN(i)})),ae(this,"formatTrackWithDecode",(e,t,i,a)=>({...e,[t]:a,[`${t}DecodeStatus`]:0===i?"Ok":"Error",[`${t}DecodeStatusCode`]:i})),this.dataNames=["track1","track2","track3","ksn","magnePrint","magnePrintStatus","serialNumber","encSessionId","track1Masked","track2Masked","track3Masked"],this.offset=3}};function re(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var ne=class extends se{constructor(e,t){super(e,t),re(this,"parseTransactionStatus",e=>{let t=this.readTwoByteLength([e[1],e[2]]),i=e.slice(3);return i.length===t?this.parseNotifications(i):this.throwLenErr()}),re(this,"parseNotifications",e=>{let t=e.slice(6),i=this.readTwoByteLength([t[0],t[1]]),a=t.slice(2),s=a[0],r=a[2];return a.length===i?{transactionStatus:{statusCode:s,statusMsg:this.TrxStatusEnum[s]||"Status code message not documented",progressCode:r,progressMsg:this.TrxProgressIndicator[r]||"Progress code message not documented"}}:this.throwLenErr()}),this.TrxStatusEnum=Object.freeze({0:"Transaction Started and Idle",1:"Card is Inserted",2:"Error",3:"Transaction Progress Change",4:"Waiting for User Response",5:"Timed Out",6:"Transaction Complete",7:"Cancelled by Host",8:"Card Removed",9:"Contactless Token Detected, Powering Up Card",10:"MSR Swipe Detected"}),this.TrxProgressIndicator=Object.freeze({0:"No transaction in progress",1:"Waiting for cardholder to present payment",2:"Powering up the card",3:"Selecting the application",4:"Waiting for user language selection",5:"Waiting for user application selection",6:"Initiating application",7:"Reading application data",8:"Offline data authentication",9:"Process restrictions",10:"Cardholder verification",11:"Terminal risk management",12:"Terminal action analysis",13:"Generating first application cryptogram",14:"Card action analysis",15:"Online processing",16:"Waiting online processing response",17:"Transaction Complete",18:"Transaction Error",19:"Transaction Approved",20:"Transaction Declined",21:"Transaction Cancelled by MSR Swipe",22:"EMV error - Conditions Not Satisfied",23:"EMV error - Card Blocked",24:"Application selection failed",25:"EMV error - Card Not Accepted",26:"Empty Candidate List",27:"Application Blocked",41:"Contactless Remove Card",42:"Collision Detected",43:"Refer to Mobile Device Prompt",44:"Contactless Transaction Complete",45:"Request Switch to ICC/MSR - Kernel has refused contactless payment",46:"Wrong Card Type (MSD or EMV)",47:"No Application Interchange Profile (Tag 82) Received",49:"Magnetic stripe decoding error.",60:"Magnetic stripe decoding during Technical Fallback. Revert to MSR, powering up but not receiving an Answer to Reset from card.",61:"Magnetic stripe card decoded during MSR Fallback. Device reverted to MSR, but encountered fatal errors.",62:"Magnetic stripe card decoded during a No Fallback MSR read."})}};function oe(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var ce=class extends ne{constructor(e,t){super(e,t),oe(this,"parseEmvData",(e,t)=>t?{arqcData:this.convertArrayToHexString(e.slice(11)),arqcDataParsed:this.tlvParser(e.slice(13),!0)}:{signatureRequired:128===e[11]?"CBC-MAC checked in ARQC online response":1===e[11],batchData:this.convertArrayToHexString(e.slice(11)),batchDataParsed:this.tlvParser(e.slice(14),!0)}),oe(this,"parseEmvCommandResponse",e=>{const t=e.slice(4,6);return parseInt(t.join(""))?{code:parseInt(this.convertArrayToHexString(t),16),name:"StartTransactionError",message:this.emvResultCodes[t[1]]||"Transaction Error Message not yet documented"}:{code:0,message:"Success, transaction has started"}}),oe(this,"parseUserSelectionRequest",e=>({userSelectionRequest:{selectionType:0===e[0]?"Application Selection":"Language Selection",timeRemaining:e[1],menuItems:this.convertArrayToHexString(e.slice(2))}})),this.emvResultCodes=Object.freeze({129:"Failure, DUKPT scheme is not loaded",130:"Failure, DUKPT scheme is loaded but all of its keys have been used",131:"Failure, DUKPT scheme is not loaded (Security Level not 3 or 4)",132:"Invalid Total Transaction Time Field",133:"Invalid Card Type Field",134:"Invalid Options Field",135:"Invalid Amount Authorized Field",136:"Invalid Transaction Type Field",137:"Invalid Cash Back Field",138:"Invalid Transaction Currency Code Field",142:"Invalid Reporting Option",143:"Transaction Already In Progress",145:"Invalid Device Serial Number",150:"Invalid System Date and Time"})}};function he(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var de=class extends ce{constructor(e,t){super(e,t),he(this,"getCardServiceBase",e=>new Promise((t,i)=>this.device?this.connectAndCache(e).then(e=>e.getCharacteristic(this.cardDataNotification)).then(e=>(this.logDeviceState(`[GATT NOTIFICATIONS]: Request to cache characteristics, start notifications, and attach listeners. || ${new Date}`),e.startNotifications())).then(e=>(e.removeEventListener("characteristicvaluechanged",this.cardDataHandler),e.addEventListener("characteristicvaluechanged",this.cardDataHandler),this.cardDataListener=e,Promise.resolve())).then(()=>this.cardService.getCharacteristic(this.commandCharId)).then(e=>(this.commandCharacteristic=e,window&&(window.removeEventListener("beforeunload",this.onDestroyHandler),window.addEventListener("beforeunload",this.onDestroyHandler)),Promise.resolve())).then(()=>this.cardService.getCharacteristic(this.dataReadyId)).then(e=>e.startNotifications()).then(e=>(e.removeEventListener("characteristicvaluechanged",this.dataReadyHandler),e.addEventListener("characteristicvaluechanged",this.dataReadyHandler),this.dataReadyCharacteristic=e,Promise.resolve())).then(()=>this.cardService.getCharacteristic(this.dataReadStatusId)).then(e=>(this.dataReadStatusCharacteristic=e,this.logDeviceState(`[GATT NOTIFICATIONS]: Success! Cached characteristics, started notifications, and attached listeners. || ${new Date}`),t({code:0,message:"Device Open"}))).catch(e=>i(e)):i(this.buildDeviceErr(R)))),he(this,"dataReadyHandler",e=>{let t=e.target.value,i=this.readByteArray(t);this.logDeviceState(`dataReady listener: ${this.convertArrayToHexString(i)}`),this.commandSent&&(this.commandRespAvailable=!0,this.commandSent=!1)}),he(this,"cardDataHandler",e=>{let t=e.target.value;if(255!==t.getUint8(0)){let e=this.readByteArray(t);this.rawData={...this.rawData,[e[0]]:e.slice(1)}}else{if(this.maxBlockId=t.getUint8(1),this.checkNotificationLength()){if(this.initialNotification=this.rleFormats[this.rawData[0][0]]?this.decodeRLE(this.rawData[0]):this.rawData[0],this.logDeviceState(this.rawData),0===this.initialNotification[0]||1===this.initialNotification[0])return this.returnToUser(this.transactionCallback)(this.parseHidData(this.buildInitialDataArray(!0)));{let e=this.convertArrayToHexString([this.initialNotification[7],this.initialNotification[8]]);return this.findNotificationType(e)}}this.sendErrToCallback(this.throwLenErr())}}),he(this,"findNotificationType",e=>{let t=this.buildInitialDataArray(!0);switch(e){case"0300":return this.logDeviceState("==Transaction Status=="),this.returnToUser(this.transactionStatusCallback)(this.parseTransactionStatus(t));case"0301":return this.logDeviceState("==Display Message Request=="),this.returnToUser(this.displayCallback)({displayMessage:this.bufferToUtf8(t.slice(11))});case"0302":return this.logDeviceState("==User Selection Request=="),this.logDeviceState(this.convertArrayToHexString(t)),this.returnToUser(this.transactionStatusCallback)(this.parseUserSelectionRequest(buildNotification));case"0303":return this.logDeviceState("==ARQC Message=="),this.returnToUser(this.transactionCallback)(this.parseEmvData(t,!0));case"0304":return this.logDeviceState("==Batch Data Message=="),this.returnToUser(this.transactionCallback)(this.parseEmvData(t,!1));default:this.logDeviceState(`Undocumented Notification ID: ${e}`,t),this.logDeviceState(this.convertArrayToHexString(t))}}),he(this,"startTransaction",e=>new Promise((t,i)=>this.device.gatt.connected?this.sendCommandWithResp(this.buildEmvCommand(e||{})).then(a=>{let s=this.parseEmvCommandResponse(a);return this.logDeviceState(s),0===s.code?t(s):918!==s.code?i(this.buildDeviceErr(s)):this.setDeviceDateTime().then(()=>this.delayPromise(500)).then(()=>t(this.startTransaction(e)))}).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(O)))),he(this,"buildEmvCommand",e=>{let{timeout:t,cardType:i,transactionType:a,cashBack:s,currencyCode:r,reportVerbosity:n,emvOptions:o,authorizedAmount:c}=e;console.log(`timeout: ${t} || cardType: ${i} || transactionType: ${a} || emvOptions: ${o} || authorizedAmount: ${c} || cashBack: ${s} || currencyCode: ${r} || reportVerbosity: ${n}`);let h=[...this.emvCommandBase,t||60,i?this.cardTypes(i.toLowerCase()):3,void 0!==o?this.emvOptions[o.toLowerCase()]:128];return console.log("base command: ",h),h=c?h.concat(this.convertNumToAmount(c)):h.concat([0,0,0,0,1,0]),h=a?h.concat(this.transactionTypes[a.toLowerCase()]||0):h.concat(0),h=s?h.concat(this.convertNumToAmount(s)):h.concat(this.newArrayPartial(0,6)),h=r?h.concat(this.currencyCode[r.toLowerCase()]||this.currencyCode.default):h.concat([8,64]),h.push(n?this.statusVerbosity[n.toLowerCase()]||0:1),h}),he(this,"readCommandValue",()=>new Promise(e=>this.commandCharacteristic.readValue().then(t=>e(this.readByteArray(t))))),he(this,"readBatteryLevel",()=>new Promise(e=>this.sendCommandWithResp([69,0]).then(t=>e(t[2])))),he(this,"checkNotificationLength",()=>Math.max(...Object.keys(this.rawData))===this.maxBlockId-1),he(this,"sendCommandWithResp",e=>new Promise((t,i)=>this.commandCharacteristic?(this.logDeviceState(`Sending command: ${this.convertArrayToHexString(e)}`),this.commandSent=!0,this.commandCharacteristic.writeValue(Uint8Array.from(e)).then(()=>this.commandRespAvailable?Promise.resolve(!0):this.waitForDeviceResponse(15)).then(e=>(this.commandRespAvailable=!1,e?this.readCommandValue():i(this.buildDeviceErr(L)))).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e)))):i(this.buildDeviceErr(B)))),he(this,"returnToUser",e=>t=>(this.initialNotification=null,this.maxBlockId=null,this.rawData={},e(t))),he(this,"buildDateTimeCommand",e=>{let t=[73,34,0,0,3,12,0,28];t=t.concat(this.newArrayPartial(0,17));const i=e instanceof Date?e:new Date;return t.push(this.castDecToHex(i.getMonth()+1)),t.push(this.castDecToHex(i.getDate())),t.push(this.castDecToHex(i.getHours())),t.push(this.castDecToHex(i.getMinutes())),t.push(this.castDecToHex(i.getSeconds())),t.push(0),t.push(this.castDecToHex(i.getFullYear()-2008)),t=t.concat(this.newArrayPartial(0,4)),t}),he(this,"setDeviceDateTime",e=>new Promise((t,i)=>this.sendCommandWithResp(this.buildDateTimeCommand(e)).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e))))),he(this,"getKsn",()=>new Promise((e,t)=>this.device.gatt.connected?this.sendCommandWithResp([9,0]).then(e=>this.convertArrayToHexString(e.slice(2))).then(t=>e(t)):t(this.buildDeviceErr(I)))),he(this,"getDeviceSn",()=>new Promise(e=>this.sendCommandWithResp([0,1,3]).then(e=>this.bufferToUtf8(e.slice(2))).then(t=>e(t)))),he(this,"gatherDeviceInfo",()=>new Promise((e,t)=>{let i,a;this.readBatteryLevel().then(e=>(i=e,this.getDeviceSn())).then(t=>(a=t,e([i,a]))).catch(e=>t(e))})),he(this,"getDeviceInfo",()=>new Promise((e,t)=>this.device.gatt.connected?this.gatherDeviceInfo().then(t=>e({deviceName:this.device.name,deviceType:this.deviceType,batteryLevel:t[0],serialNumber:t[1],isConnected:this.device.gatt.connected})).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(O)))),he(this,"sendUserSelection",e=>new Promise((t,i)=>this.device.gatt.connected?this.sendCommandWithResp([73,8,0,0,3,2,0,2,0,e]).then(e=>(this.logDeviceState(`[User Selection Resp]: ${this.convertArrayToHexString(e)}`),t({userSelectionResponse:this.resultCodes[this.convertArrayToHexString(e.slice(4,6))]||"Unknown or undocumented result code"}))).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(O)))),he(this,"buildArpcCommand",(e,t)=>[73,e+6,0,0,3,3,0,e,...t]),he(this,"sendArpc",e=>new Promise((t,i)=>this.sendArpcBase(e).then(e=>this.sendCommandWithResp(e)).then(e=>{this.logDeviceState(`[Send ARPC Resp]: ${this.convertArrayToHexString(e)}`);const i=e.length>5?this.convertArrayToHexString(e.slice(4,6)):"";return t({sendArpcResponse:this.resultCodes[i]||"Unknown or undocumented result code"})}).catch(e=>i(this.buildDeviceErr(e))))),he(this,"clearGattCache",()=>{window&&window.removeEventListener("beforeunload",this.onDestroyHandler),this.maxBlockId=null,this.initialNotification=null,this.rawData={},this.dataReadStatusCharacteristic=null,this.dataReadyCharacteristic=null,this.commandCharacteristic=null,this.cardDataListener=null}),he(this,"ceaseNotifications",()=>new Promise(e=>this.cardDataListener?this.cardDataListener.stopNotifications().then(()=>(this.cardDataListener.removeEventListener("characteristicvaluechanged",this.cardDataHandler),this.dataReadStatusCharacteristic.stopNotifications())).then(()=>(this.dataReadyCharacteristic.removeEventListener("characteristicvaluechanged",this.dataReadyHandler),e())):e())),he(this,"cancelTransaction",()=>new Promise((e,t)=>this.commandCharacteristic?this.commandCharacteristic.writeValue(this.cancelEmvCommand).then(()=>e()).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(B)))),he(this,"closeDevice",()=>new Promise((e,t)=>this.device.gatt.connected?this.ceaseNotifications().then(()=>(this.clearGattCache(),this.disconnect())).then(()=>e({code:0,message:"Device Closed"})).catch(e=>t(this.buildDeviceErr(e))):e({code:0,message:"Device Closed"}))),he(this,"clearSession",()=>new Promise((e,t)=>this.device&&this.device.gatt.connected?e("SCRA devices do not carry a session"):t(this.buildDeviceErr(O)))),this.transactionCallback=t.transactionCallback||t,this.displayCallback=t.displayCallback,this.transactionStatusCallback=t.transactionStatusCallback,this.userSelectionCallback=t.userSelectionCallback,this.maxBlockId=null,this.initialNotification=null,this.rawData={},this.dataReadStatusCharacteristic=null,this.dataReadyCharacteristic=null,this.commandCharacteristic=null,this.cardDataListener=null,this.cardDataNotification="0508e6f8-ad82-898f-f843-e3410cb60201",this.commandCharId="0508e6f8-ad82-898f-f843-e3410cb60200",this.dataReadyId="0508e6f8-ad82-898f-f843-e3410cb60202",this.dataReadStatusId="0508e6f8-ad82-898f-f843-e3410cb60203",this.emvOptions=Object.freeze({normal:0,bypasspin:1,forceonline:2,quickchip:128,pinbypassquickchip:129,forceonlinequickchip:130}),this.resultCodes=Object.freeze({"0000":"Success","038B":"Invalid Selection Status","038C":"Invalid Selection Result","038D":"Failure, no transaction currently in progress","038F":"Failure, transaction already in progress"}),this.emvCommandBase=[73,25,0,0,3,0,0,19],this.cancelEmvCommand=Uint8Array.of(73,6,0,0,3,4,0,0)}};function le(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var ue=class extends de{constructor(e,t){super(e,t),le(this,"getCardService",()=>new Promise((e,t)=>this.getCardServiceBase(1).then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))))),le(this,"requestCardSwipe",()=>new Promise((e,t)=>this.device.gatt.connected?e({code:0,message:d}):this.getCardServiceBase(1).then(()=>e({code:0,message:d})).catch(e=>t(this.buildDeviceErr(e))))),this.deviceType="eDynamo"}};function me(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var pe=class extends de{constructor(e,t){super(e,t),me(this,"getCardService",()=>new Promise((e,t)=>this.getCardServiceBase().then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))))),me(this,"requestCardSwipe",()=>new Promise((e,t)=>this.device.gatt.connected?this.sendCommandWithResp(this.setHeadAlwaysOn).then(i=>0===parseInt(i)?e({code:0,message:d}):t(this.buildDeviceErr(H))).catch(e=>t(e)):this.getCardServiceBase().then(()=>this.sendCommandWithResp(this.setHeadAlwaysOn)).then(i=>0===parseInt(i)?e({code:0,message:d}):t(this.buildDeviceErr(H))).catch(e=>t(e)))),this.setHeadAlwaysOn=[88,1,1],this.deviceType="tDynamo"}};const ve=e=>()=>Promise.resolve(`${e?"SCRA":"PinPad"} devices do not use this command`);class ge{constructor(e){let{getCardService:t,startTransaction:i,cancelTransaction:a,sendCommandWithResp:s,clearSession:r,closeDevice:n,getDeviceInfo:o,requestCardSwipe:c,isDeviceConnected:h,disconnect:d,requestPinEntry:l,setDisplayMessage:u,sendUserSelection:m,sendArpc:p,setDeviceDateTime:v,requestTipOrCashback:g}=e;this.openDevice=t,this.startTransaction=i,this.cancelTransaction=a,this.sendCommand=s,this.clearSession=r,this.closeDevice=n,this.deviceInfo=o,this.requestCardSwipe=c,this.isDeviceOpen=h,this.forceDisconnect=d,this.requestPinEntry=l||ve(!0),this.setDisplayMessage=u||ve(!0),this.sendUserSelection=m||ve(),this.sendArpcResponse=p||(()=>Promise.resolve("Feature Pending Completion")),this.setDeviceDateTime=v||ve(),this.requestTipOrCashback=g||ve(!0)}}const fe={eDynamo:(e,t)=>new ue(e,t),tDynamo:(e,t)=>new pe(e,t),dynaProGo:(e,t)=>new ie(e,t),[l]:(e,t)=>new te(e,t)},Ce=(e,t,i)=>({id:e.id,name:e.name,deviceType:i,deviceInterface:new ge(fe[i](e,t))}),be=new RegExp(/^eDynamo-/),De=new RegExp(/^tDynamo-/),Se=new RegExp(/^DPMini/),ye=new RegExp(/^DPG/),Te=(e,t)=>{if(t){const e=(e=>{const t=["dynaProGo",l,"eDynamo","tDynamo"];let i="";for(let a=0;a<t.length;a++)if(e.toLowerCase()===t[a].toLowerCase()){i=t[a];break}return i})(t);if(console.log("[!!]: ",e),e)return e}return i=e,De.test(i)?"tDynamo":be.test(i)?"eDynamo":ye.test(i)?"dynaProGo":Se.test(i)?l:"";var i},we=(e,t,i)=>new Promise((a,n)=>{if("object"==typeof e&&void 0===e.transactionCallback)return n("When providing multiple callbacks in an object, 'transactionCallback' must be provided");e=(e=>{const t="function"==typeof(e=e||(e=>{console.warn("Callback not provided to 'scanForDevices' function. Please provide at least one callback function to this method"),console.log("transactionCallback data: ",e)})),i=i=>e[i]?e[i]:t?e:e.transactionCallback;return e.errorCallback=e.errorCallback||(e=>console.error("[MagensaBluetooth Internal Error]: ",e)),e.transactionStatusCallback=e.transactionStatusCallback||i("transactionStatusCallback"),e.userSelectionCallback=e.userSelectionCallback||i("userSelectionCallback"),e.displayCallback=e.displayCallback||i("displayCallback"),e.disconnectHandler=e.disconnectHandler||i("transactionCallback"),e})(e);const o=t?(e=>({filters:[{namePrefix:e}],optionalServices:["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101","0508e6f8-ad82-898f-f843-e3410cb60202","device_information"],keepRepeatedDevices:!1,acceptAllAdvertisements:!1}))(t):r;return navigator.bluetooth.requestDevice(o).then(t=>{const s=Te(t.name,i);return s?a(Ce(t,e,s)):(r=t,new Promise((e,t)=>{let i;return r.gatt.connect().then(e=>e.getPrimaryService("device_information")).then(e=>e.getCharacteristic("model_number_string")).then(e=>e.readValue()).then(e=>(i=new TextDecoder("utf-8").decode(e).trim(),Promise.resolve(r.gatt.disconnect()))).then(()=>e(i)).catch(i=>i.code===P.errorCode&&i.name===P.errorName&&i.message.includes("0000180a-0000-1000-8000-00805f9b34fb")?r.gatt.connected?Promise.resolve(r.gatt.disconnect()).then(()=>e("dynaProGo")):e("dynaProGo"):t(i))})).then(i=>i?a(Ce(t,e,i)):n("Selected device is not supported")).catch(e=>n(e));var r}).catch(e=>n("object"==typeof e?new s(e):"Selected device is not supported"))})}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,