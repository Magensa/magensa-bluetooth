!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["magensa-bluetooth"]=t():e["magensa-bluetooth"]=t()}(window,(function(){return function(e){var t={};function i(a){if(t[a])return t[a].exports;var s=t[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(a,s,function(t){return e[t]}.bind(null,s));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t),i.d(t,"scanForDevices",(function(){return Ae}));class a extends Error{constructor(e){let{message:t,code:i,name:a}=e;super(t||"Web Bluetooth API threw an unknown, or undocumented error"),this.code=i||1e3,this.name=a||"WebBluetoothError"}}var s=a;const r={filters:[{services:["0508e6f8-ad82-898f-f843-e3410cb60104"]},{services:["0508e6f8-ad82-898f-f843-e3410cb60101"]},{services:["0508e6f8-ad82-898f-f843-e3410cb60103"]}],optionalServices:["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101","0508e6f8-ad82-898f-f843-e3410cb60202","device_information"],keepRepeatedDevices:!1,acceptAllAdvertisements:!1};function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var o=class{constructor(){n(this,"logDeviceState",e=>window.dispatchEvent(new CustomEvent("deviceLog",{bubbles:!0,detail:e}))),n(this,"convertArrayToHexString",e=>Array.from(e,e=>("0"+(255&e).toString(16)).slice(-2)).join("").toUpperCase()),n(this,"readTwoByteLength",e=>e[0]<<8|e[1]),n(this,"bufferToUtf8",e=>new TextDecoder("utf-8").decode(Uint8Array.from(e))),n(this,"castDecToHex",e=>parseInt(e.toString(16),16)),n(this,"newArrayPartial",(e,t)=>new Array(t).fill(e)),n(this,"readByteArray",e=>{let t=[];for(let i=0;i<e.byteLength;i++)t.push(e.getUint8(i));return t}),n(this,"hexToAscii",e=>{let t="";for(let i=0;i<e.length&&"00"!==e.substr(i,2);i+=2)t+=String.fromCharCode(parseInt(e.substring(i,i+2),16));return t.trim()}),n(this,"hexToBytes",e=>{let t=[];for(let i=0;i<e.length;i+=2)t.push(parseInt(e.substring(i,i+2),16));return t}),n(this,"decodeRLE",e=>{const t=e.length;let i=[e[0]],a=0;for(let s=1;s<t;s++)a=s+1,a+1<t&&e[s]===e[a]?(i.push(...this.newArrayPartial(e[s],e[a+1])),s=a+1):i.push(e[s]);return i}),n(this,"buildInitialDataArray",e=>{let t=[];for(let e=Math.min(...Object.keys(this.rawData));e<this.maxBlockId;e++)t=t.concat(...this.rawData[e]);return e?this.checkRle(t):t}),n(this,"checkRle",e=>this.rleFormats[this.initialNotification[0]]?this.decodeRLE(e):e),n(this,"convertCurrencyCode",e=>{const t=e.toLowerCase();return"us"===t?[8,64]:"euro"===t?[9,120]:[0,0]}),n(this,"convertNumToAmount",(e,t)=>{t=t||12;let i=e.toString(),a=[];for(;i.length<t;)i="0"+i;for(let e=0;e<i.length;e+=2)a.push(parseInt(i.substring(e,e+2),16));return a}),n(this,"delayPromise",(e,t)=>new Promise(i=>{setTimeout(i,e,t)})),n(this,"byteArrayToNumber",e=>parseInt(this.convertArrayToHexString(e),10)),this.rleFormats=Object.freeze({0:!1,1:!0,2:!1,3:!0})}};function c(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var h=class extends o{constructor(){super(),c(this,"formatExpPAN",e=>{let t="object"==typeof e?this.bufferToUtf8(e.slice(4)):e;if(-1!==t.indexOf(";")){const e=this.splitExpPAN(t);return{maskedPAN:e[0],Last4:e[1],expirationDate:e[2],serviceCode:e[3]}}return{maskedPAN:"",Last4:"",expirationDate:"",serviceCode:""}}),c(this,"splitExpPAN",e=>{if(e.length>3){const t=e.replace(";","").replace("?","").split("="),i=t[1].slice(0,4),a=t[1].slice(4,7),s=i.slice(-2)+"/"+i.slice(0,2);return[t[0],t[0].slice(-4),s,a]}return["Not Found","Not Found","Not Found","Not Found"]})}};function d(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var l=class extends h{constructor(){super(),d(this,"tlvParser",(e,t)=>{const i=e.length;let a,s,r,n=[],o=0,c=!0,h=null,d=[];for(;o<i;)if(s=e[o],c){a=0;let t=!0;if(0===s)break;for(;t&&o<i;)s=e[o],o++,d[a]=s,t=0===a?(s&this.moreTagBytesFlag1)==this.moreTagBytesFlag1:(s&this.moreTagBytesFlag2)==this.moreTagBytesFlag2,a++;h=this.convertArrayToHexString(d.slice(0,a)),c=!1}else{if(r=0,(s&this.moreLengthFlag)==this.moreLengthFlag){let t=s&this.oneByteLengthMask;o++;let a=0;for(;a<t&&o<i;)s=e[o],o++,r=((255&r)<<8)+s,a++}else r=s&this.oneByteLengthMask,o++;if(h){let a=d[0],s=(o+r>i?i:o+r)-o,c=s>0?this.convertArrayToHexString(e.slice(o,o+s)):"";n.push({tag:h,tagLength:r||c.length+.5,tagValue:this.hexOrAsciiFormatter(h,c,t)}),(a&this.constructedFlag)!=this.constructedFlag&&(o+=r)}c=!0}return n}),d(this,"hexOrAsciiFormatter",(e,t,i)=>{switch(e){case"DFDF1A":return`${t} ${this.trxStatusToString[parseInt(t,16)]}`;case"DFDF4D":case"5F20":return this.hexToAscii(t);case"DFDF25":return i?this.hexToAscii(t?t.substring(0,14):t):t;case"DFDF40":return 128===t?`${t}  CBC-MAC checked in ARQC online response`:1===t;default:return t}}),this.moreTagBytesFlag1=31,this.moreTagBytesFlag2=128,this.constructedFlag=32,this.moreLengthFlag=128,this.oneByteLengthMask=127,this.trxStatusToString=Object.freeze({0:"Approved",1:"Declined",2:"Error",16:"Cancelled By Host",17:"Confirm Amount No",18:"Confirm Amount Timeout",19:"Confirm Amount Cancel",20:"MSR Select Debit",21:"MSR Select Debit",22:"MSR Select Credit/Debit timout",23:"MSR Select Credit/Debit cancel",24:"Signature Capture Cancelled by Host (SC-S Only | SC-F only)",25:"Signature Capture Timeout (SC-S Only | SC-F Only)",26:"Signature Capture Cancelled by Cardholder (SC-S Only | SC-F Only)",27:"PIN Entry Cancelled by Host",28:"PIN entry timeout",29:"PIN entry Cancelled by Cardholder",30:"Manual Selected Cancelled by Host",31:"Manual Selection Timeout",32:"Manual Selction Cancelled by Cardholder",33:"Waiting for Card Cancelled by Host",34:"Waiting for Card Timeout",35:"[SCRA]: Cancelled by Card Swipe (MSR) ||[PIN]: Waiting for Card Cancelled by Cardholder ",36:"Waiting for Card ICC Seated",37:"Waiting for Card MSR Swiped",255:"Unknown Transaction Status"})}};class u extends Error{constructor(){super("Device communication error. Length does not match data"),this.name="BleTransmissionError",this.code=1012}}var m=u;class p extends Error{constructor(e){let{code:t,name:i,message:a}=e;super(a),this.name=i||"DeviceError",this.code=t||1e3}}var v=p;function g(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var f=class extends l{constructor(e){super(),g(this,"buildDeviceErr",e=>e instanceof DOMException?new s(e):e instanceof Error?e:new v(e)),g(this,"throwLenErr",()=>new m),g(this,"sendErrToCallback",e=>(this.errorCallback(e),e)),this.errorCallback=e.errorCallback}};const C=Object.freeze({errorCode:8,errorName:"NotFoundError"}),b=Object.freeze({code:19,name:"NetworkError"}),D=Object.freeze({code:1002,name:"DeviceNotFound",message:"Please select device to connect"}),S=Object.freeze({code:1003,name:"GattServerNotConnected",message:"Please connect desired device"}),y=Object.freeze({code:1004,name:"CommandNotSent",message:"Command characteristic not found, device not opened"}),T=Object.freeze({code:1005,name:"CommandNotSent",message:"Device not opened"}),w=Object.freeze({code:1006,name:"CommandNotSent",message:"Application From Host not found.  Device not connected"}),A=Object.freeze({code:1007,name:"ReadFailed",message:"Unable to read data from device. Communication error"}),k=Object.freeze({code:1008,name:"ResponseNotReceived",message:"Command was sent, but response was not received from device"}),P=Object.freeze({code:1009,name:"GetServiceFail",message:"Failed to retrieve primary GATT service. Please connect device"}),E=Object.freeze({code:1013,name:"CommandNotAccepted",message:"Device did not accept command"}),R=e=>Object.freeze({code:1014,name:"MissingRequiredParameter",message:`'${e}' is required to call this function.`}),I=(e,t)=>Object.freeze({code:1015,name:"IncorrectInputType",message:`Parameter type for ${t} was not correct, acceptable type(s) are: ${e.join(", ")}`}),B=(e,t)=>Object.freeze({code:1015,name:"IncorrectInputValue",message:`Parameter value for ${t} was not correct, acceptable value(s) are: ${e.join(", ")}`}),O="DynaPro Mini",N="Configuration",x="Unknown/Undocumented",L=Object.freeze({code:0,message:"Success, there was no session to clear"}),H=Object.freeze({code:19,message:"GATT operation already in progress."}),M=Object.freeze({code:0,message:"Device Closed"}),j=Object.freeze({eDynamo:3,tDynamo:7,[O]:3,dynaProGo:7}),$=Object.freeze({msr:1,chip:2,chipmsr:3,contactless:4,contactlessmsr:5,contactlesschip:6,all:7});function F(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var U=class extends f{constructor(e,t){super(t),F(this,"cardTypes",e=>"all"!==e?$[e]||3:j[this.deviceType]||3),F(this,"connect",()=>new Promise((e,t)=>(this.logDeviceState(`[GATT]: Device Connection Request || ${new Date}`),this.device?this.device.gatt.connect().then(t=>(this.logDeviceState(`[GATT]: Device connected - GATT Server retrieved successfully || ${new Date}`),this.gattServer=t,e())):t(this.buildDeviceErr(D))))),F(this,"disconnect",()=>new Promise(e=>(this.device.gatt.connected&&this.device.gatt.disconnect(),e(M)))),F(this,"cacheCardServiceBase",e=>new Promise((t,i)=>(e=e||0,this.logDeviceState(`[GATT]: Cache Card Service Request || ${new Date}`),this.gattServer?this.findPrimaryService(e).then(e=>t(e)).catch(e=>i(e)):i(this.buildDeviceErr(S))))),F(this,"findPrimaryService",e=>new Promise((t,i)=>this.gattServer.getPrimaryService(this.deviceUUIDs[e]).then(e=>(this.cardService=e,this.logDeviceState(`[GATT]: Success! GATT Card Service retrieved and cached || ${new Date}`),this.device.addEventListener("gattserverdisconnected",this.disconnectHandler),t(e))).catch(a=>a.code===C.errorCode&&a.name===C.errorName?(this.deviceUUIDs[e+1],this.logDeviceState(`[ERROR]: Failed to connect. UUID: ${this.deviceUUIDs[e]} is not valid for this device. Trying again with UUID: ${this.deviceUUIDs[e+1]} || ${new Date}`),t(this.findPrimaryService(e+1))):(this.logDeviceState(`[ERROR]: Failed to retrieve Card Service - UUID: ${this.deviceUUIDs[e]} is not valid for this device. || ${new Date}`),i(a))))),F(this,"connectAndCache",e=>new Promise((t,i)=>{const a=t=>new Promise((i,s)=>t<4?this.connect().then(()=>this.cacheCardServiceBase(e)).then(e=>i(e)).catch(e=>e.code===b.code&&e.name===b.name?setTimeout(()=>(this.logDeviceState(`[ERROR]: Error caching GATT Service - Clearing cache and trying again. || ${new Date}`),this.clearGattCache(),i(a(t+1))),500):(this.logDeviceState(`[ERROR]: Failed to cache GATT Service || ${new Date}`),s(e))):s(this.buildDeviceErr(P)));return a(0).then(e=>t(e)).catch(e=>i(e))})),F(this,"sendArpcBase",e=>new Promise((t,i)=>{if(!this.device.gatt.connected)return i(this.buildDeviceErr(T));if("string"!=typeof e&&"object"!=typeof e)return i(this.buildDeviceErr(I(["string","array of numbers"],"ARPC")));const a="string"==typeof e?e.length/2:e.length,s="string"==typeof e?this.hexToBytes(e):e;return t(this.buildArpcCommand(a,s))})),F(this,"onDestroyHandler",()=>{if(this.device&&this.device.gatt.connected)return this.device.gatt.disconnect()}),F(this,"waitForDeviceResponse",e=>new Promise(t=>{const i=a=>a<e?this.commandRespAvailable?t(!0):setTimeout(()=>i(a+1),200):t(!1);i(0)})),F(this,"disconnectHandler",e=>{this.gattServer=null,this.cardService=null,this.logDeviceState(`[Disconnected]: Disconnect event. Returning event to user, removing device listener || ${new Date}`),this.disconnectCallback(e),this.device.removeEventListener("gattserverdisconnected",this.disconnectHandler)}),F(this,"isDeviceConnected",()=>!!this.device.gatt&&this.device.gatt.connected),this.device=e,this.disconnectCallback=t.disconnectHandler,this.gattServer=null,this.cardService=null,this.deviceUUIDs=["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101"],this.currencyCode=Object.freeze({dollar:[8,64],euro:[9,120],pound:[8,38],default:[0,0]}),this.transactionTypes=Object.freeze({purchase:0,cashadvance:1,cashback:2,purchasegoods:4,purchaseservices:8,contactlesscashback:9,cashmanual:18,refund:32,chiponlypayment:80}),this.commandRespAvailable=!1}};function q(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var W=class extends U{constructor(e,t){super(e,t),q(this,"validateAmount",e=>(t,i,a)=>{switch(typeof t){case"number":return t.toString().length>12?e(B(["number of 12 digits or less","byte array representation of amount (6 bytes, n12 format)"],t)):this.convertNumToAmount(t);case"object":return 6===t.length?t:e(B(["12 digit or less number","byte array representation of amount (6 bytes, n12 format)"],i));case"undefined":return void 0===a?e(R(i)):a;default:return e(I(["number of 12 digits or less","byte array representation of amount (6 bytes, n12 format)"],i))}}),q(this,"validateRequiredInputs",e=>new Promise((t,i)=>{for(let t=0;t<e.length;t++){let{prop:a,validTypes:s,validValues:r,condition:n,propName:o}=e[t];if(void 0===a&&n)return i(R(o));let c=!1;for(let e=0;e<s.length;e++)if(typeof a===s[e]){c=!0;break}if(!c)return i(I(s,o));if(void 0!==r){let e=!1;for(let t=0;t<r.length;t++)if(a.toLowerCase()===r[t]){e=!0;break}if(!e)return i(B(r,o))}}return t(!0)}))}};function z(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var G=class extends W{constructor(e,t){super(e,t),z(this,"decimalToBinary",e=>{let t=(e>>>0).toString(2);return"00000000".substr(t.length)+t}),z(this,"stringNumToBool",e=>!!+e),z(this,"findNullTerminatedString",e=>{let t;for(let i=0;i<e.length;i++)if(0===e[i]&&0===e[i+1]&&0===e[i+2]){t=i;break}return t?this.convertArrayToHexString(e.slice(2,t)):this.convertArrayToHexString(e.slice(2))}),z(this,"findPinLength",(e,t)=>{let i=12,a=4;return e&&"number"==typeof e&&e<=12&&(i=e>=4?e:12),t&&"number"==typeof t&&t>=4&&(a=t<=i?t:4),parseInt(`${i.toString(16)}${a.toString(16)}`,16)}),z(this,"buildPinOptionsByte",(e,t,i,a)=>{const s=Object.freeze({disabled:"00",englishfrench:"01",allspecified:"10"}),r=`000${e=e&&s[e.toLowerCase()]||s.disabled}${(t="boolean"!=typeof t||t)?"1":"0"}${"boolean"!=typeof t||t?"1":"0"}${a=a&&"string"==typeof a?"iso0"===a.toLowerCase()?"0":"1":"0"}`;return this.logDeviceState(`[PinOptionsByte]: binary string representation: ${r} || byte result: ${parseInt(r,2)}`),parseInt(r,2)}),z(this,"buildN2Format",e=>{const t=e.toString(),i=2===t.length?t:`0${t}`;return parseInt(`0x${i[0]}${i[1]}`,16)})}};function V(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var K=class extends G{constructor(e,t){super(e,t),V(this,"parseDeviceConfiguration",e=>({...this.firstDeviceControlByte(this.decimalToBinary(e[1])),...this.secondDeviceControlByte(this.decimalToBinary(e[2])),...this.maskConfigurationByte(this.decimalToBinary(e[3])),...this.msrConfigurationByte(this.decimalToBinary(e[4])),maskCharacter:this.findMaskCharacter(e[5]),leadingUnmaskedLength:parseInt(this.decimalToBinary(e[6]).slice(4),2),trailingUnmaskedLength:parseInt(this.decimalToBinary(e[6]).slice(0,4),2),emvL2IcsConfig:this.emvL2ConfigOptions[this.decimalToBinary(e[7]).slice(0,4)]||`${x} EMV L2 ICS ${N}`,...this.contactlessConfig(e[8])})),V(this,"contactlessConfig",e=>({contactlessSupport:this.enabledBrands[this.convertArrayToHexString([e])[0]],contactlessGuiControls:"1"===this.decimalToBinary(e)[5]?"Alternate":"Standard"})),V(this,"findMaskCharacter",e=>{if(48===e)return"ASCII: '0'";{const t=this.convertArrayToHexString([e]),i=this.hexToAscii(t);return i?`ASCII: '${i}'`:`Non-ASCII character in hex: '${t}'`}}),V(this,"firstDeviceControlByte",e=>({requireMutualAuth:this.stringNumToBool(e[0]),msrEncryptionVariant:"1"===e[1]?"DATA":"PIN",isClearTextEnabled:this.stringNumToBool(e[3]),isBeeperModeEnabled:this.stringNumToBool(e[4]),isBitmapLocked:this.stringNumToBool(e[6]),isConfigurationLocked:this.stringNumToBool(e[7])})),V(this,"secondDeviceControlByte",e=>({isArpcMacEnabled:this.stringNumToBool(e[1]),isFinancialIccCardTypeReportingEnabled:this.stringNumToBool(e[2]),arqcBatchDataOutputFormat:"1"===e[3]?"Reserved Format":"DynaPro Format"})),V(this,"maskConfigurationByte",e=>({isIsoMaskEnabled:this.stringNumToBool(e[7]),isCheckDigitEnabled:this.stringNumToBool(e[6]),isMs2Point0Enabled:"00"!==e.slice(4,6)})),V(this,"msrConfigurationByte",e=>({isAAMVAcardEnabled:this.stringNumToBool(e[7]),track3Data:this.trackDataOptions[e.slice(4,6)]||"Unknown",track2Data:this.trackDataOptions[e.slice(2,4)]||"Unknown",track1Data:this.trackDataOptions[e.slice(0,2)]||"Unknown"})),this.trackDataOptions=Object.freeze({"00":"Disabled","01":"Enabled",11:"Required"}),this.emvL2ConfigOptions=Object.freeze({"0000":"No L2 Capability","0001":`${N} C1 (EMVCo certified)`,"0010":`${N} C2`,"0011":`${N} C3`,"0100":`${N} C4 (EMVCo certified)`,"0101":`${N} C5 (EMVCo certified)`,"0110":`${N} C6`,"0111":`${N} C7`}),this.enabledBrands=Object.freeze({0:"All contacless kernals enabled",1:"PayPass/MCL support disabled",2:"payWave support disabled",4:"Expresspay support disabled",8:"D-PAS support disabled"})}};function _(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var Q=class extends K{constructor(e,t){super(e,t),_(this,"findEmvCardholderStatus",e=>({emvCardholderStatus:this.cardholderStatusIds[e]||`${x} Cardholder Interaction Status ID: ${e}`})),_(this,"findOperationStatus",e=>({operationStatus:this.operationStatus[e]||`${x} Operation Status`})),_(this,"parseDisplayMessageDone",e=>this.findOperationStatus(e[2])),_(this,"parseEmvCompletion",e=>(this.logDeviceState(`[EMV Completion]: ${this.convertArrayToHexString(e)}`),{emvCompletionResponse:e})),_(this,"formatSerialNumber",e=>this.deviceSerialNumber=this.hexToAscii(this.findNullTerminatedString(e))),_(this,"handleBigBlockBegin",e=>{switch(e[1]){case 164:this.arqcArriving=!0,this.arqcTotalLen=this.readTwoByteLength([e[5],e[4]]);break;case 171:this.batchDataArriving=!0,this.batchTotalLen=this.readTwoByteLength([e[5],e[4]]);break;case 24:case 32:case 33:break;default:this.transactionStatusCallback({bufferType:this.bufferTypes[e[1]]||"Buffer type not documented"})}}),_(this,"handleArqcBigBlockFinish",()=>{const e=this.buildInitialDataArray(!1),t=this.convertArrayToHexString(e);return this.logDeviceState(`[ARQC]: ${t}`),this.cardDataObj={...this.cardDataObj,arqcData:t,arqcDataParsed:this.tlvParser(e.slice(2))},this.rawData={},this.arqcArriving=!1,this.isQuickChipTransaction?void 0:this.transactionCallback(this.cardDataObj)}),_(this,"handleBatchBigBlockFinish",()=>{const e=this.buildInitialDataArray(!1),t=this.convertArrayToHexString(e);this.logDeviceState(`[BATCH DATA]: ${t}`),this.transactionHasStarted=!1;const i=this.tlvParser(e.slice(2)),a=i.find(e=>{let{tag:t}=e;return"DFDF40"===t});return this.cardDataObj=a?{...this.cardDataObj,batchData:t,batchDataParsed:i,signatureRequired:1===a}:{...this.cardDataObj,batchData:t,batchDataParsed:i},this.rawData={},this.batchDataArriving=!1,this.transactionCallback(this.cardDataObj)}),_(this,"handleBigBlockFinish",()=>this.arqcArriving?this.handleArqcBigBlockFinish():this.batchDataArriving?this.handleBatchBigBlockFinish():void 0),_(this,"parseEmvCardholderInteractionStatus",e=>{switch(e[1]){case 2:return{...this.findEmvCardholderStatus(e[1]),isAmountConfirmed:1===e[4]||2!==e[4]&&`${x} Amount Confirmed Status`};case 4:return{...this.findEmvCardholderStatus(e[1]),applicationOrLabelName:this.bufferToUtf8(e.slice(4))};case 10:return{...this.findEmvCardholderStatus(e[1]),methodSelected:1===e[4]?"Credit":2===e[4]?"Debit":`${x} payment method selected`};case 32:return{...this.findEmvCardholderStatus(e[1]),tlvData:this.convertArrayToHexString(e.slice(4)),parsedTlvData:this.tlvParser(e.slice(4))};default:return void 0===e[4]?this.findEmvCardholderStatus(e[1]):{...this.findEmvCardholderStatus(e[1]),undocumentedData:this.convertArrayToHexString(e.slice(4))}}}),_(this,"parseCardStatusReport",e=>e.length<4?this.findOperationStatus(e[2]):{...this.findOperationStatus(e[2]),cardStatus:0===e[2]?"Ok":"Error",cardType:this.cardTypesEnum[e[3]]}),_(this,"parseAckResponse",e=>({code:e[1],message:this.ACKSTS[e[1]],commandType:this.pinCommandIds[e[2]]||"Device error or command type not documented"})),_(this,"parseDeviceStateReport",e=>({deviceState:this.deviceState[e[1]]||`${x} device state id: ${e[1]}`,sessionState:this.parseSessionState(this.decimalToBinary(e[2])),deviceStatus:this.parseDeviceStatus(this.decimalToBinary(e[3])),deviceCertStatus:this.parseCertStatus(this.decimalToBinary(e[4])),hardwareStatus:this.parseHardwareStatus(this.decimalToBinary(e[5])),additionalInfo:this.parseAdditionalInfo(this.decimalToBinary(e[6]))})),_(this,"parseSessionState",e=>({powerDidChange:this.stringNumToBool(e[0]),cardDataIsAvailable:this.stringNumToBool(e[4]),panParsedFromCard:this.stringNumToBool(e[5]),externalPanSent:this.stringNumToBool(e[6]),amountWasSent:this.stringNumToBool(e[7])})),_(this,"parseCertStatus",e=>({msrCrlCertExists:this.stringNumToBool(e[0]),pinCrlCertExists:this.stringNumToBool(e[1]),mfgUnbindCertExists:this.stringNumToBool(e[3]),msrCaCertExists:this.stringNumToBool(e[4]),pinCaCertExists:this.stringNumToBool(e[5]),deviceCaCertExists:this.stringNumToBool(e[6]),deviceCertExists:this.stringNumToBool(e[7])})),_(this,"keyStatusEnum",e=>Object.freeze({"00":`${e} Key OK`,"01":`${e} Key Exhausted`,10:`No ${e} Key`,11:`${e} Key Not Bound`})),_(this,"parseDeviceStatus",e=>"00000000"!==e?{pinKeyStatus:this.keyStatusEnum("PIN")[e.slice(6)],msrKeyStatus:this.keyStatusEnum("MSR")[e.slice(4,6)],tamperDetected:this.stringNumToBool(e[3]),isAuthenticated:this.stringNumToBool(e[1]),deviceErrorDetected:this.stringNumToBool(e[0])}:"Ok"),_(this,"parseHardwareStatus",e=>({IE3_only:this.stringNumToBool(e[0]),SRED:this.stringNumToBool(e[1]),MagHeadIsProgrammed:this.stringNumToBool(e[6]),tamperSensorsAreActive:this.stringNumToBool(e[7])})),_(this,"parseAdditionalInfo",e=>({ICC_AcquirerMasterKeyIsInjected:!this.stringNumToBool(e[7]),ICC_SessionKeyIsActive:!this.stringNumToBool(e[6]),CAPK_EmvDatabaseIsCorrupted:this.stringNumToBool(e[5]),EmvTerminalDatabaseIsCorrupted:this.stringNumToBool(e[4]),cardIsPresentInChipCardConnector:this.stringNumToBool(e[3])})),_(this,"parseCardData",e=>{const t=this.cardDataIds[e[1]]||"trackNameUnknown";if(0===e[2])switch(t){case"track1":this.cardDataObj={...this.cardDataObj,[t]:this.bufferToUtf8(e.slice(4))};break;case"track2":this.cardDataObj={...this.cardDataObj,[t]:this.bufferToUtf8(e.slice(4)),...this.formatExpPAN(e)};break;case"ksnAndMagnePrintStatus":this.cardDataObj={...this.cardDataObj,ksn:this.convertArrayToHexString(e.slice(4,14)),magnePrintStatus:this.convertArrayToHexString(e.slice(-4))};break;default:this.cardDataObj={...this.cardDataObj,[t]:this.convertArrayToHexString(e.slice(4))}}else this.cardDataObj={...this.cardDataObj,[t]:this.convertStatusToString[e[2]]}}),_(this,"parsePinResponse",e=>(this.logDeviceState(`[PIN Response]: Response from PIN Entry: ${this.convertArrayToHexString(e)}`),e.length>2?{pinData:{...this.findOperationStatus(e[1]),pinKsn:this.convertArrayToHexString(e.slice(2,12)),encryptedPinBlock:this.convertArrayToHexString(e.slice(12,20))}}:this.findOperationStatus(e[1]))),_(this,"parseCardholderResponse",e=>{const t=Object.freeze({113:"Left function key",114:"Middle function key",116:"Right function key",120:"Enter key"});return e.length>2?{...this.findOperationStatus(e[1]),keyPressed:t[e[2]]||`${x} Key`}:this.findOperationStatus(e[1])}),_(this,"parseTipCashbackReport",e=>e.length>2?this.transactionCallback({tipCashbackReport:{...this.findOperationStatus(e[1]),reportMode:0===e[2]?"Tip":"Cashback",amount:e.slice(3,9),tax:e.slice(9,15),taxRate:e.slice(15,18),tipOrCashbackAmount:e.slice(18,24)}}):this.transactionCallback({tipCashbackReport:{...this.findOperationStatus(e[1])}})),this.operationStatus=Object.freeze({0:"Ok",1:"Cardholder Cancel",2:"Timeout",3:"Host Cancel",4:"Verify fail",5:"Keypad Security",6:"Calibration Done",7:"Write with duplicate RID and index",8:"Write with corrupted Key",9:"CA Public Key reached maximum capacity",10:"CA Public Key read with invalid RID or Index"}),this.ACKSTS=Object.freeze({0:"Ok",21:"RID error/Index not found",128:"Device Error: error, tamper, missing certificate or incorrect signature detected",129:"Device not idle",130:"Data Error or Bad Paramater(s)",131:"Length Error: data size is either too small, too large, incomplete, or OID of the cert doesn't match predefined OID",132:"PAN Exists",133:"Missing or Incorrect Key",134:"Device Busy",135:"Device Locked",136:"Auth required",137:"Bad Auth",138:"Device Not Available",139:"Amount Needed - If PIN amount is required, no amount has been set",140:"Battery is critically low",141:"Device is resetting",144:"Certificate does not exist",145:"Expired (Cert/CRL)",146:"Invalid (Cert/CRL/Message)",147:"Revoked (Cert/CRL)",148:"CRL does not exist",149:"Certificate exists",150:"Duplicate KSN/Key"}),this.pinCommandIds=Object.freeze({1:"responseACK",2:"clearSession",3:"swipe",4:"requestPinEntry",5:"cancelCommand",6:"requestCardholderSelection",7:"displayMessage",8:"requestDeviceStatus",9:"requestDeviceConfiguration",10:"requestMsrData",11:"getChallenge",7:"displayMessage",162:"emvTransactionStatus",171:"requestEmvData",26:"requestDeviceInfo",16:"sendBigBlockData",160:"requestTipOrCashback"}),this.cardTypesEnum=Object.freeze({0:"Other",1:"Financial",2:"AAMVA",3:"Manual",4:"Unknown",5:"ICC",6:"Contactless ICC - EMV",7:"Financial MSR + ICC",8:"Contactless ICC - MSD"}),this.deviceState=Object.freeze({0:"Idle",1:"Session",2:"Wait For Card",3:"Wait For PIN",4:"Wait For Selection",5:"Displaying Message",6:"Test (Reserved for future use)",7:"Manual Card Entry",9:"Wait Cardholder Entry",10:"Chip Card",11:"ICC Kernel Test",12:"EMV Transaction",13:"Show PAN",31:"Wait for Tip Selection"}),this.cardDataIds=Object.freeze({1:"track1",2:"track2",3:"track3",4:"encryptedTrack1",5:"encryptedTrack2",6:"encryptedTrack3",7:"magnePrint",64:"encryptedPanAndExp",65:"serialNumber",99:"ksnAndMagnePrintStatus",100:"CBC-MAC"}),this.cardholderStatusIds=Object.freeze({1:"Waiting for amount confirmation selection",2:"Amount confirmation selected",3:"Waiting for multi-payment ICC Application selection",4:"ICC Application selected",5:"Waiting for signature capture",6:"Signature captured",7:"Waiting for language selection",8:"Language selected",9:"Waiting for credit/debit selection",10:"Credit/Debit selected",11:"Waiting for Pin Entry for ICC",12:"PIN entered for ICC",13:"Waiting for Pin Entry for MSR",14:"PIN entered for MSR",15:"Waiting for tip selection",16:"Tip interaction selected"}),this.bufferTypes=Object.freeze({2:"Device Certificate",50:"Set BIN (MAC)",66:"CSR",161:"EMV data in TLV format, Tag Data (MAC)",162:"RESERVED",163:"RESERVED",164:"EMV data in TLV format, Authorization Request (ARQC)",165:"CA Public Key (MAC)",171:"EMV data in TLV format, Batch Data"}),this.cardDataObj={},this.arqcArriving=!1,this.batchDataArriving=!1,this.arqcTotalLen=0,this.batchTotalLen=0,this.convertStatusToString=Object.freeze({0:"Ok",1:"Empty",2:"Error",4:"Disabled"})}};function J(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var Y=class extends Q{constructor(e,t){super(e,t),J(this,"buildSwipeCommand",e=>{let{timeout:t,isFallback:i,toneChoice:a,displayType:s}=e;return[1,3,t||60,!0===i?4:void 0!==s?this.displayTypes[s.toLowerCase()]:2,void 0!==a?this.toneChoice[a.toLowerCase()]:1]}),J(this,"buildEmvCommand",e=>{let{timeout:t,pinTimeout:i,cardType:a,transactionType:s,cashBack:r,currencyCode:n,toneChoice:o,isQuickChip:c,authorizedAmount:h,emvOptions:d,taxAmount:l,taxPercent:u,tipAmount:m,balanceBeforeGenAC:p,balanceAfterGenAC:v,trxCategoryCode:g}=e;return new Promise((e,f)=>{this.isQuickChipTransaction=!1!==c;const C=this.validateAmount(f);let b=[1,162,t||60,i||20,0,void 0!==o?this.toneChoice[o.toLowerCase()]:1,a?this.cardTypes(a.toLowerCase()):this.cardTypes("all"),void 0!==d?this.emvOptions[d.toLowerCase()]:0];const D=C(h,"authorizedAmount",[0,0,0,0,1,0]);if(void 0===D)return f(D);b=b.concat(D),b=void 0!==s?b.concat(this.transactionTypes[s.toLowerCase()]):b.concat(0);const S=C(r,"cashBack",this.newArrayPartial(0,6));if(void 0===S)return f(S);b=b.concat(S);const y=C(p,"balanceBeforeGenAC",this.newArrayPartial(0,6));if(void 0===y)return f(y);b=b.concat(y);const T=C(v,"balanceAfterGenAC",this.newArrayPartial(0,6));if(void 0===T)return f(T);b=b.concat(T),b=n?b.concat(this.currencyCode[n.toLowerCase()]||this.currencyCode.default):b.concat(this.currencyCode.dollar),b.push(void 0!==g?g:0),b.push(this.isQuickChipTransaction?1:0),b.push(void 0!==m?1:void 0!==r?2:0);const w=C(l,"taxAmount",this.newArrayPartial(0,6));if(void 0===w)return f(w);b=b.concat(w),b=void 0!==u?"number"==typeof u?b.concat(this.convertNumToAmount(u,6)):b.concat(u):b.concat(this.newArrayPartial(0,3)),b=b.concat(this.newArrayPartial(0,3));const A=C(m,"tipAmount",this.newArrayPartial(0,6));return void 0===A?f(A):(b=b.concat(A),b=b.concat(this.newArrayPartial(0,9)),e(b))})}),J(this,"buildPinCommand",e=>{let{languageSelection:t,displayType:i,timeout:a,maxPinLength:s,minPinLength:r,toneChoice:n,waitMessage:o,verifyPin:c,pinBlockFormat:h}=e;const d=Object.freeze({enterpin:0,enterpinamount:1,reenterpinamount:2,reenterpin:3,verifypin:4});return[1,4,a||30,i&&d[i.toLowerCase()]||0,this.findPinLength(s,r),void 0!==n?this.toneChoice[n.toLowerCase()]:1,this.buildPinOptionsByte(t,o,c,h)]}),J(this,"buildArpcCommand",(e,t)=>new Promise((i,a)=>{this.sendBigBlockData(164,e,t).then(()=>i([1,164,...this.newArrayPartial(0,10)])).catch(e=>a(e))})),J(this,"buildTipOrCashbackCmd",e=>{let{timeout:t,commandType:i,toneChoice:a,transactionAmount:s,calculatedTaxAmount:r,taxRate:n,tipSelectionMode:o,leftButton:c,middleButton:h,rightButton:d}=e;return new Promise((e,l)=>{const u=this.validateAmount(l),m=[{prop:i,propName:"commandType",validTypes:["string"],condition:!0,validValues:["tip","cashback"]},{prop:o,propName:"tipSelectionMode",condition:i&&"cashback"!==i.toLowerCase(),validTypes:["string"],validValues:["percent","amount"]},{prop:n,propName:"taxRate",condition:!0,validTypes:["number","object"]}];this.validateRequiredInputs(m).then(()=>{let m=[1,160,void 0!==t?t:30,"tip"===i.toLowerCase()?0:1,"string"==typeof a?this.toneChoice[a.toLowerCase()]:this.toneChoice.onebeep];const p=u(s,"transactionAmount");if(void 0===p)return l(p);m=m.concat(p);const v=u(r,"calculatedTaxAmount");return void 0===v?l(v):(m=m.concat(v),m="number"==typeof n?m.concat(this.convertNumToAmount(n,6)):m.concat(n),m.push(void 0===o||"percent"===o?0:1),m.push(void 0!==c?this.buildN2Format(c):0),m.push(void 0!==h?this.buildN2Format(h):0),m.push(void 0!==d?this.buildN2Format(d):0),m=m.concat(this.newArrayPartial(0,25)),e(m))}).catch(e=>l(e))})}),J(this,"buildDisplayCmd",e=>{let{displayTime:t,messageId:i}=e;return new Promise((e,a)=>void 0===i?a(R("messageId")):e([1,7,void 0!==t?t:15,i]))}),this.toneChoice=Object.freeze({nosound:0,onebeep:1,twobeeps:2}),this.emvOptions=Object.freeze({normal:0,bypasspin:1,forceonline:2,acquirernotavailable:4})}};function X(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var Z=class extends Y{constructor(e,t){super(e,t),X(this,"getCardService",()=>new Promise((e,t)=>this.device?this.connectAndCache(2).then(e=>(this.logDeviceState(`[GATT]: Cache AppDataToHostLength Characteristic || ${new Date}`),e.getCharacteristic(this.deviceToHostLen))).then(e=>(this.logDeviceState(`[GATT]: Begin notifications on AppDataToHostLength Characteristic || ${new Date}`),e.startNotifications())).then(e=>(this.logDeviceState(`[GATT]: Add listener to notifications || ${new Date}`),e.removeEventListener("characteristicvaluechanged",this.dataWatcher),e.addEventListener("characteristicvaluechanged",this.dataWatcher),this.cardDataListener=e,this.logDeviceState(`[GATT]: Cache AppDataToHost Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceToHostData))).then(e=>(this.receiveDataChar=e,this.logDeviceState(`[GATT]: Cache AppDataFromHostLength Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceFromHostLen))).then(e=>(this.sendLenToDevice=e,this.logDeviceState(`[GATT]: Cache AppDataFromHost Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceFromHostData))).then(e=>(this.commandCharacteristic=e,window&&(window.removeEventListener("beforeunload",this.onDestroyHandler),window.addEventListener("beforeunload",this.onDestroyHandler)),this.logDeviceState(`[GATT]: Successfully cached all GATT services and characteristics. Returning successful pair to user || ${new Date}`),this.delayPromise(400))).then(()=>e({code:0,message:"Device Open"})).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(D)))),X(this,"dataWatcher",e=>{let t=e.target.value.getUint8(0);return this.logDeviceState(`[NOTIFY: AppDataToHostLength]: ${this.convertArrayToHexString([t])} || ${new Date}`),this.commandSent&&3===t?(this.commandRespAvailable=!0,void(this.commandSent=!1)):this.readCommandResp()}),X(this,"readCommandResp",()=>new Promise((e,t)=>this.receiveDataChar?this.receiveDataChar.readValue().then(e=>this.readValueHandler(e)).then(t=>e(t)).catch(i=>i.code===H.code&&i.message===H.message?(this.logDeviceState(`[INFO]: Read failed due to device being busy. Attempting read again || ${new Date}`),this.delayPromise(100).then(()=>e(this.readCommandResp()))):t(this.buildDeviceErr(i))):t(this.buildDeviceErr(A)))),X(this,"readValueHandler",e=>new Promise(t=>{const i=this.readByteArray(e);if(this.logDeviceState(`[READ: AppDataToHost]: ${this.convertArrayToHexString(i)} || ${new Date}`),i.length)switch(i[0]){case this.reportIds.responseAck:return t(this.parseAckResponse(i));case this.reportIds.deviceStateReport:return t(this.handleDeviceStateReport(i));case this.reportIds.cardStatusReport:return t(this.handleCardStatusReport(i));case this.reportIds.cardDataReport:return t(this.handleCardDataReport(i));case this.reportIds.emvCardholderStatus:return t(this.transactionStatusCallback(this.parseEmvCardholderInteractionStatus(i)));case this.reportIds.emvCompletion:return t(this.transactionStatusCallback(this.parseEmvCompletion(i)));case this.reportIds.bigBlockData:return t(this.handleBigBlockData(i));case this.reportIds.requestSn:return t(this.formatSerialNumber(i));case this.reportIds.deviceConfig:return t(this.parseDeviceConfiguration(i));case this.reportIds.pinResponse:return t(this.transactionCallback(this.parsePinResponse(pinResp)));case this.reportIds.selectionResponse:return t(this.parseCardholderResponse(i));case this.reportIds.displayResp:return t(this.transactionStatusCallback(this.findOperationStatus(i[1])));case this.reportIds.tipCashbackReport:return t(this.parseTipCashbackReport(i));case this.reportIds.delayedAck:const e=this.parseAckResponse(i);return this.transactionStatusCallback({delayedACK:e}),t(e);default:return this.logDeviceState(`[Data Resp]: There is no parser for this data, returning to caller: ${this.convertArrayToHexString(i)} || ${new Date}`),t(this.transactionCallback(i))}else t(i)})),X(this,"handleBigBlockData",e=>{switch(e[2]){case 0:this.handleBigBlockBegin(e);break;case 99:this.maxBlockId=Math.max(...Object.keys(this.rawData))+1,this.handleBigBlockFinish();break;default:this.rawData={...this.rawData,[e[2]]:e.slice(4)}}}),X(this,"handleCardStatusReport",e=>new Promise(t=>(this.transactionStatusCallback(this.parseCardStatusReport(e)),this.swipeHasBegun||this.transactionHasStarted?this.sendCommandWithResp(this.swipeHasBegun?[1,10,0]:[1,171,0]).then(e=>t(this.transactionStatusCallback(e))).catch(e=>this.sendErrToCallback(this.buildDeviceErr(e))):t()))),X(this,"handleDeviceStateReport",e=>{this.dataGathered&&(this.dataGathered=!1,this.transactionCallback({swipeData:this.cardDataObj})),this.transactionStatusCallback(this.parseDeviceStateReport(e))}),X(this,"handleCardDataReport",e=>{this.swipeHasBegun&&(this.swipeHasBegun=!1,this.dataGathered=!0),3!==e.length?this.parseCardData(e):(this.logDeviceState("[ERROR] Undocumented Card Data below"),this.logDeviceState(e))}),X(this,"requestCardSwipe",e=>new Promise((t,i)=>(this.swipeHasBegun=!0,this.cardDataObj={},this.logDeviceState(`[INFO]: MSR transaction begun || ${new Date}`),this.device.gatt.connected?this.sendCommandWithResp(this.clearSessionCmd).then(t=>(this.transactionStatusCallback(t),this.sendCommandWithResp(this.buildSwipeCommand(e||{})))).then(e=>t(e)).catch(e=>i(e)):i(this.buildDeviceErr(T))))),X(this,"startTransaction",e=>new Promise((t,i)=>(this.transactionHasStarted=!0,this.cardDataObj={},this.logDeviceState(`[INFO]: EMV transaction begun || ${new Date}`),this.device.gatt.connected?this.sendCommandWithResp(this.clearSessionCmd).then(t=>(this.transactionStatusCallback(t),this.buildEmvCommand(e||{}))).then(e=>this.sendCommandWithResp(e)).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(T))))),X(this,"requestPinEntry",e=>new Promise((t,i)=>(this.logDeviceState(`[PIN]: Request for PIN entry start || ${new Date}`),this.device.gatt.connected?this.sendCommandWithResp(this.buildPinCommand(e||{})).then(e=>t(e)).catch(e=>i(e)):i(this.buildDeviceErr(T))))),X(this,"sendBigBlockData",(e,t,i)=>new Promise((a,s)=>{let r=[1,16,e,0,255&t];if(t<60){r=r.concat(...this.newArrayPartial(0,60)),this.logDeviceState(`[Send Big Block Data Legacy]: ${this.convertArrayToHexString(r)}`);let n=[1,16,e,1,t,...i];return n.length<65&&(n=n.concat(...this.newArrayPartial(0,65-n.length))),this.sendPinCommand(r).then(()=>this.sendPinCommand(n)).then(()=>a()).catch(e=>s(this.buildDeviceErr(e)))}return r=r.concat([t>>8&255,t>>16&255,t>>24&255,1,...this.newArrayPartial(0,56)]),this.sendExtendedBigBlockData(e,t,i,r).then(()=>a())})),X(this,"sendExtendedBigBlockData",(e,t,i,a)=>new Promise((s,r)=>{const n=Math.ceil(t/60);let o=!1,c=[];this.logDeviceState(`[Send Big Block Data Extended]: ${this.convertArrayToHexString(a)} || ${new Date}`);const h=()=>new Promise((e,t)=>{if(o)return this.delayPromise(500).then(()=>e(h()));const i=c.shift();return i?(o=!0,i.queuedPromise().then(()=>i.resolve()).then(()=>(o=!1,e(h()))).catch(e=>(o=!1,t(i.reject(e))))):e(!0)}),d=e=>new Promise((t,i)=>{c.push({queuedPromise:e,resolve:t,reject:i})});d(()=>new Promise(e=>this.sendPinCommand(a).then(()=>e())));for(let t=0,a=1;a<=n;a++){let s=i.slice(t,t+60),r=[1,16,e,a,s.length,...s];65!==r.length&&(r=r.concat(...this.newArrayPartial(0,65-r.length))),d(()=>new Promise(e=>this.sendPinCommand(r).then(()=>e())))}return this.logDeviceState(`[Send Big Block Data Extended]: Executing queue of ${c.length} commands || ${new Date}`),h().then(e=>s(e)).catch(e=>r(e))})),X(this,"sendArpc",e=>new Promise((t,i)=>this.device.gatt.connected?this.sendArpcBase(e).then(e=>this.delayPromise(200,e)).then(e=>this.sendCommandWithResp(e)).then(e=>(this.logDeviceState(`[Send ARPC Result]: ${this.convertArrayToHexString(e)}`),t(e))).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(T)))),X(this,"requestTipOrCashback",e=>new Promise((t,i)=>this.device.gatt.connected?this.buildTipOrCashbackCmd(e||{}).then(e=>this.sendCommandWithResp(e)).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(T)))),X(this,"setDisplayMessage",e=>new Promise((t,i)=>this.device&&this.device.gatt.connected?this.buildDisplayCmd(e||{}).then(e=>this.sendCommandWithResp(e)).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(T)))),X(this,"sendPinCommand",e=>new Promise((t,i)=>(this.logDeviceState(`[AppFromHostLength]: ${this.convertArrayToHexString([e.length])} || ${new Date}`),this.sendLenToDevice?this.sendLenToDevice.writeValue(Uint8Array.of(e.length)).then(()=>(this.logDeviceState(`[AppFromHostData]: ${this.convertArrayToHexString(e)} || ${new Date}`),this.commandSent=!0,t(this.commandCharacteristic.writeValue(Uint8Array.from(e))))).catch(e=>(this.commandSent=!1,i(e))):i(this.buildDeviceErr(w))))),X(this,"sendCommandWithResp",e=>new Promise((t,i)=>this.sendPinCommand(e).then(()=>this.commandRespAvailable?Promise.resolve(!0):this.waitForDeviceResponse(16)).then(t=>t?this.readCommandResp():this.tryCommandAgain(e)).then(e=>(this.commandRespAvailable=!1,t(e))).catch(e=>(this.commandRespAvailable=!1,i(this.buildDeviceErr(e)))))),X(this,"tryCommandAgain",e=>new Promise((t,i)=>this.sendPinCommand(e).then(()=>this.waitForDeviceResponse(5)).then(e=>e?t(this.readCommandResp()):i(this.buildDeviceErr(k))))),X(this,"getDeviceInfo",()=>new Promise((e,t)=>this.device.gatt.connected?this.gatherDeviceInfo().then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(T)))),X(this,"gatherDeviceInfo",()=>new Promise((e,t)=>this.deviceSerialNumber?e({serialNumber:this.deviceSerialNumber,deviceName:this.device.name,deviceType:this.deviceType,isConnected:this.device.gatt.connected}):this.checkIfDeviceIdle().then(()=>this.getDeviceInfoProceed()).then(()=>e({serialNumber:this.deviceSerialNumber,deviceName:this.device.name,deviceType:this.deviceType,isConnected:this.device.gatt.connected})).catch(e=>t(e)))),X(this,"getDeviceInfoProceed",()=>new Promise((e,t)=>{this.sendPinCommand([0,26,5]).then(()=>this.deviceSerialNumber?Promise.resolve(!0):this.waitForSn(7)).then(i=>i?e():t(this.buildDeviceErr(k))).catch(e=>t(e))})),X(this,"checkIfDeviceIdle",()=>new Promise(e=>this.sendCommandWithResp([1,26,5]).then(t=>129===t.code?this.clearSession().then(()=>e(this.checkIfDeviceIdle())):(this.transactionStatusCallback(t),e())))),X(this,"waitForSn",e=>new Promise(t=>{const i=a=>a<e?this.deviceSerialNumber?t(!0):setTimeout(()=>i(a+1),200):t(!1);i(0)})),X(this,"cancelTransaction",()=>new Promise((e,t)=>this.commandCharacteristic?this.sendCommandWithResp([1,5,0]).then(t=>e(t)).catch(e=>t(e)):t(this.buildDeviceErr(y)))),X(this,"clearSession",()=>new Promise((e,t)=>(this.logDeviceState(`[ClearSession]: Request to clear session || ${new Date}`),this.sendLenToDevice?this.sendCommandWithResp(this.clearSessionCmd).then(t=>(this.transactionStatusCallback(t),this.logDeviceState(`[ClearSession]: Received clear session response || ${new Date}`),this.clearInternalState(),e(t))).catch(e=>t(this.buildDeviceErr(e))):e(L)))),X(this,"closePinDevice",()=>new Promise((e,t)=>this.cardDataListener?this.cardDataListener.stopNotifications().then(()=>(this.logDeviceState(`[Close Device]: GATT notifications stopped. Clearing JS cache || ${new Date}`),this.cardDataListener.removeEventListener("characteristicvaluechanged",this.dataWatcher),this.cardDataListener=null,this.clearGattCache(),e(this.disconnect()))).catch(e=>t(e)):this.disconnect().then(()=>(this.logDeviceState(`[Close Device]: Device Closed. Clearing JS cache || ${new Date}`),this.clearGattCache(),e())).catch(e=>t(e)))),X(this,"closeDevice",()=>new Promise((e,t)=>this.device.gatt.connected?this.clearSession().then(()=>this.closePinDevice()).then(()=>e(M)).catch(e=>(this.disconnect(),t(this.buildDeviceErr(e)))):e(M))),X(this,"clearInternalState",()=>{this.commandSent=!1,this.commandRespAvailable=!1,this.dataGathered=!1,this.isQuickChipTransaction=!0}),X(this,"clearGattCache",()=>{this.transactionHasStarted=!1,this.receiveDataChar=null,this.commandCharacteristic=null,this.sendLenToDevice=null,this.clearInternalState(),this.swipeHasBegun=!1,this.transactionHasStarted=!1}),this.transactionCallback=t.transactionCallback||t,this.transactionStatusCallback=t.transactionStatusCallback,this.deviceFromHostLen="0508e6f8-ad82-898f-f843-e3410cb60220",this.deviceFromHostData="0508e6f8-ad82-898f-f843-e3410cb60221",this.deviceToHostLen="0508e6f8-ad82-898f-f843-e3410cb60222",this.deviceToHostData="0508e6f8-ad82-898f-f843-e3410cb60223",this.cardDataListener=null,this.receiveDataChar=null,this.commandCharacteristic=null,this.sendLenToDevice=null,this.commandSent=!1,this.swipeHasBegun=!1,this.transactionHasStarted=!1,this.dataGathered=!1,this.isQuickChipTransaction=!0,this.deviceSerialNumber=null,this.displayTypes=Object.freeze({swipeidlealternate:0,swipecard:1,pleaseswipe:2,pleaseswipeagain:3,chiperroruseswipe:4}),this.reportIds=Object.freeze({responseAck:1,endSession:2,requestCardSwipe:3,cardStatusReport:34,deviceStateReport:32,cardDataReport:35,emvCardholderStatus:44,bigBlockData:41,emvCompletion:162,requestSn:26,deviceConfig:9,pinResponse:36,selectionResponse:37,displayResp:39,tipCashbackReport:48,delayedAck:42}),this.initialNotification=[0],this.clearSessionCmd=[1,2,0]}};var ee=class extends Z{constructor(e,t){super(e,t),this.deviceType=O}};var te=class extends Z{constructor(e,t){super(e,t),this.deviceType="dynaProGo"}};function ie(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var ae=class extends U{constructor(e,t){super(e,t),ie(this,"trackIndices",e=>Object.freeze({track1DecodeStatus:e,track2DecodeStatus:e+1,track3DecodeStatus:e+2,track1Len:e+3,track2Len:e+4,track3Len:e+5,cardEncodeType:e+6,track1Start:e+7,track1End:e+118,track2Start:e+119,track2End:e+230,track3Start:e+231,track3End:e+342,cardStatus:e+343,magnePrintStatusStart:e+344,magnePrintStatusEnd:e+347,magnePrintLen:e+348,magnePrintStart:e+349,magnePrintEnd:e+476,serialNumberStart:e+477,serialNumberEnd:e+492,deviceEncStatusStart:e+493,deviceEncStatusEnd:e+494,ksnStart:e+495,ksnEnd:e+504,track1MaskedLen:e+505,track2MaskedLen:e+506,track3MaskedLen:e+507,track1MaskedStart:e+508,track1MaskedEnd:e+619,track2MaskedStart:e+620,track2MaskedEnd:e+731,track3MaskedStart:e+732,track3MaskedEnd:e+843,encSessionIdStart:e+844,encSessionIdEnd:e+851,track1AbsLen:e+852,track2AbsLen:e+853,track3AbsLen:e+854,magnePrintAbsLen:e+855})),ie(this,"parseHidData",e=>{const t=this.trackIndices(this.offset);let i={};return this.dataNames.forEach(a=>{let s=e.slice(t[`${a}Start`],t[`${a}End`]+1);t.hasOwnProperty(`${a}Len`)&&(s=s.slice(0,e[t[`${a}Len`]])),i="track2Masked"===a?this.formatTrack2Masked(i,a,this.bufferToUtf8(s)):t.hasOwnProperty(`${a}DecodeStatus`)?this.formatTrackWithDecode(i,a,e[t[`${a}DecodeStatus`]],this.convertArrayToHexString(s)):"serialNumber"===a?this.formatSerialNumber(i,s):{...i,[a]:a.toLowerCase().includes("masked")?this.bufferToUtf8(s):this.convertArrayToHexString(s)}}),{swipeData:{...i}}}),ie(this,"formatSerialNumber",(e,t)=>({...e,serialNumber:this.bufferToUtf8(t.length>7?t.slice(0,7):t)})),ie(this,"formatTrack2Masked",(e,t,i)=>({...e,[t]:i,...this.formatExpPAN(i)})),ie(this,"formatTrackWithDecode",(e,t,i,a)=>({...e,[t]:a,[`${t}DecodeStatus`]:0===i?"Ok":"Error",[`${t}DecodeStatusCode`]:i})),this.dataNames=["track1","track2","track3","ksn","magnePrint","magnePrintStatus","serialNumber","encSessionId","track1Masked","track2Masked","track3Masked"],this.offset=3}};function se(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var re=class extends ae{constructor(e,t){super(e,t),se(this,"parseTransactionStatus",e=>{const t=this.readTwoByteLength([e[1],e[2]]);let i=e.slice(3);return i.length===t?this.parseNotifications(i):this.throwLenErr()}),se(this,"parseNotifications",e=>{const t=e.slice(6),i=this.readTwoByteLength([t[0],t[1]]),a=t.slice(2),s=a[0],r=a[2];return a.length===i?{transactionStatus:{statusCode:s,statusMsg:this.TrxStatusEnum[s]||"Status code message not documented",progressCode:r,progressMsg:this.TrxProgressIndicator[r]||"Progress code message not documented"}}:this.throwLenErr()}),this.TrxStatusEnum=Object.freeze({0:"Transaction Started and Idle",1:"Card is Inserted",2:"Error",3:"Transaction Progress Change",4:"Waiting for User Response",5:"Timed Out",6:"Transaction Complete",7:"Cancelled by Host",8:"Card Removed",9:"Contactless Token Detected, Powering Up Card",10:"MSR Swipe Detected"}),this.TrxProgressIndicator=Object.freeze({0:"No transaction in progress",1:"Waiting for cardholder to present payment",2:"Powering up the card",3:"Selecting the application",4:"Waiting for user language selection",5:"Waiting for user application selection",6:"Initiating application",7:"Reading application data",8:"Offline data authentication",9:"Process restrictions",10:"Cardholder verification",11:"Terminal risk management",12:"Terminal action analysis",13:"Generating first application cryptogram",14:"Card action analysis",15:"Online processing",16:"Waiting online processing response",17:"Transaction Complete",18:"Transaction Error",19:"Transaction Approved",20:"Transaction Declined",21:"Transaction Cancelled by MSR Swipe",22:"EMV error - Conditions Not Satisfied",23:"EMV error - Card Blocked",24:"Application selection failed",25:"EMV error - Card Not Accepted",26:"Empty Candidate List",27:"Application Blocked",41:"Contactless Remove Card",42:"Collision Detected",43:"Refer to Mobile Device Prompt",44:"Contactless Transaction Complete",45:"Request Switch to ICC/MSR - Kernel has refused contactless payment",46:"Wrong Card Type (MSD or EMV)",47:"No Application Interchange Profile (Tag 82) Received",49:"Magnetic stripe decoding error.",60:"Magnetic stripe decoding during Technical Fallback. Revert to MSR, powering up but not receiving an Answer to Reset from card.",61:"Magnetic stripe card decoded during MSR Fallback. Device reverted to MSR, but encountered fatal errors.",62:"Magnetic stripe card decoded during a No Fallback MSR read."})}};function ne(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var oe=class extends re{constructor(e,t){super(e,t),ne(this,"parseEmvData",(e,t)=>t?{arqcData:this.convertArrayToHexString(e.slice(11)),arqcDataParsed:this.tlvParser(e.slice(13),!0)}:{signatureRequired:128===e[11]?"CBC-MAC checked in ARQC online response":1===e[11],batchData:this.convertArrayToHexString(e.slice(11)),batchDataParsed:this.tlvParser(e.slice(14),!0)}),ne(this,"parseEmvCommandResponse",e=>{const t=e.slice(4,6);return parseInt(t.join(""))?{code:parseInt(this.convertArrayToHexString(t),16),name:"StartTransactionError",message:this.emvResultCodes[t[1]]||"Transaction Error Message not yet documented"}:{code:0,message:"Success, transaction has started"}}),ne(this,"parseUserSelectionRequest",e=>({userSelectionRequest:{selectionType:0===e[0]?"Application Selection":"Language Selection",timeRemaining:e[1],menuItems:this.convertArrayToHexString(e.slice(2))}})),this.emvResultCodes=Object.freeze({129:"Failure, DUKPT scheme is not loaded",130:"Failure, DUKPT scheme is loaded but all of its keys have been used",131:"Failure, DUKPT scheme is not loaded (Security Level not 3 or 4)",132:"Invalid Total Transaction Time Field",133:"Invalid Card Type Field",134:"Invalid Options Field",135:"Invalid Amount Authorized Field",136:"Invalid Transaction Type Field",137:"Invalid Cash Back Field",138:"Invalid Transaction Currency Code Field",142:"Invalid Reporting Option",143:"Transaction Already In Progress",145:"Invalid Device Serial Number",150:"Invalid System Date and Time"})}};function ce(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var he=class extends oe{constructor(e,t){super(e,t),ce(this,"amountHelper",(e,t,i)=>{switch(typeof e){case"number":return this.convertNumToAmount(e);case"object":return e;case"string":return this.hexToBytes(e);case"undefined":const a="string"==typeof t?t.toLowerCase():"";return"refund"===a||"cashback"===a||"contactlesscashback"===a?this.newArrayPartial(0,6):i;default:return i}}),ce(this,"buildEmvCommand",e=>{let{timeout:t,cardType:i,transactionType:a,cashBack:s,currencyCode:r,reportVerbosity:n,emvOptions:o,authorizedAmount:c}=e,h=[...this.emvCommandBase,t||60,i?this.cardTypes(i.toLowerCase()):3,void 0!==o?this.emvOptions[o.toLowerCase()]:128];return h=h.concat(this.amountHelper(c,a,[0,0,0,0,1,0])),h=a?h.concat(this.transactionTypes[a.toLowerCase()]||0):h.concat(0),h=h.concat(this.amountHelper(s,a,this.newArrayPartial(0,6))),h=r?h.concat(this.currencyCode[r.toLowerCase()]||this.currencyCode.default):h.concat([8,64]),h.push(n?this.statusVerbosity[n.toLowerCase()]||0:1),h}),ce(this,"buildArpcCommand",(e,t)=>[73,e+6,0,0,3,3,e>>8&255,255&e,...t]),ce(this,"buildDateTimeCommand",e=>{let t=[73,34,0,0,3,12,0,28];t=t.concat(this.newArrayPartial(0,17));const i=e instanceof Date?e:new Date;return t.push(this.castDecToHex(i.getMonth()+1)),t.push(this.castDecToHex(i.getDate())),t.push(this.castDecToHex(i.getHours())),t.push(this.castDecToHex(i.getMinutes())),t.push(this.castDecToHex(i.getSeconds())),t.push(0),t.push(this.castDecToHex(i.getFullYear()-2008)),t=t.concat(this.newArrayPartial(0,4)),t}),this.emvOptions=Object.freeze({normal:0,bypasspin:1,forceonline:2,quickchip:128,pinbypassquickchip:129,forceonlinequickchip:130}),this.statusVerbosity=Object.freeze({minimum:0,medium:1,verbose:2}),this.emvCommandBase=[73,25,0,0,3,0,0,19]}};function de(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var le=class extends he{constructor(e,t){super(e,t),de(this,"getCardServiceBase",e=>new Promise((t,i)=>this.device?this.connectAndCache(e).then(e=>e.getCharacteristic(this.cardDataNotification)).then(e=>(this.logDeviceState(`[GATT NOTIFICATIONS]: Request to cache characteristics, start notifications, and attach listeners. || ${new Date}`),e.startNotifications())).then(e=>(e.removeEventListener("characteristicvaluechanged",this.cardDataHandler),e.addEventListener("characteristicvaluechanged",this.cardDataHandler),this.cardDataListener=e,this.cardService.getCharacteristic(this.commandCharId))).then(e=>(this.commandCharacteristic=e,window&&(window.removeEventListener("beforeunload",this.onDestroyHandler),window.addEventListener("beforeunload",this.onDestroyHandler)),this.cardService.getCharacteristic(this.dataReadyId))).then(e=>e.startNotifications()).then(e=>(e.removeEventListener("characteristicvaluechanged",this.dataReadyHandler),e.addEventListener("characteristicvaluechanged",this.dataReadyHandler),this.dataReadyCharacteristic=e,this.cardService.getCharacteristic(this.dataReadStatusId))).then(e=>(this.dataReadStatusCharacteristic=e,this.logDeviceState(`[GATT NOTIFICATIONS]: Success! Cached characteristics, started notifications, and attached listeners. || ${new Date}`),t({code:0,message:"Device Open"}))).catch(e=>i(e)):i(this.buildDeviceErr(D)))),de(this,"dataReadyHandler",e=>{let t=e.target.value,i=this.readByteArray(t);this.logDeviceState(`[Data Ready Listener]: ${this.convertArrayToHexString(i)}`),this.commandSent&&(this.commandRespAvailable=!0,this.commandSent=!1)}),de(this,"cardDataHandler",e=>{let t=e.target.value;if(255!==t.getUint8(0)){let e=this.readByteArray(t);this.rawData={...this.rawData,[e[0]]:e.slice(1)}}else{if(this.maxBlockId=t.getUint8(1),this.checkNotificationLength()){if(this.initialNotification=this.rleFormats[this.rawData[0][0]]?this.decodeRLE(this.rawData[0]):this.rawData[0],0===this.initialNotification[0]||1===this.initialNotification[0])return this.returnToUser(this.transactionCallback)(this.parseHidData(this.buildInitialDataArray(!0)));{const e=this.convertArrayToHexString([this.initialNotification[7],this.initialNotification[8]]);return this.findNotificationType(e)}}this.sendErrToCallback(this.throwLenErr())}}),de(this,"findNotificationType",e=>{let t=this.buildInitialDataArray(!0);switch(e){case"0300":return this.logDeviceState("==Transaction Status=="),this.returnToUser(this.transactionStatusCallback)(this.parseTransactionStatus(t));case"0301":return this.logDeviceState("==Display Message Request=="),this.returnToUser(this.displayCallback)({displayMessage:this.bufferToUtf8(t.slice(11))});case"0302":return this.logDeviceState("==User Selection Request=="),this.logDeviceState(this.convertArrayToHexString(t)),this.returnToUser(this.userSelectionCallback)(this.parseUserSelectionRequest(buildNotification));case"0303":return this.logDeviceState("==ARQC Message=="),this.returnToUser(this.transactionCallback)(this.parseEmvData(t,!0));case"0304":return this.logDeviceState("==Batch Data Message=="),this.returnToUser(this.transactionCallback)(this.parseEmvData(t,!1));default:this.logDeviceState(`Undocumented Notification ID: ${e}`,t),this.logDeviceState(this.convertArrayToHexString(t))}}),de(this,"startTransaction",e=>new Promise((t,i)=>this.device.gatt.connected?this.sendCommandWithResp(this.buildEmvCommand(e||{})).then(a=>{const s=this.parseEmvCommandResponse(a);return 0===s.code?t(s):918!==s.code?i(this.buildDeviceErr(s)):this.setDeviceDateTime().then(()=>this.delayPromise(500)).then(()=>t(this.startTransaction(e)))}).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(T)))),de(this,"readCommandValue",()=>new Promise(e=>this.commandCharacteristic.readValue().then(t=>e(this.readByteArray(t))))),de(this,"checkNotificationLength",()=>Math.max(...Object.keys(this.rawData))===this.maxBlockId-1),de(this,"sendCommandWithResp",e=>new Promise((t,i)=>this.commandCharacteristic?(this.logDeviceState(`Sending command: ${this.convertArrayToHexString(e)}`),this.commandSent=!0,this.commandCharacteristic.writeValue(Uint8Array.from(e)).then(()=>this.commandRespAvailable?Promise.resolve(!0):this.waitForDeviceResponse(15)).then(e=>(this.commandRespAvailable=!1,e?this.readCommandValue():i(this.buildDeviceErr(k)))).then(e=>t(e)).catch(e=>i(this.buildDeviceErr(e)))):i(this.buildDeviceErr(y)))),de(this,"returnToUser",e=>t=>(this.initialNotification=null,this.maxBlockId=null,this.rawData={},e(t))),de(this,"setDeviceDateTime",e=>new Promise((t,i)=>this.device.gatt.connected?this.sendCommandWithResp(this.buildDateTimeCommand(e)).then(e=>t({dateTimeResult:this.resultCodes[this.convertArrayToHexString(e.slice(4,6))]||`${x} result code`})).catch(e=>i(this.buildDeviceErr(e))):i(T))),de(this,"readBatteryLevel",()=>new Promise(e=>this.sendCommandWithResp([69,0]).then(t=>e(t[2])))),de(this,"getDeviceSn",()=>new Promise(e=>this.sendCommandWithResp([0,1,3]).then(e=>this.bufferToUtf8(e.slice(2))).then(t=>e(t)))),de(this,"gatherDeviceInfo",()=>new Promise((e,t)=>{let i,a;this.readBatteryLevel().then(e=>(i=e,this.getDeviceSn())).then(t=>(a=t.substring(0,7),e([i,a]))).catch(e=>t(e))})),de(this,"getDeviceInfo",()=>new Promise((e,t)=>this.device.gatt.connected?this.gatherDeviceInfo().then(t=>e({deviceName:this.device.name,deviceType:this.deviceType,batteryLevel:t[0],serialNumber:t[1],isConnected:this.device.gatt.connected})).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(T)))),de(this,"sendUserSelection",e=>new Promise((t,i)=>this.device.gatt.connected?this.sendCommandWithResp([73,8,0,0,3,2,0,2,0,e]).then(e=>(this.logDeviceState(`[User Selection Resp]: ${this.convertArrayToHexString(e)}`),t({userSelectionResponse:this.resultCodes[this.convertArrayToHexString(e.slice(4,6))]||"Unknown or undocumented result code"}))).catch(e=>i(this.buildDeviceErr(e))):i(this.buildDeviceErr(T)))),de(this,"sendArpc",e=>new Promise((t,i)=>this.sendArpcBase(e).then(e=>this.sendCommandWithResp(e)).then(e=>{this.logDeviceState(`[Send ARPC Resp]: ${this.convertArrayToHexString(e)}`);const i=e.length>5?this.convertArrayToHexString(e.slice(4,6)):"";return t({sendArpcResponse:this.resultCodes[i]||"Unknown or undocumented result code"})}).catch(e=>i(this.buildDeviceErr(e))))),de(this,"clearGattCache",()=>{window&&window.removeEventListener("beforeunload",this.onDestroyHandler),this.maxBlockId=null,this.initialNotification=null,this.rawData={},this.dataReadStatusCharacteristic=null,this.dataReadyCharacteristic=null,this.commandCharacteristic=null,this.cardDataListener=null}),de(this,"ceaseNotifications",()=>new Promise(e=>this.cardDataListener?this.cardDataListener.stopNotifications().then(()=>(this.cardDataListener.removeEventListener("characteristicvaluechanged",this.cardDataHandler),this.dataReadStatusCharacteristic.stopNotifications())).then(()=>(this.dataReadyCharacteristic.removeEventListener("characteristicvaluechanged",this.dataReadyHandler),e())):e())),de(this,"cancelTransaction",()=>new Promise((e,t)=>this.commandCharacteristic?this.sendCommandWithResp(this.cancelEmvCommand).then(t=>e({cancelResponse:this.resultCodes[this.convertArrayToHexString(t.slice(4,6))]||`${x} result code`})).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(y)))),de(this,"closeDevice",()=>new Promise((e,t)=>this.device.gatt.connected?this.ceaseNotifications().then(()=>(this.clearGattCache(),this.disconnect())).then(()=>e({code:0,message:"Device Closed"})).catch(e=>t(this.buildDeviceErr(e))):e({code:0,message:"Device Closed"}))),de(this,"clearSession",()=>new Promise((e,t)=>this.device&&this.device.gatt.connected?e("SCRA devices do not carry a session"):t(this.buildDeviceErr(T)))),this.transactionCallback=t.transactionCallback||t,this.displayCallback=t.displayCallback,this.transactionStatusCallback=t.transactionStatusCallback,this.userSelectionCallback=t.userSelectionCallback,this.maxBlockId=null,this.initialNotification=null,this.rawData={},this.dataReadStatusCharacteristic=null,this.dataReadyCharacteristic=null,this.commandCharacteristic=null,this.cardDataListener=null,this.cardDataNotification="0508e6f8-ad82-898f-f843-e3410cb60201",this.commandCharId="0508e6f8-ad82-898f-f843-e3410cb60200",this.dataReadyId="0508e6f8-ad82-898f-f843-e3410cb60202",this.dataReadStatusId="0508e6f8-ad82-898f-f843-e3410cb60203",this.resultCodes=Object.freeze({"0000":"Success","038B":"Invalid Selection Status","038C":"Invalid Selection Result","038D":"Failure, no transaction currently in progress","038F":"Failure, transaction already in progress","0390":"Device has no keys","0391":"Invalid device serial number","0392":"Invalid type of MAC field","0396":"Invalid date/time data","0397":"Invalid MAC"}),this.cancelEmvCommand=Uint8Array.of(73,6,0,0,3,4,0,0)}};function ue(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var me=class extends le{constructor(e,t){super(e,t),ue(this,"getCardService",()=>new Promise((e,t)=>this.getCardServiceBase(1).then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))))),ue(this,"requestCardSwipe",()=>new Promise((e,t)=>this.device.gatt.connected?e({code:0,message:"Success, listening for swipe"}):t(this.buildDeviceErr(T)))),this.deviceType="eDynamo"}};function pe(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var ve=class extends le{constructor(e,t){super(e,t),pe(this,"getCardService",()=>new Promise((e,t)=>this.getCardServiceBase().then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))))),pe(this,"requestCardSwipe",()=>new Promise((e,t)=>this.device.gatt.connected?this.sendCommandWithResp(this.setHeadAlwaysOn).then(i=>0===parseInt(i)?e({code:0,message:"Success, listening for swipe"}):t(this.buildDeviceErr(E))).catch(e=>t(e)):t(this.buildDeviceErr(T)))),this.setHeadAlwaysOn=[88,1,1],this.deviceType="tDynamo"}};const ge=e=>()=>Promise.resolve(`${e?"SCRA":"PinPad"} devices do not use this command`);class fe{constructor(e){let{getCardService:t,startTransaction:i,cancelTransaction:a,sendCommandWithResp:s,clearSession:r,closeDevice:n,getDeviceInfo:o,requestCardSwipe:c,isDeviceConnected:h,disconnect:d,requestPinEntry:l,setDisplayMessage:u,sendUserSelection:m,sendArpc:p,setDeviceDateTime:v,requestTipOrCashback:g}=e;this.openDevice=t,this.startTransaction=i,this.cancelTransaction=a,this.sendCommand=s,this.clearSession=r,this.closeDevice=n,this.deviceInfo=o,this.requestCardSwipe=c,this.isDeviceOpen=h,this.forceDisconnect=d,this.requestPinEntry=l||ge(!0),this.setDisplayMessage=u||ge(!0),this.sendUserSelection=m||ge(),this.sendArpcResponse=p||(()=>Promise.resolve("Feature Pending Completion")),this.setDeviceDateTime=v||ge(),this.requestTipOrCashback=g||ge(!0)}}const Ce={eDynamo:(e,t)=>new me(e,t),tDynamo:(e,t)=>new ve(e,t),dynaProGo:(e,t)=>new te(e,t),[O]:(e,t)=>new ee(e,t)},be=(e,t,i)=>({id:e.id,name:e.name,deviceType:i,deviceInterface:new fe(Ce[i](e,t))}),De=new RegExp(/^eDynamo-/),Se=new RegExp(/^tDynamo-/),ye=new RegExp(/^DPMini/),Te=new RegExp(/^DPG/),we=(e,t)=>{if(t){const e=(e=>{const t=["dynaProGo",O,"eDynamo","tDynamo"];let i="";for(let a=0;a<t.length;a++)if(e.toLowerCase()===t[a].toLowerCase()){i=t[a];break}return i})(t);if(e)return e}return i=e,Se.test(i)?"tDynamo":De.test(i)?"eDynamo":Te.test(i)?"dynaProGo":ye.test(i)?O:"";var i},Ae=(e,t,i)=>new Promise((a,n)=>{if("object"==typeof e&&void 0===e.transactionCallback)return n("When providing multiple callbacks in an object, 'transactionCallback' must be provided");e=(e=>{const t="function"==typeof(e=e||(e=>{console.warn("Callback not provided to 'scanForDevices' function. Please provide at least one callback function to this method"),console.log("transactionCallback data: ",e)})),i=i=>e[i]?e[i]:t?e:e.transactionCallback;return e.errorCallback=e.errorCallback||(e=>console.error("[MagensaBluetooth Internal Error]: ",e)),e.transactionStatusCallback=e.transactionStatusCallback||i("transactionStatusCallback"),e.userSelectionCallback=e.userSelectionCallback||i("userSelectionCallback"),e.displayCallback=e.displayCallback||i("displayCallback"),e.disconnectHandler=e.disconnectHandler||i("transactionCallback"),e})(e);const o=t?(e=>({filters:[{namePrefix:e}],optionalServices:["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101","0508e6f8-ad82-898f-f843-e3410cb60202","device_information"],keepRepeatedDevices:!1,acceptAllAdvertisements:!1}))(t):r;return navigator.bluetooth.requestDevice(o).then(t=>{const s=we(t.name,i);return s?a(be(t,e,s)):(r=t,new Promise((e,t)=>{let i;return r.gatt.connect().then(e=>e.getPrimaryService("device_information")).then(e=>e.getCharacteristic("model_number_string")).then(e=>e.readValue()).then(e=>(i=new TextDecoder("utf-8").decode(e).trim(),Promise.resolve(r.gatt.disconnect()))).then(()=>e(i)).catch(i=>i.code===C.errorCode&&i.name===C.errorName&&i.message.includes("0000180a-0000-1000-8000-00805f9b34fb")?r.gatt.connected?Promise.resolve(r.gatt.disconnect()).then(()=>e("dynaProGo")):e("dynaProGo"):t(i))})).then(i=>i?a(be(t,e,i)):n("Selected device is not supported")).catch(e=>n(e));var r}).catch(e=>n("object"==typeof e?new s(e):"Selected device is not supported"))})}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvZXJyb3JIYW5kbGVyL2FwaUVycm9yLmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL2NvbmZpZ3VyYXRpb25zL2luZGV4LmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL3BhcnNlcnMvc3dpcGVQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvcGFyc2Vycy9lbXZQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvZXJyb3JIYW5kbGVyL2xlbmd0aEVycm9yLmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL2Vycm9ySGFuZGxlci9kZXZpY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy9lcnJvckhhbmRsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvZXJyb3JIYW5kbGVyL2VyckNvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvZGV2aWNlcy9iYXNlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvdXRpbHMvcGluVmFsaWRhdGlvbi5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy91dGlscy9waW5VdGlscy5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy9wYXJzZXJzL3BpbkNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvcGFyc2Vycy9waW5TdGF0dXNQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvY29tbWFuZEJ1aWxkZXJzL3BpbkNtZEJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvZGV2aWNlcy9waW5QYWQuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvZGV2aWNlcy9keW5hUHJvTWluaS5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy9kZXZpY2VzL2R5bmFQcm9Hby5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy9wYXJzZXJzL3NjcmFTd2lwZVBhcnNlci5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy9wYXJzZXJzL3RyeFN0YXR1c1BhcnNlci5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy9wYXJzZXJzL3NjcmFFbXZQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvY29tbWFuZEJ1aWxkZXJzL3NjcmFDbWRCdWlsZGVyLmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL2RldmljZXMvc2NyYS5qcyIsIndlYnBhY2s6Ly9tYWdlbnNhLWJsdWV0b290aC8uL3NyYy9kZXZpY2VzL2VEeW5hbW8uanMiLCJ3ZWJwYWNrOi8vbWFnZW5zYS1ibHVldG9vdGgvLi9zcmMvZGV2aWNlcy90RHluYW1vLmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL3V0aWxzL2luc3RhbmNpYXRlRGV2aWNlLmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL3V0aWxzL2lkZW50aWZ5RGV2aWNlLmpzIiwid2VicGFjazovL21hZ2Vuc2EtYmx1ZXRvb3RoLy4vc3JjL2RldmljZUVudHJ5LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJBcGlFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiY29kZSIsInN1cGVyIiwidGhpcyIsImFsbERldmljZUNvbmZpZyIsImZpbHRlcnMiLCJzZXJ2aWNlcyIsIm9wdGlvbmFsU2VydmljZXMiLCJrZWVwUmVwZWF0ZWREZXZpY2VzIiwiYWNjZXB0QWxsQWR2ZXJ0aXNlbWVudHMiLCJVdGlsaXRpZXMiLCJsb2dJbmZvIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImRldGFpbCIsImFycmF5IiwiQXJyYXkiLCJmcm9tIiwiYnl0ZSIsInRvU3RyaW5nIiwic2xpY2UiLCJqb2luIiwidG9VcHBlckNhc2UiLCJ0d29CeXRlcyIsImFycmF5QnVmZmVyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJVaW50OEFycmF5IiwibnVtIiwicGFyc2VJbnQiLCJyZXBldGl0aW9ucyIsImZpbGwiLCJkYXRhVmlldyIsInZhbHVlQXJyYXkiLCJieXRlTGVuZ3RoIiwicHVzaCIsImdldFVpbnQ4IiwiaGV4U3RyaW5nIiwiYXNjaWlSZXNwIiwibGVuZ3RoIiwic3Vic3RyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic3Vic3RyaW5nIiwidHJpbSIsImhleFN0ciIsImJ5dGVzIiwiY3VycmVudCIsImFycmF5U2VnbWVudCIsImluaXRpYWxMZW5ndGgiLCJyZXR1cm5TZWdtZW50IiwibmV4dEluZGV4IiwibmV3QXJyYXlQYXJ0aWFsIiwiY2hlY2tGb3JSbGUiLCJyZXR1cm5BcnJheSIsIk1hdGgiLCJtaW4iLCJrZXlzIiwicmF3RGF0YSIsIm1heEJsb2NrSWQiLCJjb25jYXQiLCJjaGVja1JsZSIsInJsZUZvcm1hdHMiLCJpbml0aWFsTm90aWZpY2F0aW9uIiwiZGVjb2RlUkxFIiwiY3VycmVuY3lTdHJpbmciLCJjdXJyZW5jeSIsInRvTG93ZXJDYXNlIiwib3B0aW9uYWxMZW4iLCJzdHJpbmdOdW0iLCJyZXR1cm5BcnIiLCJkZWxheSIsInBhc3NlZFZhbHVlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiYnl0ZUFycmF5IiwiY29udmVydEFycmF5VG9IZXhTdHJpbmciLCJmcmVlemUiLCIwIiwiU3dpcGVQYXJzZXIiLCJzdHJpbmdEYXRhIiwiYnVmZmVyVG9VdGY4IiwiaW5kZXhPZiIsImZvcm1hdHRlZFN0cmluZyIsInNwbGl0RXhwUEFOIiwibWFza2VkUEFOIiwiTGFzdDQiLCJleHBpcmF0aW9uRGF0ZSIsInNlcnZpY2VDb2RlIiwiZXhwUEFOIiwicmVwbGFjZSIsInNwbGl0IiwiZXhwIiwiZm9ybWF0dGVkRXhwIiwiRW12UGFyc2VyIiwiZGF0YSIsImlzTXNyIiwiZGF0YUxlbmd0aCIsImlUYWciLCJieXRlVmFsdWUiLCJsZW5ndGhWYWx1ZSIsInJlc3VsdCIsImlUTFYiLCJiVGFnIiwidGFnQnl0ZXMiLCJUYWdCdWZmZXIiLCJiTW9yZVRhZ0J5dGVzIiwibW9yZVRhZ0J5dGVzRmxhZzEiLCJtb3JlVGFnQnl0ZXNGbGFnMiIsIm1vcmVMZW5ndGhGbGFnIiwibkxlbmd0aEJ5dGVzIiwib25lQnl0ZUxlbmd0aE1hc2siLCJpTGVuIiwidGFnQnl0ZSIsImxlbiIsInZhbHVlQnl0ZXMiLCJoZXhPckFzY2lpRm9ybWF0dGVyIiwiY29uc3RydWN0ZWRGbGFnIiwidHJ4U3RhdHVzVG9TdHJpbmciLCJoZXhUb0FzY2lpIiwiTGVuZ3RoRXJyb3IiLCJEZXZpY2VFcnJvciIsIkVycm9ySGFuZGxlciIsImNhbGxiYWNrcyIsImVyciIsIkRPTUV4Y2VwdGlvbiIsImVycm9yQ2FsbGJhY2siLCJub3RGb3VuZE9iaiIsImVycm9yQ29kZSIsImVycm9yTmFtZSIsImFwaU5ldHdvcmtFcnIiLCJkZXZpY2VOb3RGb3VuZCIsImdhdHRTZXJ2ZXJOb3RDb25uZWN0ZWQiLCJjb21tYW5kTm90U2VudCIsImRldmljZU5vdE9wZW4iLCJjb21tYW5kTm90U2VudEZyb21Ib3N0IiwicmVhZEZhaWxlZCIsInJlc3BvbnNlTm90UmVjZWl2ZWQiLCJnZXRTZXJ2aWNlRmFpbCIsImNvbW1hbmROb3RBY2NlcHRlZCIsIm1pc3NpbmdSZXF1aXJlZEZpZWxkcyIsImZpZWxkTmFtZSIsIndyb25nSW5wdXRUeXBlcyIsImFjY2VwdGFibGVUeXBlcyIsInByb3BlcnR5TmFtZSIsIndyb25nSW5wdXRWYWx1ZXMiLCJhY2NlcHRhYmxlVmFscyIsImRwTWluaSIsImNvbmZpZ1N0ciIsInVua25vd25VbmRvYyIsIm5vU2Vzc2lvblRvQ2xlYXIiLCJnYXR0QnVzeSIsInN1Y2Nlc3NmdWxDbG9zZSIsImNhcmRUeXBlQWxsIiwiY2FyZFR5cGVzT2JqIiwiRGV2aWNlQmFzZSIsImRldmljZSIsImNhcmRUeXBlU3RyIiwiZGV2aWNlVHlwZSIsInJlamVjdCIsImxvZ0RldmljZVN0YXRlIiwiRGF0ZSIsImdhdHQiLCJjb25uZWN0IiwidGhlbiIsInNlcnZlciIsImdhdHRTZXJ2ZXIiLCJidWlsZERldmljZUVyciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3QiLCJzZXJ2aWNlSW5kZXgiLCJmaW5kUHJpbWFyeVNlcnZpY2UiLCJzZXJ2aWNlIiwiY2F0Y2giLCJnZXRQcmltYXJ5U2VydmljZSIsImRldmljZVVVSURzIiwiY2FyZFNlcnZpY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzY29ubmVjdEhhbmRsZXIiLCJvcHRpb25hbEluZGV4IiwidHJ5VG9Db25uZWN0IiwidHJ5Q291bnQiLCJpbm5lclJlc29sdmUiLCJpbm5lclJlamVjdCIsImNhY2hlQ2FyZFNlcnZpY2VCYXNlIiwiY2FjaGVTZXJ2aWNlUmVzcCIsImNsZWFyR2F0dENhY2hlIiwiYXJwY1Jlc3AiLCJkYXRhTGVuIiwiaW5wdXREYXRhIiwiaGV4VG9CeXRlcyIsImJ1aWxkQXJwY0NvbW1hbmQiLCJtYXhUcmllcyIsIndhaXRGb3JSZXNwb25zZSIsInRyeU51bWJlciIsImNvbW1hbmRSZXNwQXZhaWxhYmxlIiwiZXZlbnQiLCJkaXNjb25uZWN0Q2FsbGJhY2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY3VycmVuY3lDb2RlIiwidHJhbnNhY3Rpb25UeXBlcyIsIlBpblZhbGlkYXRpb24iLCJjYWxsQmFja3MiLCJwYXJlbnRSZWplY3QiLCJhbW91bnQiLCJwcm9wTmFtZSIsImRlZmF1bHRWYWwiLCJjb252ZXJ0TnVtVG9BbW91bnQiLCJ2YWxpZGF0aW9uQ29uZmlnIiwicHJvcCIsInZhbGlkVHlwZXMiLCJ2YWxpZFZhbHVlcyIsImNvbmRpdGlvbiIsInR5cGVJc1ZhbGlkIiwiaW5keCIsInZhbHNBcmVWYWxpZCIsImluZGV4IiwiUGluVXRpbHMiLCJiaW5hcnlOdW0iLCJudWxsVGVybWluYXRlZEFycmF5IiwidGFyZ2V0SW5kZXgiLCJtYXhMZW4iLCJtaW5MZW4iLCJtYXhMZW5ndGgiLCJtaW5MZW5ndGgiLCJsYW5ndWFnZVNlbGVjdGlvbiIsIndhaXRNZXNzYWdlIiwidmVyaWZ5UGluIiwicGluQmxvY2tGb3JtYXQiLCJsYW5ndWFnZVByb21wdHMiLCJiaW5hcnlSZXN1bHQiLCJkaXNhYmxlZCIsImhleE51bSIsIlBhcnNlUGluQ29uZmlnIiwiY29uZmlnQXJyIiwiZmlyc3REZXZpY2VDb250cm9sQnl0ZSIsImRlY2ltYWxUb0JpbmFyeSIsInNlY29uZERldmljZUNvbnRyb2xCeXRlIiwibWFza0NvbmZpZ3VyYXRpb25CeXRlIiwibXNyQ29uZmlndXJhdGlvbkJ5dGUiLCJtYXNrQ2hhcmFjdGVyIiwiZmluZE1hc2tDaGFyYWN0ZXIiLCJsZWFkaW5nVW5tYXNrZWRMZW5ndGgiLCJ0cmFpbGluZ1VubWFza2VkTGVuZ3RoIiwiZW12TDJJY3NDb25maWciLCJlbXZMMkNvbmZpZ09wdGlvbnMiLCJjb250YWN0bGVzc0NvbmZpZyIsImNvbnRhY3RsZXNzQnl0ZSIsImNvbnRhY3RsZXNzU3VwcG9ydCIsImVuYWJsZWRCcmFuZHMiLCJjb250YWN0bGVzc0d1aUNvbnRyb2xzIiwibnVtQ2hhciIsIm51bUNoYXJUb0hleCIsIm51bUNoYXJUb0FzY2lpIiwiZGV2aWNlQ29udHJvbEJ5dGUiLCJyZXF1aXJlTXV0dWFsQXV0aCIsInN0cmluZ051bVRvQm9vbCIsIm1zckVuY3J5cHRpb25WYXJpYW50IiwiaXNDbGVhclRleHRFbmFibGVkIiwiaXNCZWVwZXJNb2RlRW5hYmxlZCIsImlzQml0bWFwTG9ja2VkIiwiaXNDb25maWd1cmF0aW9uTG9ja2VkIiwiZGV2aWNlQ3RybEJ5dGUiLCJpc0FycGNNYWNFbmFibGVkIiwiaXNGaW5hbmNpYWxJY2NDYXJkVHlwZVJlcG9ydGluZ0VuYWJsZWQiLCJhcnFjQmF0Y2hEYXRhT3V0cHV0Rm9ybWF0IiwibWFza0NvbmZpZ0J5dGUiLCJpc0lzb01hc2tFbmFibGVkIiwiaXNDaGVja0RpZ2l0RW5hYmxlZCIsImlzTXMyUG9pbnQwRW5hYmxlZCIsIm1zckNvbmZpZ0J5dGUiLCJpc0FBTVZBY2FyZEVuYWJsZWQiLCJ0cmFjazNEYXRhIiwidHJhY2tEYXRhT3B0aW9ucyIsInRyYWNrMkRhdGEiLCJ0cmFjazFEYXRhIiwiUGluU3RhdHVzUGFyc2VyIiwiY2FyZEhvbGRlclN0YXR1c0J5dGUiLCJlbXZDYXJkaG9sZGVyU3RhdHVzIiwiY2FyZGhvbGRlclN0YXR1c0lkcyIsInN0YXR1c0lkIiwib3BlcmF0aW9uU3RhdHVzIiwiZGlzcGxheVN0YXR1cyIsImZpbmRPcGVyYXRpb25TdGF0dXMiLCJjb21tYW5kUmVzcCIsImVtdkNvbXBsZXRpb25SZXNwb25zZSIsImRldmljZVNlcmlhbE51bWJlciIsImZpbmROdWxsVGVybWluYXRlZFN0cmluZyIsImJpZ0Jsb2NrRGF0YSIsImFycWNBcnJpdmluZyIsImFycWNUb3RhbExlbiIsInJlYWRUd29CeXRlTGVuZ3RoIiwiYmF0Y2hEYXRhQXJyaXZpbmciLCJiYXRjaFRvdGFsTGVuIiwidHJhbnNhY3Rpb25TdGF0dXNDYWxsYmFjayIsImJ1ZmZlclR5cGUiLCJidWZmZXJUeXBlcyIsImFycWMiLCJidWlsZEluaXRpYWxEYXRhQXJyYXkiLCJkYXRhRm9yQXJxYyIsImNhcmREYXRhT2JqIiwiYXJxY0RhdGEiLCJhcnFjRGF0YVBhcnNlZCIsInRsdlBhcnNlciIsImlzUXVpY2tDaGlwVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbkNhbGxiYWNrIiwiYmF0Y2giLCJkYXRhRm9yQmF0Y2giLCJ0cmFuc2FjdGlvbkhhc1N0YXJ0ZWQiLCJwYXJzZWRCYXRjaERhdGEiLCJpc1NpZ25hdHVyZVJlcXVpcmVkIiwiZmluZCIsInRhZyIsImJhdGNoRGF0YSIsImJhdGNoRGF0YVBhcnNlZCIsInNpZ25hdHVyZVJlcXVpcmVkIiwiaGFuZGxlQXJxY0JpZ0Jsb2NrRmluaXNoIiwiaGFuZGxlQmF0Y2hCaWdCbG9ja0ZpbmlzaCIsImNhcmRob2xkZXJSZXNwIiwiZmluZEVtdkNhcmRob2xkZXJTdGF0dXMiLCJpc0Ftb3VudENvbmZpcm1lZCIsImFwcGxpY2F0aW9uT3JMYWJlbE5hbWUiLCJtZXRob2RTZWxlY3RlZCIsInRsdkRhdGEiLCJwYXJzZWRUbHZEYXRhIiwidW5kb2N1bWVudGVkRGF0YSIsImNhcmRTdGF0dXMiLCJjYXJkVHlwZSIsImNhcmRUeXBlc0VudW0iLCJhY2tSZXNwIiwiQUNLU1RTIiwiY29tbWFuZFR5cGUiLCJwaW5Db21tYW5kSWRzIiwiZGV2aWNlUmVzcCIsImRldmljZVN0YXRlIiwic2Vzc2lvblN0YXRlIiwicGFyc2VTZXNzaW9uU3RhdGUiLCJkZXZpY2VTdGF0dXMiLCJwYXJzZURldmljZVN0YXR1cyIsImRldmljZUNlcnRTdGF0dXMiLCJwYXJzZUNlcnRTdGF0dXMiLCJoYXJkd2FyZVN0YXR1cyIsInBhcnNlSGFyZHdhcmVTdGF0dXMiLCJhZGRpdGlvbmFsSW5mbyIsInBhcnNlQWRkaXRpb25hbEluZm8iLCJiaW5hcnlTdHJpbmciLCJwb3dlckRpZENoYW5nZSIsImNhcmREYXRhSXNBdmFpbGFibGUiLCJwYW5QYXJzZWRGcm9tQ2FyZCIsImV4dGVybmFsUGFuU2VudCIsImFtb3VudFdhc1NlbnQiLCJtc3JDcmxDZXJ0RXhpc3RzIiwicGluQ3JsQ2VydEV4aXN0cyIsIm1mZ1VuYmluZENlcnRFeGlzdHMiLCJtc3JDYUNlcnRFeGlzdHMiLCJwaW5DYUNlcnRFeGlzdHMiLCJkZXZpY2VDYUNlcnRFeGlzdHMiLCJkZXZpY2VDZXJ0RXhpc3RzIiwicGluT3JNc3IiLCJwaW5LZXlTdGF0dXMiLCJrZXlTdGF0dXNFbnVtIiwibXNyS2V5U3RhdHVzIiwidGFtcGVyRGV0ZWN0ZWQiLCJpc0F1dGhlbnRpY2F0ZWQiLCJkZXZpY2VFcnJvckRldGVjdGVkIiwiSUUzX29ubHkiLCJTUkVEIiwiTWFnSGVhZElzUHJvZ3JhbW1lZCIsInRhbXBlclNlbnNvcnNBcmVBY3RpdmUiLCJJQ0NfQWNxdWlyZXJNYXN0ZXJLZXlJc0luamVjdGVkIiwiSUNDX1Nlc3Npb25LZXlJc0FjdGl2ZSIsIkNBUEtfRW12RGF0YWJhc2VJc0NvcnJ1cHRlZCIsIkVtdlRlcm1pbmFsRGF0YWJhc2VJc0NvcnJ1cHRlZCIsImNhcmRJc1ByZXNlbnRJbkNoaXBDYXJkQ29ubmVjdG9yIiwicGFydGlhbE5vdGlmaWNhdGlvbiIsInRyYWNrS2V5IiwiY2FyZERhdGFJZHMiLCJmb3JtYXRFeHBQQU4iLCJrc24iLCJtYWduZVByaW50U3RhdHVzIiwiY29udmVydFN0YXR1c1RvU3RyaW5nIiwicGluUmVzcCIsInBpbkRhdGEiLCJwaW5Lc24iLCJlbmNyeXB0ZWRQaW5CbG9jayIsInNlbGVjdGlvblJlc3AiLCJkZXZpY2VLZXlzIiwia2V5UHJlc3NlZCIsInJlcG9ydCIsInRpcENhc2hiYWNrUmVwb3J0IiwicmVwb3J0TW9kZSIsInRheCIsInRheFJhdGUiLCJ0aXBPckNhc2hiYWNrQW1vdW50IiwiUGluQ21kQnVpbGRlciIsInRpbWVvdXQiLCJpc0ZhbGxiYWNrIiwidG9uZUNob2ljZSIsImRpc3BsYXlUeXBlIiwiZGlzcGxheVR5cGVzIiwicGluVGltZW91dCIsInRyYW5zYWN0aW9uVHlwZSIsImNhc2hCYWNrIiwiaXNRdWlja0NoaXAiLCJhdXRob3JpemVkQW1vdW50IiwiZW12T3B0aW9ucyIsInRheEFtb3VudCIsInRheFBlcmNlbnQiLCJ0aXBBbW91bnQiLCJiYWxhbmNlQmVmb3JlR2VuQUMiLCJiYWxhbmNlQWZ0ZXJHZW5BQyIsInRyeENhdGVnb3J5Q29kZSIsInZhbGlkYXRvciIsInZhbGlkYXRlQW1vdW50IiwiY29tbWFuZCIsImNhcmRUeXBlcyIsImF1dGhBbW91bnQiLCJjYXNoYmFja0FtbnQiLCJiYWxhbmNlQmVmb3JlQW1udCIsImJhbGFuY2VBZnRlckFtbnQiLCJkb2xsYXIiLCJ0YXhBbW50IiwidGlwQW1udCIsIm1heFBpbkxlbmd0aCIsIm1pblBpbkxlbmd0aCIsInBpbkRpc3BsYXlPcHRpb25zIiwiZmluZFBpbkxlbmd0aCIsImJ1aWxkUGluT3B0aW9uc0J5dGUiLCJzZW5kQmlnQmxvY2tEYXRhIiwidHJhbnNhY3Rpb25BbW91bnQiLCJjYWxjdWxhdGVkVGF4QW1vdW50IiwidGlwU2VsZWN0aW9uTW9kZSIsImxlZnRCdXR0b24iLCJtaWRkbGVCdXR0b24iLCJyaWdodEJ1dHRvbiIsInByb3BzVG9WYWxpZGF0ZSIsInZhbGlkYXRlUmVxdWlyZWRJbnB1dHMiLCJ0aXBDYXNoYmFja0NtZCIsIm9uZWJlZXAiLCJ0cnhBbW50IiwiY2FsY1RheEFtbnQiLCJidWlsZE4yRm9ybWF0IiwiZGlzcGxheVRpbWUiLCJtZXNzYWdlSWQiLCJQaW5QYWQiLCJwYXJlbnRSZXNvbHZlIiwiY29ubmVjdEFuZENhY2hlIiwiZ2V0Q2hhcmFjdGVyaXN0aWMiLCJkZXZpY2VUb0hvc3RMZW4iLCJjaGFyYWN0ZXJpc3RpYyIsInN0YXJ0Tm90aWZpY2F0aW9ucyIsImRhdGFXYXRjaGVyIiwiY2FyZERhdGFMaXN0ZW5lciIsImRldmljZVRvSG9zdERhdGEiLCJyZWNlaXZlRGF0YUNoYXIiLCJkZXZpY2VGcm9tSG9zdExlbiIsInNlbmRMZW5Ub0RldmljZSIsImRldmljZUZyb21Ib3N0RGF0YSIsImNvbW1hbmRDaGFyYWN0ZXJpc3RpYyIsIm9uRGVzdHJveUhhbmRsZXIiLCJkZWxheVByb21pc2UiLCJkYXRhRXZlbnQiLCJ0YXJnZXQiLCJjb21tYW5kU2VudCIsInJlYWRDb21tYW5kUmVzcCIsInJlYWRWYWx1ZSIsInJlYWRWYWx1ZUhhbmRsZXIiLCJyZWFkQnl0ZUFycmF5IiwicmVwb3J0SWRzIiwicmVzcG9uc2VBY2siLCJwYXJzZUFja1Jlc3BvbnNlIiwiZGV2aWNlU3RhdGVSZXBvcnQiLCJoYW5kbGVEZXZpY2VTdGF0ZVJlcG9ydCIsImNhcmRTdGF0dXNSZXBvcnQiLCJoYW5kbGVDYXJkU3RhdHVzUmVwb3J0IiwiY2FyZERhdGFSZXBvcnQiLCJoYW5kbGVDYXJkRGF0YVJlcG9ydCIsInBhcnNlRW12Q2FyZGhvbGRlckludGVyYWN0aW9uU3RhdHVzIiwiZW12Q29tcGxldGlvbiIsInBhcnNlRW12Q29tcGxldGlvbiIsImhhbmRsZUJpZ0Jsb2NrRGF0YSIsInJlcXVlc3RTbiIsImZvcm1hdFNlcmlhbE51bWJlciIsImRldmljZUNvbmZpZyIsInBhcnNlRGV2aWNlQ29uZmlndXJhdGlvbiIsInBpblJlc3BvbnNlIiwicGFyc2VQaW5SZXNwb25zZSIsInNlbGVjdGlvblJlc3BvbnNlIiwicGFyc2VDYXJkaG9sZGVyUmVzcG9uc2UiLCJkaXNwbGF5UmVzcCIsInBhcnNlVGlwQ2FzaGJhY2tSZXBvcnQiLCJkZWxheWVkQWNrIiwiZGVsYXllZEFDSyIsImhhbmRsZUJpZ0Jsb2NrQmVnaW4iLCJtYXgiLCJoYW5kbGVCaWdCbG9ja0ZpbmlzaCIsInBhcnNlQ2FyZFN0YXR1c1JlcG9ydCIsInN3aXBlSGFzQmVndW4iLCJzZW5kQ29tbWFuZFdpdGhSZXNwIiwic2VuZEVyclRvQ2FsbGJhY2siLCJkYXRhR2F0aGVyZWQiLCJzd2lwZURhdGEiLCJwYXJzZURldmljZVN0YXRlUmVwb3J0IiwicGFyc2VDYXJkRGF0YSIsInN3aXBlT3B0aW9ucyIsImNsZWFyU2Vzc2lvbkNtZCIsImJ1aWxkU3dpcGVDb21tYW5kIiwicmVzcCIsImJ1aWxkRW12Q29tbWFuZCIsImVtdkNvbW1tYW5kIiwicGluT3B0aW9ucyIsImJ1aWxkUGluQ29tbWFuZCIsImRhdGFUeXBlIiwiYmxvY2taZXJvIiwibGVnYWN5RGF0YSIsInNlbmRQaW5Db21tYW5kIiwic2VuZEV4dGVuZGVkQmlnQmxvY2tEYXRhIiwibnVtYmVyT2ZCbG9ja3MiLCJjZWlsIiwid29ya2luZ09uUHJvbWlzZSIsImNvbW1hbmRCbG9ja3MiLCJiZWdpblF1ZXVlIiwiYmVnaW5RdWV1ZVJlc29sdmUiLCJiZWdpblF1ZXVlUmVqZWN0IiwiZGF0YUJsb2NrIiwic2hpZnQiLCJxdWV1ZWRQcm9taXNlIiwiZW5xdWV1ZSIsImJsb2NrIiwiZGF0YUZvckJsb2NrIiwiYmxvY2tDbWQiLCJiZWdpblF1ZVJlc3AiLCJzZW5kQXJwY0Jhc2UiLCJhcnBjQ21kIiwiY21kIiwidGlwQ2FzaGJhY2tPcHRpb25zIiwiYnVpbGRUaXBPckNhc2hiYWNrQ21kIiwiZGlzcGxheU9wdGlvbnMiLCJidWlsZERpc3BsYXlDbWQiLCJ3cml0ZUNvbW1hbmQiLCJ3cml0ZVZhbHVlIiwib2YiLCJ3YWl0Rm9yRGV2aWNlUmVzcG9uc2UiLCJ3YWl0UmVzcCIsInRyeUNvbW1hbmRBZ2FpbiIsInJlc3BvbnNlIiwiZ2F0aGVyRGV2aWNlSW5mbyIsImRldmljZUluZm8iLCJzZXJpYWxOdW1iZXIiLCJkZXZpY2VOYW1lIiwiaXNDb25uZWN0ZWQiLCJjaGVja0lmRGV2aWNlSWRsZSIsImdldERldmljZUluZm9Qcm9jZWVkIiwid2FpdEZvclNuIiwiY2xlYXJTZXNzaW9uIiwiY2xlYXJJbnRlcm5hbFN0YXRlIiwic3RvcE5vdGlmaWNhdGlvbnMiLCJjbG9zZVBpbkRldmljZSIsImVuZFNlc3Npb24iLCJyZXF1ZXN0Q2FyZFN3aXBlIiwiRHBNaW5pIiwiRHluYVByb0dvIiwiU2NyYVN3aXBlUGFyc2VyIiwib2Zmc2V0IiwidHJhY2sxRGVjb2RlU3RhdHVzIiwidHJhY2syRGVjb2RlU3RhdHVzIiwidHJhY2szRGVjb2RlU3RhdHVzIiwidHJhY2sxTGVuIiwidHJhY2syTGVuIiwidHJhY2szTGVuIiwiY2FyZEVuY29kZVR5cGUiLCJ0cmFjazFTdGFydCIsInRyYWNrMUVuZCIsInRyYWNrMlN0YXJ0IiwidHJhY2syRW5kIiwidHJhY2szU3RhcnQiLCJ0cmFjazNFbmQiLCJtYWduZVByaW50U3RhdHVzU3RhcnQiLCJtYWduZVByaW50U3RhdHVzRW5kIiwibWFnbmVQcmludExlbiIsIm1hZ25lUHJpbnRTdGFydCIsIm1hZ25lUHJpbnRFbmQiLCJzZXJpYWxOdW1iZXJTdGFydCIsInNlcmlhbE51bWJlckVuZCIsImRldmljZUVuY1N0YXR1c1N0YXJ0IiwiZGV2aWNlRW5jU3RhdHVzRW5kIiwia3NuU3RhcnQiLCJrc25FbmQiLCJ0cmFjazFNYXNrZWRMZW4iLCJ0cmFjazJNYXNrZWRMZW4iLCJ0cmFjazNNYXNrZWRMZW4iLCJ0cmFjazFNYXNrZWRTdGFydCIsInRyYWNrMU1hc2tlZEVuZCIsInRyYWNrMk1hc2tlZFN0YXJ0IiwidHJhY2syTWFza2VkRW5kIiwidHJhY2szTWFza2VkU3RhcnQiLCJ0cmFjazNNYXNrZWRFbmQiLCJlbmNTZXNzaW9uSWRTdGFydCIsImVuY1Nlc3Npb25JZEVuZCIsInRyYWNrMUFic0xlbiIsInRyYWNrMkFic0xlbiIsInRyYWNrM0Fic0xlbiIsIm1hZ25lUHJpbnRBYnNMZW4iLCJ0cmFja1Bvc2l0aW9ucyIsInRyYWNrSW5kaWNlcyIsInRyYWNrSW5mbyIsImRhdGFOYW1lcyIsImZvckVhY2giLCJkYXRhUHJvcCIsInRyYWNrRGF0YSIsImZvcm1hdFRyYWNrMk1hc2tlZCIsImZvcm1hdFRyYWNrV2l0aERlY29kZSIsImluY2x1ZGVzIiwidHJhY2syTWFza2VkIiwiZGVjb2RlU3RhdHVzVmFsdWUiLCJ0cmFja1ZhbHVlIiwiVHJ4U3RhdHVzUGFyc2VyIiwibm90aWZpY2F0aW9uIiwibmV3Tm90aWZpY2F0aW9uIiwicGFyc2VOb3RpZmljYXRpb25zIiwidGhyb3dMZW5FcnIiLCJub3RpZmljYXRpb25TbGljZSIsIm5ld05vdGlmaWNhdGlvblNsaWNlIiwibm90aWZpY2F0aW9uTGVuZ3RoIiwibm90aWZpY2F0aW9uQ29udGVudCIsInRyeFN0YXR1c0NvZGUiLCJ0cnhQcm9ncmVzc0NvZGUiLCJ0cmFuc2FjdGlvblN0YXR1cyIsInN0YXR1c0NvZGUiLCJzdGF0dXNNc2ciLCJUcnhTdGF0dXNFbnVtIiwicHJvZ3Jlc3NDb2RlIiwicHJvZ3Jlc3NNc2ciLCJUcnhQcm9ncmVzc0luZGljYXRvciIsIlNjcmFFbXZQYXJzZXIiLCJlbXZEYXRhIiwiaXNBcnFjIiwicmVzdWx0Q29kZSIsImVtdlJlc3VsdENvZGVzIiwic2VsZWN0aW9uUmVxdWVzdCIsInVzZXJTZWxlY3Rpb25SZXF1ZXN0Iiwic2VsZWN0aW9uVHlwZSIsInRpbWVSZW1haW5pbmciLCJtZW51SXRlbXMiLCJkdWtwdEZhaWx1cmVCYXNlIiwiaW52YWxpZEJhc2UiLCJTY3JhQ21kQnVpbGRlciIsInRyeFR5cGUiLCJkZWZhdWx0VmFsdWUiLCJ0cnhUeXBlTG93ZXIiLCJyZXBvcnRWZXJib3NpdHkiLCJlbXZDb21tYW5kQmFzZSIsImFtb3VudEhlbHBlciIsInN0YXR1c1ZlcmJvc2l0eSIsInNwZWNpZmljVGltZSIsImRhdGVUaW1lQ29tbWFuZCIsImNhc3REZWNUb0hleCIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRGdWxsWWVhciIsIlNjcmEiLCJjYXJkRGF0YU5vdGlmaWNhdGlvbiIsImNhcmREYXRhSGFuZGxlciIsImNvbW1hbmRDaGFySWQiLCJkYXRhUmVhZHlJZCIsImRhdGFSZWFkeUhhbmRsZXIiLCJkYXRhUmVhZHlDaGFyYWN0ZXJpc3RpYyIsImRhdGFSZWFkU3RhdHVzSWQiLCJkYXRhUmVhZFN0YXR1c0NoYXJhY3RlcmlzdGljIiwiZXZlbnRWYWx1ZSIsImZvcm1hdHRlZEV2ZW50VmFsdWUiLCJub3RpZmljYXRpb25BcnJheSIsImNoZWNrTm90aWZpY2F0aW9uTGVuZ3RoIiwicmV0dXJuVG9Vc2VyIiwicGFyc2VIaWREYXRhIiwibm90aWZpY2F0aW9uSWQiLCJmaW5kTm90aWZpY2F0aW9uVHlwZSIsImJ1aWx0Tm90aWZpY2F0aW9uIiwicGFyc2VUcmFuc2FjdGlvblN0YXR1cyIsImRpc3BsYXlDYWxsYmFjayIsImRpc3BsYXlNZXNzYWdlIiwidXNlclNlbGVjdGlvbkNhbGxiYWNrIiwicGFyc2VVc2VyU2VsZWN0aW9uUmVxdWVzdCIsImJ1aWxkTm90aWZpY2F0aW9uIiwicGFyc2VFbXZEYXRhIiwicGFyc2VFbXZDb21tYW5kUmVzcG9uc2UiLCJzZXREZXZpY2VEYXRlVGltZSIsInN0YXJ0VHJhbnNhY3Rpb24iLCJyZWFkQ29tbWFuZFZhbHVlIiwic3BlY2lmaWVkQ2FsbGJhY2siLCJyZXR1cm5PYmoiLCJidWlsZERhdGVUaW1lQ29tbWFuZCIsImRhdGVUaW1lUmVzdWx0IiwicmVzdWx0Q29kZXMiLCJmb3JtYXR0ZWRWYWx1ZSIsImJhdHRlcnkiLCJzZXJpYWxOdW0iLCJyZWFkQmF0dGVyeUxldmVsIiwicmVzcEJhdHRlcnkiLCJnZXREZXZpY2VTbiIsInJlc3BTbiIsImJhdHRlcnlMZXZlbCIsInNlbGVjdGlvblJlc3VsdCIsInVzZXJTZWxlY3Rpb25SZXNwb25zZSIsInNlbmRBcnBjUmVzcG9uc2UiLCJjYW5jZWxFbXZDb21tYW5kIiwiY2FuY2VsUmVzcG9uc2UiLCJjZWFzZU5vdGlmaWNhdGlvbnMiLCJFRHluYW1vIiwiZ2V0Q2FyZFNlcnZpY2VCYXNlIiwiVER5bmFtbyIsInNldEhlYWRBbHdheXNPbiIsInNldEhlYWRPcGVuUmVzcCIsImNvbW1hbmROb3RVc2VkIiwiaXNTY3JhIiwiRGV2aWNlSW50ZXJmYWNlIiwiZ2V0Q2FyZFNlcnZpY2UiLCJjYW5jZWxUcmFuc2FjdGlvbiIsImNsb3NlRGV2aWNlIiwiZ2V0RGV2aWNlSW5mbyIsImlzRGV2aWNlQ29ubmVjdGVkIiwicmVxdWVzdFBpbkVudHJ5Iiwic2V0RGlzcGxheU1lc3NhZ2UiLCJzZW5kVXNlclNlbGVjdGlvbiIsInNlbmRBcnBjIiwicmVxdWVzdFRpcE9yQ2FzaGJhY2siLCJvcGVuRGV2aWNlIiwic2VuZENvbW1hbmQiLCJpc0RldmljZU9wZW4iLCJmb3JjZURpc2Nvbm5lY3QiLCJuZXdEZXZpY2VJbnN0YW5jZSIsIkR5blByb0dvIiwiYnVpbGREZXZpY2VPYmplY3QiLCJkZXZpY2VUeXBlU3RyaW5nIiwiaWQiLCJkZXZpY2VJbnRlcmZhY2UiLCJlRHluYW1vUGF0dGVybiIsIlJlZ0V4cCIsInREeW5hbW9QYXR0ZXJuIiwiZHBNaW5pUGF0dGVybiIsImRwR29QYXR0ZXJuIiwiZmluZERldmljZVR5cGVTdHJpbmciLCJuYW1lU3RyIiwidHlwZVN0ciIsImZvcm1hdHRlZFN0ciIsImRldmljZVR5cGVTdHIiLCJkZXZpY2VUeXBlQXJyIiwicmV0dXJuU3RyIiwiZm9ybWF0VHlwZVN0cmluZyIsInRlc3QiLCJzY2FuRm9yRGV2aWNlcyIsImlzRnVuY1R5cGUiLCJkYXRhT2JqIiwiY29uc29sZSIsIndhcm4iLCJsb2ciLCJwcm9wQXNzaWdubWVudCIsImVyck9iaiIsImVycm9yIiwiYXJyYW5nZUNhbGxiYWNrcyIsIm9wdGlvbnMiLCJuYW1lUHJlZml4IiwiZmluZERldmljZUJ5RGV2aWNlTmFtZSIsIm5hdmlnYXRvciIsImJsdWV0b290aCIsInJlcXVlc3REZXZpY2UiLCJkZXZpY2VUeXBlTmFtZSIsInNlbGVj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RUFBSTlILFFBQVFzbUIsU0FBUyx3Q0FDbkI4SixFQUFlaG1CLEtBQUtNLFVBQ3BCaEcsUUFBUUMsUUFBU3lyQixFQUFlaG1CLEtBQUtPLGNBQWVMLEtBQUssSUFBTTNGLEVsQnREM0QsY2tCcUQ2QkEsRWxCckQ3Qixha0J1RFJzRixFQUFPbkMsT0NoQitCd0MsS0FDNUI0akIsR0FBc0JBLEVBRWhCdnBCLEVBQVNzcEIsR0FBa0Jua0IsRUFBUThDLEVBQVdzaEIsSUFEaERqa0IsRUFBTyxxQ0FFYmMsTUFBTWpELEdBQU9tQyxFQUFPbkMsSURMQ3NvQixRQ001QnJsQixNQUFNakQsR0FDTG1DLEVBRDRCLGlCQUFSbkMsRUFDWixJQUFJakksRUFBU2lJLEdBQ2QiLCJmaWxlIjoibWFnZW5zYS1ibHVldG9vdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJtYWdlbnNhLWJsdWV0b290aFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJtYWdlbnNhLWJsdWV0b290aFwiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiY2xhc3MgQXBpRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UsIGNvZGUsIG5hbWUgfSkge1xyXG4gICAgICAgIHN1cGVyKCAobWVzc2FnZSB8fCBcIldlYiBCbHVldG9vdGggQVBJIHRocmV3IGFuIHVua25vd24sIG9yIHVuZG9jdW1lbnRlZCBlcnJvclwiICkpO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IChjb2RlIHx8IDEwMDApO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IChuYW1lIHx8IFwiV2ViQmx1ZXRvb3RoRXJyb3JcIilcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBpRXJyb3I7IiwiY29uc3QgYWxsRGV2aWNlQ29uZmlnID0ge1xyXG4gICAgZmlsdGVyczogW1xyXG4gICAgICAgIHsgc2VydmljZXM6IFtcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwNFwiXSB9LFxyXG4gICAgICAgIHsgc2VydmljZXM6IFtcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwMVwiXSB9LCBcclxuICAgICAgICB7IHNlcnZpY2VzOiBbXCIwNTA4ZTZmOC1hZDgyLTg5OGYtZjg0My1lMzQxMGNiNjAxMDNcIl0gfVxyXG4gICAgXSxcclxuICAgIG9wdGlvbmFsU2VydmljZXM6IFtcclxuICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwNFwiLCBcclxuICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwM1wiLCBcclxuICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwMVwiLCBcclxuICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDIwMlwiLFxyXG4gICAgICAgICdkZXZpY2VfaW5mb3JtYXRpb24nXHJcbiAgICBdLFxyXG4gICAga2VlcFJlcGVhdGVkRGV2aWNlczogZmFsc2UsXHJcbiAgICBhY2NlcHRBbGxBZHZlcnRpc2VtZW50czogZmFsc2VcclxufVxyXG5cclxuY29uc3QgZmluZERldmljZUJ5RGV2aWNlTmFtZSA9IGRldmljZU5hbWUgPT4gKHtcclxuICAgIGZpbHRlcnM6IFtcclxuICAgICAgICB7IG5hbWVQcmVmaXg6IGRldmljZU5hbWUgfVxyXG4gICAgXSxcclxuICAgIG9wdGlvbmFsU2VydmljZXM6IFtcclxuICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwNFwiLCBcclxuICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwM1wiLCBcclxuICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwMVwiLFxyXG4gICAgICAgIFwiMDUwOGU2ZjgtYWQ4Mi04OThmLWY4NDMtZTM0MTBjYjYwMjAyXCIsXHJcbiAgICAgICAgJ2RldmljZV9pbmZvcm1hdGlvbidcclxuICAgIF0sXHJcbiAgICBrZWVwUmVwZWF0ZWREZXZpY2VzOiBmYWxzZSxcclxuICAgIGFjY2VwdEFsbEFkdmVydGlzZW1lbnRzOiBmYWxzZVxyXG59KTtcclxuXHJcblxyXG5leHBvcnQge1xyXG4gICAgYWxsRGV2aWNlQ29uZmlnLFxyXG4gICAgZmluZERldmljZUJ5RGV2aWNlTmFtZVxyXG59IiwiY2xhc3MgVXRpbGl0aWVzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICB0aGlzLnJsZUZvcm1hdHMgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgMHgwMDogZmFsc2UsICAgIC8vTm9ybWFsXHJcbiAgICAgICAgICAgIDB4MDE6IHRydWUsICAgICAvL1JMRSBmb3JtYXRcclxuICAgICAgICAgICAgMHgwMjogZmFsc2UsICAgIC8vTm90aWZ5IFVuY29tcHJlc3NlZFxyXG4gICAgICAgICAgICAweDAzOiB0cnVlICAgICAgLy9Ob3RpZnkgUkxFIGZvcm1hdFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICB9O1xyXG5cclxuICAgICBsb2dEZXZpY2VTdGF0ZSA9IGxvZ0luZm8gPT4gd2luZG93LmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiZGV2aWNlTG9nXCIsIHsgXHJcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXHJcbiAgICAgICAgICAgIGRldGFpbDogbG9nSW5mbyBcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICBjb252ZXJ0QXJyYXlUb0hleFN0cmluZyA9IGFycmF5ID0+XHJcbiAgICAgICAgQXJyYXkuZnJvbShhcnJheSwgYnl0ZSA9PlxyXG4gICAgICAgICAgICAoJzAnICsgKGJ5dGUgJiAweEZGKS50b1N0cmluZygxNikpLnNsaWNlKC0yKVxyXG4gICAgICAgICkuam9pbignJykudG9VcHBlckNhc2UoKVxyXG4gICAgXHJcbiAgICByZWFkVHdvQnl0ZUxlbmd0aCA9IHR3b0J5dGVzID0+ICh0d29CeXRlc1swXSA8PCA4KSB8IHR3b0J5dGVzWzFdO1xyXG5cclxuICAgIGJ1ZmZlclRvVXRmOCA9IGFycmF5QnVmZmVyID0+XHJcbiAgICAgICAgbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpLmRlY29kZShVaW50OEFycmF5LmZyb20oYXJyYXlCdWZmZXIpKTtcclxuXHJcbiAgICBjYXN0RGVjVG9IZXggPSBudW0gPT4gcGFyc2VJbnQoIG51bS50b1N0cmluZygxNiksIDE2KTtcclxuXHJcbiAgICBuZXdBcnJheVBhcnRpYWwgPSAobnVtLCByZXBldGl0aW9ucykgPT4gbmV3IEFycmF5KHJlcGV0aXRpb25zKS5maWxsKG51bSk7XHJcblxyXG4gICAgcmVhZEJ5dGVBcnJheSA9IGRhdGFWaWV3ID0+IHtcclxuICAgICAgICBsZXQgdmFsdWVBcnJheSA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YVZpZXcuYnl0ZUxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhbHVlQXJyYXkucHVzaChkYXRhVmlldy5nZXRVaW50OChpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWVBcnJheTtcclxuICAgIH1cclxuXHJcbiAgICBoZXhUb0FzY2lpID0gaGV4U3RyaW5nID0+IHtcclxuICAgICAgICBsZXQgYXNjaWlSZXNwID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IChpIDwgaGV4U3RyaW5nLmxlbmd0aCAmJiBoZXhTdHJpbmcuc3Vic3RyKGksIDIpICE9PSAnMDAnKTsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgIGFzY2lpUmVzcCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxyXG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoaGV4U3RyaW5nLnN1YnN0cmluZyhpLCAoaSArIDIpKSwgMTYpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhc2NpaVJlc3AudHJpbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGhleFRvQnl0ZXMgPSBoZXhTdHIgPT4ge1xyXG4gICAgICAgIGxldCBieXRlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGN1cnJlbnQgPSAwOyBjdXJyZW50IDwgaGV4U3RyLmxlbmd0aDsgY3VycmVudCArPSAyKVxyXG4gICAgICAgICAgICBieXRlcy5wdXNoKCBwYXJzZUludChoZXhTdHIuc3Vic3RyaW5nKGN1cnJlbnQsIChjdXJyZW50ICsgMikpLCAxNikgKTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBieXRlcztcclxuICAgIH1cclxuXHJcbiAgICBkZWNvZGVSTEUgPSBhcnJheVNlZ21lbnQgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxMZW5ndGggPSBhcnJheVNlZ21lbnQubGVuZ3RoO1xyXG4gICAgICAgIGxldCByZXR1cm5TZWdtZW50ID0gWyBhcnJheVNlZ21lbnRbMF0gXTtcclxuICAgICAgICBsZXQgbmV4dEluZGV4ID0gMDtcclxuICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaW5pdGlhbExlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5leHRJbmRleCA9IGkgKyAxO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmIChuZXh0SW5kZXggKyAxIDwgaW5pdGlhbExlbmd0aCkge1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlTZWdtZW50W2ldID09PSBhcnJheVNlZ21lbnRbbmV4dEluZGV4XSkge1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuU2VnbWVudC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLm5ld0FycmF5UGFydGlhbChhcnJheVNlZ21lbnRbaV0sIGFycmF5U2VnbWVudFtuZXh0SW5kZXggKyAxXSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9hZGp1c3QgaW5kZXggYWNjb3JkaW5nbHksIHByaW9yIHRvIGJlaW5nIGluY3JlbWVudGVkIGJ5IHRoZSBpdGVyYXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IG5leHRJbmRleCArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHJldHVyblNlZ21lbnQucHVzaChhcnJheVNlZ21lbnRbaV0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSByZXR1cm5TZWdtZW50LnB1c2goYXJyYXlTZWdtZW50W2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXR1cm5TZWdtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkSW5pdGlhbERhdGFBcnJheSA9IGNoZWNrRm9yUmxlID0+IHtcclxuICAgICAgICBsZXQgcmV0dXJuQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IE1hdGgubWluKC4uLk9iamVjdC5rZXlzKHRoaXMucmF3RGF0YSkpOyBpIDwgdGhpcy5tYXhCbG9ja0lkOyBpKyspXHJcbiAgICAgICAgICAgIHJldHVybkFycmF5ID0gcmV0dXJuQXJyYXkuY29uY2F0KC4uLnRoaXMucmF3RGF0YVtpXSlcclxuXHJcbiAgICAgICAgcmV0dXJuICghY2hlY2tGb3JSbGUpID8gcmV0dXJuQXJyYXkgOiB0aGlzLmNoZWNrUmxlKHJldHVybkFycmF5KTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja1JsZSA9IHJldHVybkFycmF5ID0+ICh0aGlzLnJsZUZvcm1hdHNbIHRoaXMuaW5pdGlhbE5vdGlmaWNhdGlvblswXSBdKSA/IHRoaXMuZGVjb2RlUkxFKHJldHVybkFycmF5KSA6IHJldHVybkFycmF5O1xyXG5cclxuICAgIGNvbnZlcnRDdXJyZW5jeUNvZGUgPSBjdXJyZW5jeVN0cmluZyA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VycmVuY3kgPSBjdXJyZW5jeVN0cmluZy50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gKGN1cnJlbmN5ID09PSAndXMnKSA/IFsweDA4LCAweDQwXSA6IFxyXG4gICAgICAgICAgICAoY3VycmVuY3kgPT09ICdldXJvJykgPyBbMHgwOSwgMHg3OF0gOiBbMHgwMCwgMHgwMF07XHJcbiAgICB9XHJcblxyXG4gICAgLy9Db252ZXJ0IG51bWJlciB0byA2IGJ5dGUgYXJyYXkuXHJcbiAgICBjb252ZXJ0TnVtVG9BbW91bnQgPSAobnVtLCBvcHRpb25hbExlbikgPT4ge1xyXG4gICAgICAgIG9wdGlvbmFsTGVuID0gb3B0aW9uYWxMZW4gfHwgMTI7XHJcblxyXG4gICAgICAgIGxldCBzdHJpbmdOdW0gPSBudW0udG9TdHJpbmcoKTtcclxuICAgICAgICBsZXQgcmV0dXJuQXJyID0gW107XHJcblxyXG4gICAgICAgIHdoaWxlIChzdHJpbmdOdW0ubGVuZ3RoIDwgb3B0aW9uYWxMZW4pXHJcbiAgICAgICAgICAgIHN0cmluZ051bSA9IFwiMFwiICsgc3RyaW5nTnVtO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmluZ051bS5sZW5ndGg7IGkgKz0gMilcclxuICAgICAgICAgICAgcmV0dXJuQXJyLnB1c2goXHJcbiAgICAgICAgICAgICAgICBwYXJzZUludChzdHJpbmdOdW0uc3Vic3RyaW5nKGksIChpICsgMikpLCAxNilcclxuICAgICAgICAgICAgKVxyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHJldHVybkFycjtcclxuICAgIH1cclxuXHJcbiAgICBkZWxheVByb21pc2UgPSAoZGVsYXksIHBhc3NlZFZhbHVlKSA9PlxyXG4gICAgICAgIG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSwgcGFzc2VkVmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGJ5dGVBcnJheVRvTnVtYmVyID0gYnl0ZUFycmF5ID0+IHBhcnNlSW50KHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoYnl0ZUFycmF5KSwgMTApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVdGlsaXRpZXM7XHJcbiIsImltcG9ydCBVdGlsaXRpZXMgZnJvbSBcIi4uL3V0aWxzXCI7XHJcblxyXG5jbGFzcyBTd2lwZVBhcnNlciBleHRlbmRzIFV0aWxpdGllcyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdEV4cFBBTiA9IHJhd0RhdGEgPT4ge1xyXG4gICAgICAgIGxldCBzdHJpbmdEYXRhID0gKHR5cGVvZiByYXdEYXRhID09PSAnb2JqZWN0JykgPyB0aGlzLmJ1ZmZlclRvVXRmOChyYXdEYXRhLnNsaWNlKDQpKSA6IHJhd0RhdGE7XHJcbiAgICBcclxuICAgICAgICBpZiAoc3RyaW5nRGF0YS5pbmRleE9mKCc7JykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFN0cmluZyA9IHRoaXMuc3BsaXRFeHBQQU4oc3RyaW5nRGF0YSk7XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG1hc2tlZFBBTjogZm9ybWF0dGVkU3RyaW5nWzBdLFxyXG4gICAgICAgICAgICAgICAgTGFzdDQ6IGZvcm1hdHRlZFN0cmluZ1sxXSxcclxuICAgICAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlOiBmb3JtYXR0ZWRTdHJpbmdbMl0sXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlQ29kZTogZm9ybWF0dGVkU3RyaW5nWzNdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4ge1xyXG4gICAgICAgICAgICBtYXNrZWRQQU46IFwiXCIsXHJcbiAgICAgICAgICAgIExhc3Q0OiBcIlwiLFxyXG4gICAgICAgICAgICBleHBpcmF0aW9uRGF0ZTogXCJcIixcclxuICAgICAgICAgICAgc2VydmljZUNvZGU6IFwiXCJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3BsaXRFeHBQQU4gPSBzdHJpbmdEYXRhID0+IHtcclxuICAgICAgICBpZiAoc3RyaW5nRGF0YS5sZW5ndGggPiAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cFBBTiA9IHN0cmluZ0RhdGEucmVwbGFjZSgnOycsJycpLnJlcGxhY2UoJz8nLCcnKS5zcGxpdCgnPScpO1xyXG4gICAgICAgICAgICBjb25zdCBleHAgPSBleHBQQU5bMV0uc2xpY2UoMCwgNCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VDb2RlID0gZXhwUEFOWzFdLnNsaWNlKDQsIDcpO1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRFeHAgPSBleHAuc2xpY2UoLTIpICsgJy8nICsgZXhwLnNsaWNlKDAsIDIpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXNrZWRQQU4gPSBleHBQQU5bMF07XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RGb3VyID0gZXhwUEFOWzBdLnNsaWNlKC00KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBbbWFza2VkUEFOLCBsYXN0Rm91ciwgZm9ybWF0dGVkRXhwLCBzZXJ2aWNlQ29kZV1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gW1wiTm90IEZvdW5kXCIsIFwiTm90IEZvdW5kXCIsIFwiTm90IEZvdW5kXCIsIFwiTm90IEZvdW5kXCJdXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTd2lwZVBhcnNlcjsiLCJpbXBvcnQgU3dpcGVQYXJzZXIgZnJvbSAnLi9zd2lwZVBhcnNlcic7XHJcblxyXG5jbGFzcyBFbXZQYXJzZXIgZXh0ZW5kcyBTd2lwZVBhcnNlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLm1vcmVUYWdCeXRlc0ZsYWcxID0gMHgxRjtcclxuICAgICAgICB0aGlzLm1vcmVUYWdCeXRlc0ZsYWcyID0gMHg4MDtcclxuICAgICAgICB0aGlzLmNvbnN0cnVjdGVkRmxhZyA9IDB4MjA7XHJcbiAgICAgICAgdGhpcy5tb3JlTGVuZ3RoRmxhZyA9IDB4ODA7XHJcbiAgICAgICAgdGhpcy5vbmVCeXRlTGVuZ3RoTWFzayA9IDB4N0Y7XHJcblxyXG4gICAgICAgIHRoaXMudHJ4U3RhdHVzVG9TdHJpbmcgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgMHgwMDogXCJBcHByb3ZlZFwiLFxyXG4gICAgICAgICAgICAweDAxOiBcIkRlY2xpbmVkXCIsXHJcbiAgICAgICAgICAgIDB4MDI6IFwiRXJyb3JcIixcclxuICAgICAgICAgICAgMHgxMDogXCJDYW5jZWxsZWQgQnkgSG9zdFwiLFxyXG4gICAgICAgICAgICAweDExOiBcIkNvbmZpcm0gQW1vdW50IE5vXCIsXHJcbiAgICAgICAgICAgIDB4MTI6IFwiQ29uZmlybSBBbW91bnQgVGltZW91dFwiLFxyXG4gICAgICAgICAgICAweDEzOiBcIkNvbmZpcm0gQW1vdW50IENhbmNlbFwiLFxyXG4gICAgICAgICAgICAweDE0OiBcIk1TUiBTZWxlY3QgRGViaXRcIixcclxuICAgICAgICAgICAgMHgxNTogXCJNU1IgU2VsZWN0IERlYml0XCIsXHJcbiAgICAgICAgICAgIDB4MTY6IFwiTVNSIFNlbGVjdCBDcmVkaXQvRGViaXQgdGltb3V0XCIsXHJcbiAgICAgICAgICAgIDB4MTc6IFwiTVNSIFNlbGVjdCBDcmVkaXQvRGViaXQgY2FuY2VsXCIsXHJcbiAgICAgICAgICAgIDB4MTg6IFwiU2lnbmF0dXJlIENhcHR1cmUgQ2FuY2VsbGVkIGJ5IEhvc3QgKFNDLVMgT25seSB8IFNDLUYgb25seSlcIixcclxuICAgICAgICAgICAgMHgxOTogXCJTaWduYXR1cmUgQ2FwdHVyZSBUaW1lb3V0IChTQy1TIE9ubHkgfCBTQy1GIE9ubHkpXCIsXHJcbiAgICAgICAgICAgIDB4MUE6IFwiU2lnbmF0dXJlIENhcHR1cmUgQ2FuY2VsbGVkIGJ5IENhcmRob2xkZXIgKFNDLVMgT25seSB8IFNDLUYgT25seSlcIixcclxuICAgICAgICAgICAgMHgxQjogXCJQSU4gRW50cnkgQ2FuY2VsbGVkIGJ5IEhvc3RcIixcclxuICAgICAgICAgICAgMHgxQzogXCJQSU4gZW50cnkgdGltZW91dFwiLFxyXG4gICAgICAgICAgICAweDFEOiBcIlBJTiBlbnRyeSBDYW5jZWxsZWQgYnkgQ2FyZGhvbGRlclwiLFxyXG4gICAgICAgICAgICAweDFFOiBcIk1hbnVhbCBTZWxlY3RlZCBDYW5jZWxsZWQgYnkgSG9zdFwiLFxyXG4gICAgICAgICAgICAweDFGOiBcIk1hbnVhbCBTZWxlY3Rpb24gVGltZW91dFwiLFxyXG4gICAgICAgICAgICAweDIwOiBcIk1hbnVhbCBTZWxjdGlvbiBDYW5jZWxsZWQgYnkgQ2FyZGhvbGRlclwiLFxyXG4gICAgICAgICAgICAweDIxOiBcIldhaXRpbmcgZm9yIENhcmQgQ2FuY2VsbGVkIGJ5IEhvc3RcIixcclxuICAgICAgICAgICAgMHgyMjogXCJXYWl0aW5nIGZvciBDYXJkIFRpbWVvdXRcIixcclxuICAgICAgICAgICAgMHgyMzogXCJbU0NSQV06IENhbmNlbGxlZCBieSBDYXJkIFN3aXBlIChNU1IpIHx8W1BJTl06IFdhaXRpbmcgZm9yIENhcmQgQ2FuY2VsbGVkIGJ5IENhcmRob2xkZXIgXCIsXHJcbiAgICAgICAgICAgIDB4MjQ6IFwiV2FpdGluZyBmb3IgQ2FyZCBJQ0MgU2VhdGVkXCIsXHJcbiAgICAgICAgICAgIDB4MjU6IFwiV2FpdGluZyBmb3IgQ2FyZCBNU1IgU3dpcGVkXCIsXHJcbiAgICAgICAgICAgIDB4RkY6IFwiVW5rbm93biBUcmFuc2FjdGlvbiBTdGF0dXNcIixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0bHZQYXJzZXIgPSAoZGF0YSwgaXNNc3IpID0+IHtcclxuICAgICAgICBjb25zdCBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGxldCBpVExWID0gMDtcclxuICAgICAgICBsZXQgaVRhZztcclxuICAgICAgICBsZXQgYlRhZyA9IHRydWU7XHJcbiAgICAgICAgbGV0IGJ5dGVWYWx1ZTtcclxuICAgICAgICBsZXQgbGVuZ3RoVmFsdWU7XHJcbiAgICAgICAgbGV0IHRhZ0J5dGVzID0gbnVsbDtcclxuICAgICAgICBsZXQgVGFnQnVmZmVyID0gW107XHJcblxyXG4gICAgICAgIHdoaWxlIChpVExWIDwgZGF0YUxlbmd0aCkge1xyXG4gICAgICAgICAgICBieXRlVmFsdWUgPSBkYXRhW2lUTFZdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJUYWcpIHtcclxuICAgICAgICAgICAgICAgIGlUYWcgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJNb3JlVGFnQnl0ZXMgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChieXRlVmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0ZpcnN0IGJ5dGUgb2YgdGFnIGNhbm5vdCBiZSB6ZXJvLlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChiTW9yZVRhZ0J5dGVzICYmIChpVExWIDwgZGF0YUxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBieXRlVmFsdWUgPSBkYXRhW2lUTFZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlUTFYrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgVGFnQnVmZmVyW2lUYWddID0gYnl0ZVZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBiTW9yZVRhZ0J5dGVzID0gKGlUYWcgPT09IDApID8gKChieXRlVmFsdWUgJiB0aGlzLm1vcmVUYWdCeXRlc0ZsYWcxKSA9PSB0aGlzLm1vcmVUYWdCeXRlc0ZsYWcxKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgoYnl0ZVZhbHVlICYgdGhpcy5tb3JlVGFnQnl0ZXNGbGFnMikgPT0gdGhpcy5tb3JlVGFnQnl0ZXNGbGFnMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlUYWcrKztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0YWdCeXRlcyA9IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoVGFnQnVmZmVyLnNsaWNlKDAsIGlUYWcpKTtcclxuICAgICAgICAgICAgICAgIGJUYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxlbmd0aFZhbHVlID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKGJ5dGVWYWx1ZSAmIHRoaXMubW9yZUxlbmd0aEZsYWcpID09IHRoaXMubW9yZUxlbmd0aEZsYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbkxlbmd0aEJ5dGVzID0gYnl0ZVZhbHVlICYgdGhpcy5vbmVCeXRlTGVuZ3RoTWFzaztcclxuICAgICAgICAgICAgICAgICAgICBpVExWKys7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlMZW4gPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGlMZW4gPCBuTGVuZ3RoQnl0ZXMpICYmIChpVExWIDwgZGF0YUxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZVZhbHVlID0gZGF0YVtpVExWXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaVRMVisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGhWYWx1ZSA9ICgobGVuZ3RoVmFsdWUgJiAweDAwMDAwMEZGKSA8PCA4KSArIGJ5dGVWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaUxlbisrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aFZhbHVlID0gYnl0ZVZhbHVlICYgdGhpcy5vbmVCeXRlTGVuZ3RoTWFzaztcclxuICAgICAgICAgICAgICAgICAgICBpVExWKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRhZ0J5dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ0J5dGUgPSBUYWdCdWZmZXJbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmRJbmRleCA9ICgoaVRMViArIGxlbmd0aFZhbHVlKSA+IGRhdGFMZW5ndGgpID8gZGF0YUxlbmd0aCA6IGlUTFYgKyBsZW5ndGhWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxlbiA9IGVuZEluZGV4IC0gaVRMVjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWVCeXRlcyA9IChsZW4gPiAwKSA/IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoZGF0YS5zbGljZShpVExWLCBpVExWICsgbGVuKSkgOiBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGFnXCI6IHRhZ0J5dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRhZ0xlbmd0aFwiOiAoIWxlbmd0aFZhbHVlKSA/ICh2YWx1ZUJ5dGVzLmxlbmd0aCArIDEgLyAyKSA6IGxlbmd0aFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRhZ1ZhbHVlXCI6IHRoaXMuaGV4T3JBc2NpaUZvcm1hdHRlcih0YWdCeXRlcywgdmFsdWVCeXRlcywgaXNNc3IpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISgodGFnQnl0ZSAmIHRoaXMuY29uc3RydWN0ZWRGbGFnKSA9PSB0aGlzLmNvbnN0cnVjdGVkRmxhZykgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlUTFYgKz0gbGVuZ3RoVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJUYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgaGV4T3JBc2NpaUZvcm1hdHRlciA9ICh0YWdCeXRlcywgdmFsdWVCeXRlcywgaXNNc3IpID0+IHtcclxuICAgICAgICBzd2l0Y2godGFnQnl0ZXMpIHtcclxuICAgICAgICAgICAgY2FzZSBcIkRGREYxQVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlQnl0ZXN9ICR7dGhpcy50cnhTdGF0dXNUb1N0cmluZ1sgcGFyc2VJbnQodmFsdWVCeXRlcywgMTYpIF19YFxyXG4gICAgICAgICAgICBjYXNlIFwiREZERjREXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCI1RjIwXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oZXhUb0FzY2lpKHZhbHVlQnl0ZXMpO1xyXG4gICAgICAgICAgICBjYXNlIFwiREZERjI1XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGlzTXNyKSA/IHRoaXMuaGV4VG9Bc2NpaSggKHZhbHVlQnl0ZXMgPyB2YWx1ZUJ5dGVzLnN1YnN0cmluZygwLCAxNCkgOiB2YWx1ZUJ5dGVzKSApIDogdmFsdWVCeXRlcztcclxuICAgICAgICAgICAgY2FzZSBcIkRGREY0MFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZUJ5dGVzID09PSAweDgwKSA/IGAke3ZhbHVlQnl0ZXN9ICBDQkMtTUFDIGNoZWNrZWQgaW4gQVJRQyBvbmxpbmUgcmVzcG9uc2VgIDogKHZhbHVlQnl0ZXMgPT09IDB4MDEpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQnl0ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFbXZQYXJzZXI7IiwiY2xhc3MgTGVuZ3RoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcIkRldmljZSBjb21tdW5pY2F0aW9uIGVycm9yLiBMZW5ndGggZG9lcyBub3QgbWF0Y2ggZGF0YVwiKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIkJsZVRyYW5zbWlzc2lvbkVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gMTAxMjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGVuZ3RoRXJyb3I7IiwiY2xhc3MgRGV2aWNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGNvZGUsIG5hbWUsIG1lc3NhZ2UgfSkge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IChuYW1lIHx8IFwiRGV2aWNlRXJyb3JcIik7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gKGNvZGUgfHwgMTAwMClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGV2aWNlRXJyb3I7IiwiaW1wb3J0IEVtdlBhcnNlciBmcm9tICcuLi9wYXJzZXJzL2VtdlBhcnNlcidcclxuaW1wb3J0IEFwaUVycm9yIGZyb20gJy4vYXBpRXJyb3InO1xyXG5pbXBvcnQgTGVuZ3RoRXJyb3IgZnJvbSAnLi9sZW5ndGhFcnJvcic7XHJcbmltcG9ydCBEZXZpY2VFcnJvciBmcm9tICcuL2RldmljZUVycm9yJztcclxuXHJcbmNsYXNzIEVycm9ySGFuZGxlciBleHRlbmRzIEVtdlBhcnNlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFja3MpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmVycm9yQ2FsbGJhY2sgPSBjYWxsYmFja3MuZXJyb3JDYWxsYmFjaztcclxuICAgIH07XHJcblxyXG4gICAgYnVpbGREZXZpY2VFcnIgPSBlcnIgPT4gKGVyciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbikgPyBcclxuICAgICAgICBuZXcgQXBpRXJyb3IoZXJyKSA6IChlcnIgaW5zdGFuY2VvZiBFcnJvcikgPyBcclxuICAgICAgICAgICAgZXJyIDogbmV3IERldmljZUVycm9yKGVycik7XHJcblxyXG4gICAgdGhyb3dMZW5FcnIgPSAoKSA9PiBuZXcgTGVuZ3RoRXJyb3IoKTtcclxuXHJcbiAgICBzZW5kRXJyVG9DYWxsYmFjayA9IGVyciA9PiB7XHJcbiAgICAgICAgdGhpcy5lcnJvckNhbGxiYWNrKGVycik7XHJcbiAgICAgICAgcmV0dXJuIGVycjtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVycm9ySGFuZGxlcjsiLCJjb25zdCBub3RGb3VuZE9iaiA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgZXJyb3JDb2RlOiA4LFxyXG4gICAgZXJyb3JOYW1lOiBcIk5vdEZvdW5kRXJyb3JcIlxyXG59KTtcclxuXHJcbmNvbnN0IGFwaU5ldHdvcmtFcnIgPSBPYmplY3QuZnJlZXplKHtcclxuICAgIGNvZGU6IDE5LFxyXG4gICAgbmFtZTogJ05ldHdvcmtFcnJvcidcclxufSk7XHJcblxyXG5jb25zdCBkZXZpY2VOb3RGb3VuZCA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgY29kZTogMTAwMixcclxuICAgIG5hbWU6ICdEZXZpY2VOb3RGb3VuZCcsXHJcbiAgICBtZXNzYWdlOiBcIlBsZWFzZSBzZWxlY3QgZGV2aWNlIHRvIGNvbm5lY3RcIlxyXG59KTtcclxuXHJcbmNvbnN0IGdhdHRTZXJ2ZXJOb3RDb25uZWN0ZWQgPSBPYmplY3QuZnJlZXplKHtcclxuICAgIGNvZGU6IDEwMDMsXHJcbiAgICBuYW1lOiBcIkdhdHRTZXJ2ZXJOb3RDb25uZWN0ZWRcIixcclxuICAgIG1lc3NhZ2U6IFwiUGxlYXNlIGNvbm5lY3QgZGVzaXJlZCBkZXZpY2VcIlxyXG59KTtcclxuXHJcbmNvbnN0IGNvbW1hbmROb3RTZW50ID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICBjb2RlOiAxMDA0LCBcclxuICAgIG5hbWU6IFwiQ29tbWFuZE5vdFNlbnRcIiwgXHJcbiAgICBtZXNzYWdlOiBcIkNvbW1hbmQgY2hhcmFjdGVyaXN0aWMgbm90IGZvdW5kLCBkZXZpY2Ugbm90IG9wZW5lZFwiXHJcbn0pO1xyXG5cclxuY29uc3QgZGV2aWNlTm90T3BlbiA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgY29kZTogMTAwNSwgXHJcbiAgICBuYW1lOiBcIkNvbW1hbmROb3RTZW50XCIsIFxyXG4gICAgbWVzc2FnZTogXCJEZXZpY2Ugbm90IG9wZW5lZFwiXHJcbn0pO1xyXG5cclxuY29uc3QgY29tbWFuZE5vdFNlbnRGcm9tSG9zdCA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgY29kZTogMTAwNiwgXHJcbiAgICBuYW1lOiBcIkNvbW1hbmROb3RTZW50XCIsIFxyXG4gICAgbWVzc2FnZTogXCJBcHBsaWNhdGlvbiBGcm9tIEhvc3Qgbm90IGZvdW5kLiAgRGV2aWNlIG5vdCBjb25uZWN0ZWRcIlxyXG59KTtcclxuXHJcbmNvbnN0IHJlYWRGYWlsZWQgPSBPYmplY3QuZnJlZXplKHtcclxuICAgIGNvZGU6IDEwMDcsIFxyXG4gICAgbmFtZTogXCJSZWFkRmFpbGVkXCIsIFxyXG4gICAgbWVzc2FnZTogXCJVbmFibGUgdG8gcmVhZCBkYXRhIGZyb20gZGV2aWNlLiBDb21tdW5pY2F0aW9uIGVycm9yXCJcclxufSk7XHJcblxyXG5jb25zdCByZXNwb25zZU5vdFJlY2VpdmVkID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICBjb2RlOiAxMDA4LCBcclxuICAgIG5hbWU6ICdSZXNwb25zZU5vdFJlY2VpdmVkJywgXHJcbiAgICBtZXNzYWdlOiBcIkNvbW1hbmQgd2FzIHNlbnQsIGJ1dCByZXNwb25zZSB3YXMgbm90IHJlY2VpdmVkIGZyb20gZGV2aWNlXCJcclxufSk7XHJcblxyXG5jb25zdCBnZXRTZXJ2aWNlRmFpbCA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgY29kZTogMTAwOSwgXHJcbiAgICBuYW1lOiBcIkdldFNlcnZpY2VGYWlsXCIsIFxyXG4gICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmV0cmlldmUgcHJpbWFyeSBHQVRUIHNlcnZpY2UuIFBsZWFzZSBjb25uZWN0IGRldmljZVwiXHJcbn0pO1xyXG5cclxuY29uc3QgY29tbWFuZE5vdEFjY2VwdGVkID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICBjb2RlOiAxMDEzLFxyXG4gICAgbmFtZTogXCJDb21tYW5kTm90QWNjZXB0ZWRcIixcclxuICAgIG1lc3NhZ2U6IFwiRGV2aWNlIGRpZCBub3QgYWNjZXB0IGNvbW1hbmRcIlxyXG59KTtcclxuXHJcbmNvbnN0IG1pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IGZpZWxkTmFtZSA9PiBPYmplY3QuZnJlZXplKHtcclxuICAgIGNvZGU6IDEwMTQsXHJcbiAgICBuYW1lOiBcIk1pc3NpbmdSZXF1aXJlZFBhcmFtZXRlclwiLFxyXG4gICAgbWVzc2FnZTogYCcke2ZpZWxkTmFtZX0nIGlzIHJlcXVpcmVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbi5gXHJcbn0pO1xyXG5cclxuY29uc3Qgd3JvbmdJbnB1dFR5cGVzID0gKGFjY2VwdGFibGVUeXBlcywgcHJvcGVydHlOYW1lKSA9PiBPYmplY3QuZnJlZXplKHtcclxuICAgIGNvZGU6IDEwMTUsXHJcbiAgICBuYW1lOiBcIkluY29ycmVjdElucHV0VHlwZVwiLFxyXG4gICAgbWVzc2FnZTogYFBhcmFtZXRlciB0eXBlIGZvciAke3Byb3BlcnR5TmFtZX0gd2FzIG5vdCBjb3JyZWN0LCBhY2NlcHRhYmxlIHR5cGUocykgYXJlOiAke2FjY2VwdGFibGVUeXBlcy5qb2luKFwiLCBcIil9YFxyXG59KTtcclxuXHJcbmNvbnN0IHdyb25nSW5wdXRWYWx1ZXMgPSAoYWNjZXB0YWJsZVZhbHMsIHByb3BlcnR5TmFtZSkgPT4gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICBjb2RlOiAxMDE1LFxyXG4gICAgbmFtZTogXCJJbmNvcnJlY3RJbnB1dFZhbHVlXCIsXHJcbiAgICBtZXNzYWdlOiBgUGFyYW1ldGVyIHZhbHVlIGZvciAke3Byb3BlcnR5TmFtZX0gd2FzIG5vdCBjb3JyZWN0LCBhY2NlcHRhYmxlIHZhbHVlKHMpIGFyZTogJHthY2NlcHRhYmxlVmFscy5qb2luKFwiLCBcIil9YFxyXG59KTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBjb21tYW5kTm90QWNjZXB0ZWQsXHJcbiAgICBjb21tYW5kTm90U2VudCxcclxuICAgIHJlc3BvbnNlTm90UmVjZWl2ZWQsXHJcbiAgICBkZXZpY2VOb3RGb3VuZCxcclxuICAgIGRldmljZU5vdE9wZW4sXHJcbiAgICBnYXR0U2VydmVyTm90Q29ubmVjdGVkLFxyXG4gICAgcmVhZEZhaWxlZCxcclxuICAgIGNvbW1hbmROb3RTZW50RnJvbUhvc3QsXHJcbiAgICBnZXRTZXJ2aWNlRmFpbCxcclxuICAgIG5vdEZvdW5kT2JqLFxyXG4gICAgYXBpTmV0d29ya0VycixcclxuICAgIG1pc3NpbmdSZXF1aXJlZEZpZWxkcyxcclxuICAgIHdyb25nSW5wdXRUeXBlcyxcclxuICAgIHdyb25nSW5wdXRWYWx1ZXNcclxufVxyXG4iLCJjb25zdCBvcGVuU3VjY2VzcyA9IFwiRGV2aWNlIE9wZW5cIjtcclxuY29uc3QgY2xvc2VTdWNjZXNzID0gXCJEZXZpY2UgQ2xvc2VkXCJcclxuY29uc3Qgc3VjY2Vzc0NvZGUgPSAwO1xyXG5jb25zdCBzd2lwZUxpc3RlbmluZyA9IFwiU3VjY2VzcywgbGlzdGVuaW5nIGZvciBzd2lwZVwiXHJcbmNvbnN0IGRldmljZU5vdElkbGUgPSBcIkRldmljZSBub3QgaWRsZVwiO1xyXG5jb25zdCB0RHluYW1vID0gXCJ0RHluYW1vXCI7XHJcbmNvbnN0IGVEeW5hbW8gPSBcImVEeW5hbW9cIjtcclxuY29uc3QgZHluYVByb0dvID0gXCJkeW5hUHJvR29cIjtcclxuY29uc3QgZHBNaW5pID0gXCJEeW5hUHJvIE1pbmlcIjtcclxuXHJcbmNvbnN0IGNvbmZpZ1N0ciA9IFwiQ29uZmlndXJhdGlvblwiO1xyXG5jb25zdCB1bmtub3duID0gXCJVbmtub3duXCI7XHJcbmNvbnN0IHVua25vd25VbmRvYyA9IGAke3Vua25vd259L1VuZG9jdW1lbnRlZGA7XHJcbmNvbnN0IGFzY2lpID0gXCJBU0NJSVwiO1xyXG5cclxuY29uc3Qgbm9TZXNzaW9uVG9DbGVhciA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgY29kZTogc3VjY2Vzc0NvZGUsXHJcbiAgICBtZXNzYWdlOiBcIlN1Y2Nlc3MsIHRoZXJlIHdhcyBubyBzZXNzaW9uIHRvIGNsZWFyXCJcclxufSk7XHJcblxyXG5jb25zdCBnYXR0QnVzeSA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgY29kZTogMTksIFxyXG4gICAgbWVzc2FnZTogXCJHQVRUIG9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzLlwiXHJcbn0pO1xyXG5cclxuY29uc3Qgc3VjY2Vzc2Z1bENsb3NlID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICBjb2RlOiBzdWNjZXNzQ29kZSxcclxuICAgIG1lc3NhZ2U6IGNsb3NlU3VjY2Vzc1xyXG59KTtcclxuXHJcbmNvbnN0IGNhcmRUeXBlQWxsID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICBbZUR5bmFtb106IDB4MDMsXHJcbiAgICBbdER5bmFtb106IDB4MDcsXHJcbiAgICBbZHBNaW5pXTogMHgwMyxcclxuICAgIFtkeW5hUHJvR29dOiAweDA3XHJcbn0pO1xyXG5cclxuY29uc3QgY2FyZFR5cGVzT2JqID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAnbXNyJzogMHgwMSxcclxuICAgICdjaGlwJzogMHgwMixcclxuICAgICdjaGlwbXNyJzogMHgwMyxcclxuICAgICdjb250YWN0bGVzcyc6IDB4MDQsXHJcbiAgICAnY29udGFjdGxlc3Ntc3InOiAweDA1LFxyXG4gICAgJ2NvbnRhY3RsZXNzY2hpcCc6MHgwNixcclxuICAgICdhbGwnOiAweDA3XHJcbn0pO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIG9wZW5TdWNjZXNzLFxyXG4gICAgc3VjY2Vzc0NvZGUsXHJcbiAgICBzd2lwZUxpc3RlbmluZyxcclxuICAgIGRldmljZU5vdElkbGUsXHJcbiAgICBjbG9zZVN1Y2Nlc3MsXHJcbiAgICBub1Nlc3Npb25Ub0NsZWFyLFxyXG4gICAgdER5bmFtbyxcclxuICAgIGVEeW5hbW8sXHJcbiAgICBkeW5hUHJvR28sXHJcbiAgICBkcE1pbmksXHJcbiAgICBjYXJkVHlwZUFsbCxcclxuICAgIGNhcmRUeXBlc09iaixcclxuICAgIGdhdHRCdXN5LFxyXG4gICAgc3VjY2Vzc2Z1bENsb3NlLFxyXG4gICAgY29uZmlnU3RyLFxyXG4gICAgdW5rbm93bixcclxuICAgIHVua25vd25VbmRvYyxcclxuICAgIGFzY2lpXHJcbn1cclxuIiwiaW1wb3J0IEVycm9ySGFuZGxlciBmcm9tICcuLi9lcnJvckhhbmRsZXInO1xyXG5pbXBvcnQgeyBcclxuICAgIGRldmljZU5vdEZvdW5kLCBcclxuICAgIGdhdHRTZXJ2ZXJOb3RDb25uZWN0ZWQsXHJcbiAgICBnZXRTZXJ2aWNlRmFpbCxcclxuICAgIG5vdEZvdW5kT2JqLFxyXG4gICAgZGV2aWNlTm90T3BlbixcclxuICAgIGFwaU5ldHdvcmtFcnIsXHJcbiAgICB3cm9uZ0lucHV0VHlwZXNcclxufSBmcm9tICcuLi9lcnJvckhhbmRsZXIvZXJyQ29uc3RhbnRzJztcclxuaW1wb3J0IHsgY2FyZFR5cGVBbGwsIGNhcmRUeXBlc09iaiwgc3VjY2Vzc2Z1bENsb3NlIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcclxuXHJcbmNsYXNzIERldmljZUJhc2UgZXh0ZW5kcyBFcnJvckhhbmRsZXIge1xyXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBjYWxsYmFja3MpIHtcclxuICAgICAgICBzdXBlcihjYWxsYmFja3MpO1xyXG5cclxuICAgICAgICB0aGlzLmRldmljZSA9IGRldmljZTtcclxuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RDYWxsYmFjayA9IGNhbGxiYWNrcy5kaXNjb25uZWN0SGFuZGxlcjtcclxuICAgICAgICB0aGlzLmdhdHRTZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2FyZFNlcnZpY2UgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLmRldmljZVVVSURzID0gW1xyXG4gICAgICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwNFwiLFxyXG4gICAgICAgICAgICBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDEwM1wiLCBcclxuICAgICAgICAgICAgXCIwNTA4ZTZmOC1hZDgyLTg5OGYtZjg0My1lMzQxMGNiNjAxMDFcIlxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVuY3lDb2RlID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgICdkb2xsYXInOiBbMHgwOCwgMHg0MF0sXHJcbiAgICAgICAgICAgICdldXJvJzogWzB4MDksIDB4NzhdLFxyXG4gICAgICAgICAgICAncG91bmQnOiBbMHgwOCwgMHgyNl0sXHJcbiAgICAgICAgICAgICdkZWZhdWx0JzogWzB4MDAsIDB4MDBdIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uVHlwZXMgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgJ3B1cmNoYXNlJzogMHgwMCxcclxuICAgICAgICAgICAgJ2Nhc2hhZHZhbmNlJzogMHgwMSxcclxuICAgICAgICAgICAgJ2Nhc2hiYWNrJzogMHgwMixcclxuICAgICAgICAgICAgJ3B1cmNoYXNlZ29vZHMnOiAweDA0LFxyXG4gICAgICAgICAgICAncHVyY2hhc2VzZXJ2aWNlcyc6IDB4MDgsXHJcbiAgICAgICAgICAgICdjb250YWN0bGVzc2Nhc2hiYWNrJzogMHgwOSxcclxuICAgICAgICAgICAgJ2Nhc2htYW51YWwnOiAweDEyLFxyXG4gICAgICAgICAgICAncmVmdW5kJzogMHgyMCwgXHJcbiAgICAgICAgICAgICdjaGlwb25seXBheW1lbnQnOiAweDUwXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29tbWFuZFJlc3BBdmFpbGFibGUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjYXJkVHlwZXMgPSBjYXJkVHlwZVN0ciA9PiAoY2FyZFR5cGVTdHIgIT09ICdhbGwnKSA/IFxyXG4gICAgICAgIChjYXJkVHlwZXNPYmpbIGNhcmRUeXBlU3RyIF0gfHwgMHgwMykgOiAoY2FyZFR5cGVBbGxbIHRoaXMuZGV2aWNlVHlwZSBdIHx8IDB4MDMpO1xyXG4gICAgICAgIFxyXG5cclxuICAgIGNvbm5lY3QgPSAoKSA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtHQVRUXTogRGV2aWNlIENvbm5lY3Rpb24gUmVxdWVzdCB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgIHJldHVybiAodGhpcy5kZXZpY2UpID9cclxuICAgICAgICAgICAgdGhpcy5kZXZpY2UuZ2F0dC5jb25uZWN0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKHNlcnZlciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0dBVFRdOiBEZXZpY2UgY29ubmVjdGVkIC0gR0FUVCBTZXJ2ZXIgcmV0cmlldmVkIHN1Y2Nlc3NmdWxseSB8fCAke25ldyBEYXRlKCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYXR0U2VydmVyID0gc2VydmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZGV2aWNlTm90Rm91bmQpIClcclxuICAgIH0pO1xyXG5cclxuICAgIGRpc2Nvbm5lY3QgPSAoKSA9PiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiAge1xyXG4gICAgICAgIGlmICh0aGlzLmRldmljZS5nYXR0LmNvbm5lY3RlZClcclxuICAgICAgICAgICAgdGhpcy5kZXZpY2UuZ2F0dC5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXNvbHZlKCBzdWNjZXNzZnVsQ2xvc2UgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNhY2hlQ2FyZFNlcnZpY2VCYXNlID0gc2VydmljZUluZGV4ID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgc2VydmljZUluZGV4ID0gc2VydmljZUluZGV4IHx8IDA7XHJcbiAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0dBVFRdOiBDYWNoZSBDYXJkIFNlcnZpY2UgUmVxdWVzdCB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoIXRoaXMuZ2F0dFNlcnZlcikgPyBcclxuICAgICAgICAgICAgcmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGdhdHRTZXJ2ZXJOb3RDb25uZWN0ZWQpIClcclxuICAgICAgICAgICAgOiB0aGlzLmZpbmRQcmltYXJ5U2VydmljZShzZXJ2aWNlSW5kZXgpXHJcbiAgICAgICAgICAgIC50aGVuKHNlcnZpY2UgPT4gcmVzb2x2ZShzZXJ2aWNlKSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSlcclxuICAgIH0pO1xyXG5cclxuICAgIGZpbmRQcmltYXJ5U2VydmljZSA9IHNlcnZpY2VJbmRleCA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT5cclxuICAgICAgICB0aGlzLmdhdHRTZXJ2ZXIuZ2V0UHJpbWFyeVNlcnZpY2UodGhpcy5kZXZpY2VVVUlEc1tzZXJ2aWNlSW5kZXhdKVxyXG4gICAgICAgIC50aGVuKHNlcnZpY2UgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRTZXJ2aWNlID0gc2VydmljZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtHQVRUXTogU3VjY2VzcyEgR0FUVCBDYXJkIFNlcnZpY2UgcmV0cmlldmVkIGFuZCBjYWNoZWQgfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZXZpY2UuYWRkRXZlbnRMaXN0ZW5lcignZ2F0dHNlcnZlcmRpc2Nvbm5lY3RlZCcsIHRoaXMuZGlzY29ubmVjdEhhbmRsZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggc2VydmljZSApO1xyXG4gICAgICAgIH0pLmNhdGNoKCBlcnIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IG5vdEZvdW5kT2JqLmVycm9yQ29kZSAmJiBlcnIubmFtZSA9PT0gbm90Rm91bmRPYmouZXJyb3JOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKCB0aGlzLmRldmljZVVVSURzW3NlcnZpY2VJbmRleCArIDFdICE9PSBcInVuZGVmaW5lZFwiICkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgW0VSUk9SXTogRmFpbGVkIHRvIGNvbm5lY3QuIFVVSUQ6ICR7dGhpcy5kZXZpY2VVVUlEc1sgc2VydmljZUluZGV4IF19IGlzIG5vdCB2YWxpZCBmb3IgdGhpcyBkZXZpY2UuIFRyeWluZyBhZ2FpbiB3aXRoIFVVSUQ6ICR7dGhpcy5kZXZpY2VVVUlEc1sgc2VydmljZUluZGV4ICsgMSBdfSB8fCAke25ldyBEYXRlKCl9YFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCB0aGlzLmZpbmRQcmltYXJ5U2VydmljZShzZXJ2aWNlSW5kZXggKyAxKSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0VSUk9SXTogRmFpbGVkIHRvIHJldHJpZXZlIENhcmQgU2VydmljZSAtIFVVSUQ6ICR7dGhpcy5kZXZpY2VVVUlEc1sgc2VydmljZUluZGV4IF19IGlzIG5vdCB2YWxpZCBmb3IgdGhpcyBkZXZpY2UuIHx8ICR7bmV3IERhdGUoKX1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoIGVyciApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgY29ubmVjdEFuZENhY2hlID0gb3B0aW9uYWxJbmRleCA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCB0cnlUb0Nvbm5lY3QgPSB0cnlDb3VudCA9PiBuZXcgUHJvbWlzZSggKGlubmVyUmVzb2x2ZSwgaW5uZXJSZWplY3QpID0+ICh0cnlDb3VudCA8IDQpID8gXHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdCgpXHJcbiAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5jYWNoZUNhcmRTZXJ2aWNlQmFzZShvcHRpb25hbEluZGV4KSApXHJcbiAgICAgICAgICAgICAgICAudGhlbiggY2FjaGVTZXJ2aWNlUmVzcCA9PiBpbm5lclJlc29sdmUoIGNhY2hlU2VydmljZVJlc3AgKVxyXG4gICAgICAgICAgICAgICAgKS5jYXRjaCggZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IGFwaU5ldHdvcmtFcnIuY29kZSAmJiBlcnIubmFtZSA9PT0gYXBpTmV0d29ya0Vyci5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbRVJST1JdOiBFcnJvciBjYWNoaW5nIEdBVFQgU2VydmljZSAtIENsZWFyaW5nIGNhY2hlIGFuZCB0cnlpbmcgYWdhaW4uIHx8ICR7bmV3IERhdGUoKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJHYXR0Q2FjaGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbm5lclJlc29sdmUoIHRyeVRvQ29ubmVjdCggdHJ5Q291bnQgKyAxICkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0VSUk9SXTogRmFpbGVkIHRvIGNhY2hlIEdBVFQgU2VydmljZSB8fCAke25ldyBEYXRlKCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbm5lclJlamVjdCggZXJyIClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgIGlubmVyUmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGdldFNlcnZpY2VGYWlsKSApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRyeVRvQ29ubmVjdCgwKS50aGVuKFxyXG4gICAgICAgICAgICBjYWNoZVNlcnZpY2VSZXNwID0+IHJlc29sdmUoIGNhY2hlU2VydmljZVJlc3ApXHJcbiAgICAgICAgKS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2VuZEFycGNCYXNlID0gYXJwY1Jlc3AgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5kZXZpY2UuZ2F0dC5jb25uZWN0ZWQpXHJcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZGV2aWNlTm90T3BlbikgKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcnBjUmVzcCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGFycGNSZXNwICE9PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCggdGhpcy5idWlsZERldmljZUVyciggd3JvbmdJbnB1dFR5cGVzKFsnc3RyaW5nJywgJ2FycmF5IG9mIG51bWJlcnMnXSwgXCJBUlBDXCIpICkgKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YUxlbiA9ICh0eXBlb2YgYXJwY1Jlc3AgPT09ICdzdHJpbmcnKSA/IChhcnBjUmVzcC5sZW5ndGggLyAyKSA6IGFycGNSZXNwLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBpbnB1dERhdGEgPSAodHlwZW9mIGFycGNSZXNwID09PSAnc3RyaW5nJykgPyB0aGlzLmhleFRvQnl0ZXMoYXJwY1Jlc3ApIDogYXJwY1Jlc3A7XHJcblxyXG4gICAgICAgIHJldHVybiByZXNvbHZlKFxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkQXJwY0NvbW1hbmQoZGF0YUxlbiwgaW5wdXREYXRhKVxyXG4gICAgICAgIClcclxuICAgIH0pO1xyXG5cclxuICAgIG9uRGVzdHJveUhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGV2aWNlICYmIHRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGV2aWNlLmdhdHQuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHdhaXRGb3JEZXZpY2VSZXNwb25zZSA9IG1heFRyaWVzID0+IG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcclxuXHJcbiAgICAgICAgY29uc3Qgd2FpdEZvclJlc3BvbnNlID0gdHJ5TnVtYmVyID0+IFxyXG4gICAgICAgICAgICAodHJ5TnVtYmVyIDwgbWF4VHJpZXMpID8gXHJcbiAgICAgICAgICAgICAgICAodGhpcy5jb21tYW5kUmVzcEF2YWlsYWJsZSkgPyByZXNvbHZlKCB0cnVlICkgOiBzZXRUaW1lb3V0KCgpID0+IHdhaXRGb3JSZXNwb25zZSh0cnlOdW1iZXIgKyAxKSwgMjAwKVxyXG4gICAgICAgICAgICA6IHJlc29sdmUoIGZhbHNlICk7XHJcblxyXG4gICAgICAgIHdhaXRGb3JSZXNwb25zZSgwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRpc2Nvbm5lY3RIYW5kbGVyID0gZXZlbnQgPT4ge1xyXG4gICAgICAgIHRoaXMuZ2F0dFNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jYXJkU2VydmljZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtEaXNjb25uZWN0ZWRdOiBEaXNjb25uZWN0IGV2ZW50LiBSZXR1cm5pbmcgZXZlbnQgdG8gdXNlciwgcmVtb3ZpbmcgZGV2aWNlIGxpc3RlbmVyIHx8ICR7bmV3IERhdGUoKX1gKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0Q2FsbGJhY2soZXZlbnQpO1xyXG4gICAgICAgIHRoaXMuZGV2aWNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2dhdHRzZXJ2ZXJkaXNjb25uZWN0ZWQnLCB0aGlzLmRpc2Nvbm5lY3RIYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0RldmljZUNvbm5lY3RlZCA9ICgpID0+ICh0aGlzLmRldmljZS5nYXR0KSA/IHRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkIDogZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERldmljZUJhc2U7IiwiaW1wb3J0IERldmljZUJhc2UgZnJvbSAnLi4vZGV2aWNlcy9iYXNlQ2xhc3MnO1xyXG5pbXBvcnQge1xyXG4gICAgbWlzc2luZ1JlcXVpcmVkRmllbGRzLFxyXG4gICAgd3JvbmdJbnB1dFR5cGVzLFxyXG4gICAgd3JvbmdJbnB1dFZhbHVlc1xyXG59IGZyb20gJy4uL2Vycm9ySGFuZGxlci9lcnJDb25zdGFudHMnO1xyXG5cclxuY2xhc3MgUGluVmFsaWRhdGlvbiBleHRlbmRzIERldmljZUJhc2Uge1xyXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBjYWxsQmFja3MpIHtcclxuICAgICAgICBzdXBlcihkZXZpY2UsIGNhbGxCYWNrcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGVBbW91bnQgPSBwYXJlbnRSZWplY3QgPT4gKGFtb3VudCwgcHJvcE5hbWUsIGRlZmF1bHRWYWwpID0+IHtcclxuICAgICAgICBzd2l0Y2godHlwZW9mKGFtb3VudCkpIHtcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoYW1vdW50LnRvU3RyaW5nKCkubGVuZ3RoID4gMTIpID8gcGFyZW50UmVqZWN0KHdyb25nSW5wdXRWYWx1ZXMoWydudW1iZXIgb2YgMTIgZGlnaXRzIG9yIGxlc3MnLCAnYnl0ZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiBhbW91bnQgKDYgYnl0ZXMsIG4xMiBmb3JtYXQpJ10sIGFtb3VudCkpIFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jb252ZXJ0TnVtVG9BbW91bnQoYW1vdW50KTtcclxuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoYW1vdW50Lmxlbmd0aCA9PT0gNikgPyBhbW91bnQgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBwYXJlbnRSZWplY3Qod3JvbmdJbnB1dFZhbHVlcyhbJzEyIGRpZ2l0IG9yIGxlc3MgbnVtYmVyJywgJ2J5dGUgYXJyYXkgcmVwcmVzZW50YXRpb24gb2YgYW1vdW50ICg2IGJ5dGVzLCBuMTIgZm9ybWF0KSddLCBwcm9wTmFtZSkpO1xyXG4gICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YoZGVmYXVsdFZhbCkgPT09ICd1bmRlZmluZWQnKSA/IHBhcmVudFJlamVjdChtaXNzaW5nUmVxdWlyZWRGaWVsZHMocHJvcE5hbWUpKSA6IGRlZmF1bHRWYWw7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50UmVqZWN0KHdyb25nSW5wdXRUeXBlcyhbJ251bWJlciBvZiAxMiBkaWdpdHMgb3IgbGVzcycsICdieXRlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIGFtb3VudCAoNiBieXRlcywgbjEyIGZvcm1hdCknXSwgcHJvcE5hbWUpKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFsaWRhdGVSZXF1aXJlZElucHV0cyA9IHZhbGlkYXRpb25Db25maWcgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRhdGlvbkNvbmZpZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgeyBwcm9wLCB2YWxpZFR5cGVzLCB2YWxpZFZhbHVlcywgY29uZGl0aW9uLCBwcm9wTmFtZSB9ID0gdmFsaWRhdGlvbkNvbmZpZ1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YocHJvcCkgPT09ICd1bmRlZmluZWQnICYmIGNvbmRpdGlvbilcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobWlzc2luZ1JlcXVpcmVkRmllbGRzKHByb3BOYW1lKSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdHlwZUlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5keCA9IDA7IGluZHggPCB2YWxpZFR5cGVzLmxlbmd0aDsgaW5keCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHByb3ApID09PSB2YWxpZFR5cGVzW2luZHhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZUlzVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXR5cGVJc1ZhbGlkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCh3cm9uZ0lucHV0VHlwZXModmFsaWRUeXBlcywgcHJvcE5hbWUpKTsgXHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mKHZhbGlkVmFsdWVzKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWxzQXJlVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB2YWxpZFZhbHVlcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcC50b0xvd2VyQ2FzZSgpID09PSB2YWxpZFZhbHVlc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsc0FyZVZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdmFsc0FyZVZhbGlkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3Qod3JvbmdJbnB1dFZhbHVlcyh2YWxpZFZhbHVlcywgcHJvcE5hbWUpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGluVmFsaWRhdGlvbjsiLCJpbXBvcnQgUGluVmFsaWRhdGlvbiBmcm9tICcuL3BpblZhbGlkYXRpb24nO1xyXG5cclxuY2xhc3MgUGluVXRpbHMgZXh0ZW5kcyBQaW5WYWxpZGF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgY2FsbEJhY2tzKSB7XHJcbiAgICAgICAgc3VwZXIoZGV2aWNlLCBjYWxsQmFja3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY2ltYWxUb0JpbmFyeSA9IG51bSA9PiB7XHJcbiAgICAgICAgbGV0IGJpbmFyeU51bSA9IChudW0gPj4+IDApLnRvU3RyaW5nKDIpO1xyXG4gICAgICAgIHJldHVybiBcIjAwMDAwMDAwXCIuc3Vic3RyKGJpbmFyeU51bS5sZW5ndGgpICsgYmluYXJ5TnVtO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cmluZ051bVRvQm9vbCA9IHN0cmluZ051bSA9PiAhIStzdHJpbmdOdW07XHJcblxyXG4gICAgZmluZE51bGxUZXJtaW5hdGVkU3RyaW5nID0gbnVsbFRlcm1pbmF0ZWRBcnJheSA9PiB7XHJcbiAgICAgICAgbGV0IHRhcmdldEluZGV4O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bGxUZXJtaW5hdGVkQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG51bGxUZXJtaW5hdGVkQXJyYXlbaV0gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChudWxsVGVybWluYXRlZEFycmF5W2kgKyAxXSA9PT0gMCAmJiBudWxsVGVybWluYXRlZEFycmF5W2kgKyAyXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICh0YXJnZXRJbmRleCkgPyBcclxuICAgICAgICAgICAgdGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhudWxsVGVybWluYXRlZEFycmF5LnNsaWNlKDIsIHRhcmdldEluZGV4KSApIFxyXG4gICAgICAgICAgICA6IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcobnVsbFRlcm1pbmF0ZWRBcnJheS5zbGljZSgyKSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRQaW5MZW5ndGggPSAobWF4TGVuLCBtaW5MZW4pID0+IHtcclxuICAgICAgICBsZXQgbWF4TGVuZ3RoID0gMTI7XHJcbiAgICAgICAgbGV0IG1pbkxlbmd0aCA9IDQ7XHJcblxyXG4gICAgICAgIGlmIChtYXhMZW4pIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXhMZW4gPT09ICdudW1iZXInICYmIG1heExlbiA8PSAxMilcclxuICAgICAgICAgICAgICAgIG1heExlbmd0aCA9IChtYXhMZW4gPj0gNCkgPyBtYXhMZW4gOiAxMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChtaW5MZW4pIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtaW5MZW4gPT09ICdudW1iZXInICYmIG1pbkxlbiA+PTQpXHJcbiAgICAgICAgICAgICAgICBtaW5MZW5ndGggPSAobWluTGVuIDw9IG1heExlbmd0aCkgPyBtaW5MZW4gOiA0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGAke21heExlbmd0aC50b1N0cmluZygxNil9JHttaW5MZW5ndGgudG9TdHJpbmcoMTYpfWAsIDE2KTtcclxuICAgIH1cclxuXHJcbiAgICBidWlsZFBpbk9wdGlvbnNCeXRlID0gKGxhbmd1YWdlU2VsZWN0aW9uLCB3YWl0TWVzc2FnZSwgdmVyaWZ5UGluLCBwaW5CbG9ja0Zvcm1hdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGxhbmd1YWdlUHJvbXB0cyA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IFwiMDBcIixcclxuICAgICAgICAgICAgXCJlbmdsaXNoZnJlbmNoXCI6IFwiMDFcIixcclxuICAgICAgICAgICAgXCJhbGxzcGVjaWZpZWRcIjogXCIxMFwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxhbmd1YWdlU2VsZWN0aW9uID0gKGxhbmd1YWdlU2VsZWN0aW9uKSA/IChsYW5ndWFnZVByb21wdHNbIGxhbmd1YWdlU2VsZWN0aW9uLnRvTG93ZXJDYXNlKCkgXSB8fCBsYW5ndWFnZVByb21wdHMuZGlzYWJsZWQpIDogbGFuZ3VhZ2VQcm9tcHRzLmRpc2FibGVkO1xyXG4gICAgICAgIHdhaXRNZXNzYWdlID0gKHR5cGVvZiB3YWl0TWVzc2FnZSA9PT0gJ2Jvb2xlYW4nKSA/IHdhaXRNZXNzYWdlIDogdHJ1ZTtcclxuICAgICAgICB2ZXJpZnlQaW4gPSAodHlwZW9mIHdhaXRNZXNzYWdlID09PSAnYm9vbGVhbicpID8gd2FpdE1lc3NhZ2UgOiB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHBpbkJsb2NrRm9ybWF0ID0gKHBpbkJsb2NrRm9ybWF0ICYmIHR5cGVvZihwaW5CbG9ja0Zvcm1hdCkgPT09ICdzdHJpbmcnKSA/IFxyXG4gICAgICAgICAgICAgICAgKHBpbkJsb2NrRm9ybWF0LnRvTG93ZXJDYXNlKCkgPT09ICdpc28wJykgPyAnMCcgOiAnMScgXHJcbiAgICAgICAgICAgIDogJzAnO1xyXG5cclxuICAgICAgICBjb25zdCBiaW5hcnlSZXN1bHQgPSBgMDAwJHtsYW5ndWFnZVNlbGVjdGlvbn0keygod2FpdE1lc3NhZ2UpID8gJzEnIDogJzAnKX0keygodmVyaWZ5UGluKSA/ICcxJyA6ICcwJyl9JHtwaW5CbG9ja0Zvcm1hdH1gO1xyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtQaW5PcHRpb25zQnl0ZV06IGJpbmFyeSBzdHJpbmcgcmVwcmVzZW50YXRpb246ICR7YmluYXJ5UmVzdWx0fSB8fCBieXRlIHJlc3VsdDogJHtwYXJzZUludChiaW5hcnlSZXN1bHQsIDIpfWApXHJcblxyXG4gICAgICAgIHJldHVybiBwYXJzZUludChiaW5hcnlSZXN1bHQsIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkTjJGb3JtYXQgPSBudW0gPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0cmluZ051bSA9IG51bS50b1N0cmluZygpO1xyXG4gICAgICAgIGNvbnN0IGhleE51bSA9IChzdHJpbmdOdW0ubGVuZ3RoID09PSAyKSA/IHN0cmluZ051bSA6IGAwJHtzdHJpbmdOdW19YDtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBwYXJzZUludChgMHgke2hleE51bVswXX0ke2hleE51bVsxXX1gLCAxNik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBpblV0aWxzOyIsImltcG9ydCBQaW5VdGlscyBmcm9tICcuLi91dGlscy9waW5VdGlscyc7XHJcbmltcG9ydCB7IGNvbmZpZ1N0ciwgdW5rbm93biwgYXNjaWksIHVua25vd25VbmRvYyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XHJcblxyXG5jbGFzcyBQYXJzZVBpbkNvbmZpZyBleHRlbmRzIFBpblV0aWxzIHtcclxuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgY2FsbEJhY2tzKSB7XHJcbiAgICAgICAgc3VwZXIoZGV2aWNlLCBjYWxsQmFja3MpO1xyXG5cclxuICAgICAgICB0aGlzLnRyYWNrRGF0YU9wdGlvbnMgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgXCIwMFwiOiBcIkRpc2FibGVkXCIsXHJcbiAgICAgICAgICAgIFwiMDFcIjogXCJFbmFibGVkXCIsXHJcbiAgICAgICAgICAgIFwiMTFcIjogXCJSZXF1aXJlZFwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZW12TDJDb25maWdPcHRpb25zID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIFwiMDAwMFwiOiBcIk5vIEwyIENhcGFiaWxpdHlcIixcclxuICAgICAgICAgICAgXCIwMDAxXCI6IGAke2NvbmZpZ1N0cn0gQzEgKEVNVkNvIGNlcnRpZmllZClgLFxyXG4gICAgICAgICAgICBcIjAwMTBcIjogYCR7Y29uZmlnU3RyfSBDMmAsXHJcbiAgICAgICAgICAgIFwiMDAxMVwiOiBgJHtjb25maWdTdHJ9IEMzYCxcclxuICAgICAgICAgICAgXCIwMTAwXCI6IGAke2NvbmZpZ1N0cn0gQzQgKEVNVkNvIGNlcnRpZmllZClgLFxyXG4gICAgICAgICAgICBcIjAxMDFcIjogYCR7Y29uZmlnU3RyfSBDNSAoRU1WQ28gY2VydGlmaWVkKWAsXHJcbiAgICAgICAgICAgIFwiMDExMFwiOiBgJHtjb25maWdTdHJ9IEM2YCxcclxuICAgICAgICAgICAgXCIwMTExXCI6IGAke2NvbmZpZ1N0cn0gQzdgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZW5hYmxlZEJyYW5kcyA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICBcIjBcIjogXCJBbGwgY29udGFjbGVzcyBrZXJuYWxzIGVuYWJsZWRcIixcclxuICAgICAgICAgICAgXCIxXCI6IFwiUGF5UGFzcy9NQ0wgc3VwcG9ydCBkaXNhYmxlZFwiLFxyXG4gICAgICAgICAgICBcIjJcIjogXCJwYXlXYXZlIHN1cHBvcnQgZGlzYWJsZWRcIixcclxuICAgICAgICAgICAgXCI0XCI6IFwiRXhwcmVzc3BheSBzdXBwb3J0IGRpc2FibGVkXCIsXHJcbiAgICAgICAgICAgIFwiOFwiOiBcIkQtUEFTIHN1cHBvcnQgZGlzYWJsZWRcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlRGV2aWNlQ29uZmlndXJhdGlvbiA9IGNvbmZpZ0FyciA9PiAoe1xyXG4gICAgICAgIC4uLnRoaXMuZmlyc3REZXZpY2VDb250cm9sQnl0ZSggdGhpcy5kZWNpbWFsVG9CaW5hcnkoY29uZmlnQXJyWzFdKSApLFxyXG4gICAgICAgIC4uLnRoaXMuc2Vjb25kRGV2aWNlQ29udHJvbEJ5dGUoIHRoaXMuZGVjaW1hbFRvQmluYXJ5KGNvbmZpZ0FyclsyXSkgKSxcclxuICAgICAgICAuLi50aGlzLm1hc2tDb25maWd1cmF0aW9uQnl0ZSggdGhpcy5kZWNpbWFsVG9CaW5hcnkoY29uZmlnQXJyWzNdKSApLFxyXG4gICAgICAgIC4uLnRoaXMubXNyQ29uZmlndXJhdGlvbkJ5dGUoIHRoaXMuZGVjaW1hbFRvQmluYXJ5KGNvbmZpZ0Fycls0XSkgKSxcclxuICAgICAgICBtYXNrQ2hhcmFjdGVyOiB0aGlzLmZpbmRNYXNrQ2hhcmFjdGVyKGNvbmZpZ0Fycls1XSksXHJcbiAgICAgICAgbGVhZGluZ1VubWFza2VkTGVuZ3RoOiBwYXJzZUludCh0aGlzLmRlY2ltYWxUb0JpbmFyeSggY29uZmlnQXJyWzZdKS5zbGljZSg0KSwgMiksXHJcbiAgICAgICAgdHJhaWxpbmdVbm1hc2tlZExlbmd0aDogcGFyc2VJbnQodGhpcy5kZWNpbWFsVG9CaW5hcnkoIGNvbmZpZ0Fycls2XSkuc2xpY2UoMCwgNCksIDIpLFxyXG4gICAgICAgIGVtdkwySWNzQ29uZmlnOiAodGhpcy5lbXZMMkNvbmZpZ09wdGlvbnNbIHRoaXMuZGVjaW1hbFRvQmluYXJ5KGNvbmZpZ0Fycls3XSkuc2xpY2UoMCwgNCkgXSB8fCBgJHt1bmtub3duVW5kb2N9IEVNViBMMiBJQ1MgJHtjb25maWdTdHJ9YCksXHJcbiAgICAgICAgLi4udGhpcy5jb250YWN0bGVzc0NvbmZpZyggY29uZmlnQXJyWzhdIClcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhY3RsZXNzQ29uZmlnID0gY29udGFjdGxlc3NCeXRlID0+ICh7XHJcbiAgICAgICAgY29udGFjdGxlc3NTdXBwb3J0OiB0aGlzLmVuYWJsZWRCcmFuZHNbIHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoW2NvbnRhY3RsZXNzQnl0ZV0pWzBdIF0sXHJcbiAgICAgICAgY29udGFjdGxlc3NHdWlDb250cm9sczogKHRoaXMuZGVjaW1hbFRvQmluYXJ5KGNvbnRhY3RsZXNzQnl0ZSlbNV0gPT09IFwiMVwiKSA/IFwiQWx0ZXJuYXRlXCIgOiBcIlN0YW5kYXJkXCJcclxuICAgIH0pXHJcblxyXG4gICAgZmluZE1hc2tDaGFyYWN0ZXIgPSBudW1DaGFyID0+IHtcclxuICAgICAgICBpZiAobnVtQ2hhciA9PT0gNDgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2FzY2lpfTogJzAnYFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbnVtQ2hhclRvSGV4ID0gdGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhbbnVtQ2hhcl0pO1xyXG4gICAgICAgICAgICBjb25zdCBudW1DaGFyVG9Bc2NpaSA9IHRoaXMuaGV4VG9Bc2NpaSggbnVtQ2hhclRvSGV4ICk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKG51bUNoYXJUb0FzY2lpKSA/IGAke2FzY2lpfTogJyR7bnVtQ2hhclRvQXNjaWl9J2AgXHJcbiAgICAgICAgICAgICAgICA6IGBOb24tJHthc2NpaX0gY2hhcmFjdGVyIGluIGhleDogJyR7bnVtQ2hhclRvSGV4fSdgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpcnN0RGV2aWNlQ29udHJvbEJ5dGUgPSBkZXZpY2VDb250cm9sQnl0ZSA9PiAoe1xyXG4gICAgICAgIHJlcXVpcmVNdXR1YWxBdXRoOiB0aGlzLnN0cmluZ051bVRvQm9vbChkZXZpY2VDb250cm9sQnl0ZVswXSksXHJcbiAgICAgICAgbXNyRW5jcnlwdGlvblZhcmlhbnQ6IChkZXZpY2VDb250cm9sQnl0ZVsxXSA9PT0gXCIxXCIpID8gXCJEQVRBXCIgOiBcIlBJTlwiLFxyXG4gICAgICAgIGlzQ2xlYXJUZXh0RW5hYmxlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woZGV2aWNlQ29udHJvbEJ5dGVbM10pLFxyXG4gICAgICAgIGlzQmVlcGVyTW9kZUVuYWJsZWQ6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKGRldmljZUNvbnRyb2xCeXRlWzRdKSxcclxuICAgICAgICBpc0JpdG1hcExvY2tlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woZGV2aWNlQ29udHJvbEJ5dGVbNl0pLFxyXG4gICAgICAgIGlzQ29uZmlndXJhdGlvbkxvY2tlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woZGV2aWNlQ29udHJvbEJ5dGVbN10pXHJcbiAgICB9KTtcclxuXHJcbiAgICBzZWNvbmREZXZpY2VDb250cm9sQnl0ZSA9IGRldmljZUN0cmxCeXRlID0+ICh7XHJcbiAgICAgICAgaXNBcnBjTWFjRW5hYmxlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woZGV2aWNlQ3RybEJ5dGVbMV0pLFxyXG4gICAgICAgIGlzRmluYW5jaWFsSWNjQ2FyZFR5cGVSZXBvcnRpbmdFbmFibGVkOiB0aGlzLnN0cmluZ051bVRvQm9vbChkZXZpY2VDdHJsQnl0ZVsyXSksXHJcbiAgICAgICAgYXJxY0JhdGNoRGF0YU91dHB1dEZvcm1hdDogKGRldmljZUN0cmxCeXRlWzNdID09PSBcIjFcIikgPyBcIlJlc2VydmVkIEZvcm1hdFwiIDogXCJEeW5hUHJvIEZvcm1hdFwiXHJcbiAgICB9KTtcclxuXHJcbiAgICBtYXNrQ29uZmlndXJhdGlvbkJ5dGUgPSBtYXNrQ29uZmlnQnl0ZSA9PiAoe1xyXG4gICAgICAgIGlzSXNvTWFza0VuYWJsZWQ6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKG1hc2tDb25maWdCeXRlWzddKSxcclxuICAgICAgICBpc0NoZWNrRGlnaXRFbmFibGVkOiB0aGlzLnN0cmluZ051bVRvQm9vbChtYXNrQ29uZmlnQnl0ZVs2XSksXHJcbiAgICAgICAgaXNNczJQb2ludDBFbmFibGVkOiAoIG1hc2tDb25maWdCeXRlLnNsaWNlKDQsIDYpICE9PSBcIjAwXCIpXHJcbiAgICB9KTtcclxuXHJcbiAgICBtc3JDb25maWd1cmF0aW9uQnl0ZSA9IG1zckNvbmZpZ0J5dGUgPT4gKHtcclxuICAgICAgICBpc0FBTVZBY2FyZEVuYWJsZWQ6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKG1zckNvbmZpZ0J5dGVbN10pLFxyXG4gICAgICAgIHRyYWNrM0RhdGE6ICggdGhpcy50cmFja0RhdGFPcHRpb25zWyBtc3JDb25maWdCeXRlLnNsaWNlKDQsIDYpIF0gfHwgdW5rbm93biApLFxyXG4gICAgICAgIHRyYWNrMkRhdGE6ICggdGhpcy50cmFja0RhdGFPcHRpb25zWyBtc3JDb25maWdCeXRlLnNsaWNlKDIsIDQpIF0gfHwgdW5rbm93biApLFxyXG4gICAgICAgIHRyYWNrMURhdGE6ICggdGhpcy50cmFja0RhdGFPcHRpb25zWyBtc3JDb25maWdCeXRlLnNsaWNlKDAsIDIpIF0gfHwgdW5rbm93biApLFxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFyc2VQaW5Db25maWc7XHJcbiIsImltcG9ydCBQYXJzZVBpbkNvbmZpZyBmcm9tICcuL3BpbkNvbmZpZ3VyYXRpb24nO1xyXG5pbXBvcnQgeyB1bmtub3duLCB1bmtub3duVW5kb2MgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xyXG5cclxuY2xhc3MgUGluU3RhdHVzUGFyc2VyIGV4dGVuZHMgUGFyc2VQaW5Db25maWcge1xyXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBjYWxsQmFja3MpIHtcclxuICAgICAgICBzdXBlcihkZXZpY2UsIGNhbGxCYWNrcyk7XHJcblxyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uU3RhdHVzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIDB4MDA6IFwiT2tcIixcclxuICAgICAgICAgICAgMHgwMTogXCJDYXJkaG9sZGVyIENhbmNlbFwiLFxyXG4gICAgICAgICAgICAweDAyOiBcIlRpbWVvdXRcIixcclxuICAgICAgICAgICAgMHgwMzogXCJIb3N0IENhbmNlbFwiLFxyXG4gICAgICAgICAgICAweDA0OiBcIlZlcmlmeSBmYWlsXCIsXHJcbiAgICAgICAgICAgIDB4MDU6IFwiS2V5cGFkIFNlY3VyaXR5XCIsXHJcbiAgICAgICAgICAgIDB4MDY6IFwiQ2FsaWJyYXRpb24gRG9uZVwiLFxyXG4gICAgICAgICAgICAweDA3OiBcIldyaXRlIHdpdGggZHVwbGljYXRlIFJJRCBhbmQgaW5kZXhcIixcclxuICAgICAgICAgICAgMHgwODogXCJXcml0ZSB3aXRoIGNvcnJ1cHRlZCBLZXlcIixcclxuICAgICAgICAgICAgMHgwOTogXCJDQSBQdWJsaWMgS2V5IHJlYWNoZWQgbWF4aW11bSBjYXBhY2l0eVwiLFxyXG4gICAgICAgICAgICAweDBBOiBcIkNBIFB1YmxpYyBLZXkgcmVhZCB3aXRoIGludmFsaWQgUklEIG9yIEluZGV4XCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5BQ0tTVFMgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgMHgwMDogXCJPa1wiLFxyXG4gICAgICAgICAgICAweDE1OiBcIlJJRCBlcnJvci9JbmRleCBub3QgZm91bmRcIixcclxuICAgICAgICAgICAgMHg4MDogXCJEZXZpY2UgRXJyb3I6IGVycm9yLCB0YW1wZXIsIG1pc3NpbmcgY2VydGlmaWNhdGUgb3IgaW5jb3JyZWN0IHNpZ25hdHVyZSBkZXRlY3RlZFwiLFxyXG4gICAgICAgICAgICAweDgxOiBcIkRldmljZSBub3QgaWRsZVwiLFxyXG4gICAgICAgICAgICAweDgyOiBcIkRhdGEgRXJyb3Igb3IgQmFkIFBhcmFtYXRlcihzKVwiLFxyXG4gICAgICAgICAgICAweDgzOiBcIkxlbmd0aCBFcnJvcjogZGF0YSBzaXplIGlzIGVpdGhlciB0b28gc21hbGwsIHRvbyBsYXJnZSwgaW5jb21wbGV0ZSwgb3IgT0lEIG9mIHRoZSBjZXJ0IGRvZXNuJ3QgbWF0Y2ggcHJlZGVmaW5lZCBPSURcIixcclxuICAgICAgICAgICAgMHg4NDogXCJQQU4gRXhpc3RzXCIsXHJcbiAgICAgICAgICAgIDB4ODU6IFwiTWlzc2luZyBvciBJbmNvcnJlY3QgS2V5XCIsXHJcbiAgICAgICAgICAgIDB4ODY6IFwiRGV2aWNlIEJ1c3lcIixcclxuICAgICAgICAgICAgMHg4NzogXCJEZXZpY2UgTG9ja2VkXCIsXHJcbiAgICAgICAgICAgIDB4ODg6IFwiQXV0aCByZXF1aXJlZFwiLFxyXG4gICAgICAgICAgICAweDg5OiBcIkJhZCBBdXRoXCIsXHJcbiAgICAgICAgICAgIDB4OEE6IFwiRGV2aWNlIE5vdCBBdmFpbGFibGVcIixcclxuICAgICAgICAgICAgMHg4QjogXCJBbW91bnQgTmVlZGVkIC0gSWYgUElOIGFtb3VudCBpcyByZXF1aXJlZCwgbm8gYW1vdW50IGhhcyBiZWVuIHNldFwiLFxyXG4gICAgICAgICAgICAweDhDOiBcIkJhdHRlcnkgaXMgY3JpdGljYWxseSBsb3dcIixcclxuICAgICAgICAgICAgMHg4RDogXCJEZXZpY2UgaXMgcmVzZXR0aW5nXCIsXHJcbiAgICAgICAgICAgIDB4OTA6IFwiQ2VydGlmaWNhdGUgZG9lcyBub3QgZXhpc3RcIixcclxuICAgICAgICAgICAgMHg5MTogXCJFeHBpcmVkIChDZXJ0L0NSTClcIixcclxuICAgICAgICAgICAgMHg5MjogXCJJbnZhbGlkIChDZXJ0L0NSTC9NZXNzYWdlKVwiLFxyXG4gICAgICAgICAgICAweDkzOiBcIlJldm9rZWQgKENlcnQvQ1JMKVwiLFxyXG4gICAgICAgICAgICAweDk0OiBcIkNSTCBkb2VzIG5vdCBleGlzdFwiLFxyXG4gICAgICAgICAgICAweDk1OiBcIkNlcnRpZmljYXRlIGV4aXN0c1wiLFxyXG4gICAgICAgICAgICAweDk2OiBcIkR1cGxpY2F0ZSBLU04vS2V5XCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5waW5Db21tYW5kSWRzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIDB4MDE6IFwicmVzcG9uc2VBQ0tcIixcclxuICAgICAgICAgICAgMHgwMjogXCJjbGVhclNlc3Npb25cIixcclxuICAgICAgICAgICAgMHgwMzogXCJzd2lwZVwiLFxyXG4gICAgICAgICAgICAweDA0OiBcInJlcXVlc3RQaW5FbnRyeVwiLFxyXG4gICAgICAgICAgICAweDA1OiBcImNhbmNlbENvbW1hbmRcIixcclxuICAgICAgICAgICAgMHgwNjogXCJyZXF1ZXN0Q2FyZGhvbGRlclNlbGVjdGlvblwiLFxyXG4gICAgICAgICAgICAweDA3OiBcImRpc3BsYXlNZXNzYWdlXCIsXHJcbiAgICAgICAgICAgIDB4MDg6IFwicmVxdWVzdERldmljZVN0YXR1c1wiLFxyXG4gICAgICAgICAgICAweDA5OiBcInJlcXVlc3REZXZpY2VDb25maWd1cmF0aW9uXCIsXHJcbiAgICAgICAgICAgIDB4MEE6IFwicmVxdWVzdE1zckRhdGFcIixcclxuICAgICAgICAgICAgMHgwQjogXCJnZXRDaGFsbGVuZ2VcIixcclxuICAgICAgICAgICAgMHgwNzogXCJkaXNwbGF5TWVzc2FnZVwiLFxyXG4gICAgICAgICAgICAweEEyOiBcImVtdlRyYW5zYWN0aW9uU3RhdHVzXCIsXHJcbiAgICAgICAgICAgIDB4QUI6IFwicmVxdWVzdEVtdkRhdGFcIixcclxuICAgICAgICAgICAgMHgxQTogXCJyZXF1ZXN0RGV2aWNlSW5mb1wiLFxyXG4gICAgICAgICAgICAweDEwOiBcInNlbmRCaWdCbG9ja0RhdGFcIixcclxuICAgICAgICAgICAgMHhBMDogXCJyZXF1ZXN0VGlwT3JDYXNoYmFja1wiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FyZFR5cGVzRW51bSA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICAweDAwOiBcIk90aGVyXCIsXHJcbiAgICAgICAgICAgIDB4MDE6IFwiRmluYW5jaWFsXCIsXHJcbiAgICAgICAgICAgIDB4MDI6IFwiQUFNVkFcIixcclxuICAgICAgICAgICAgMHgwMzogXCJNYW51YWxcIixcclxuICAgICAgICAgICAgMHgwNDogXCJVbmtub3duXCIsXHJcbiAgICAgICAgICAgIDB4MDU6IFwiSUNDXCIsXHJcbiAgICAgICAgICAgIDB4MDY6IFwiQ29udGFjdGxlc3MgSUNDIC0gRU1WXCIsXHJcbiAgICAgICAgICAgIDB4MDc6IFwiRmluYW5jaWFsIE1TUiArIElDQ1wiLFxyXG4gICAgICAgICAgICAweDA4OiBcIkNvbnRhY3RsZXNzIElDQyAtIE1TRFwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZGV2aWNlU3RhdGUgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgMHgwMDogXCJJZGxlXCIsXHJcbiAgICAgICAgICAgIDB4MDE6IFwiU2Vzc2lvblwiLFxyXG4gICAgICAgICAgICAweDAyOiBcIldhaXQgRm9yIENhcmRcIixcclxuICAgICAgICAgICAgMHgwMzogXCJXYWl0IEZvciBQSU5cIixcclxuICAgICAgICAgICAgMHgwNDogXCJXYWl0IEZvciBTZWxlY3Rpb25cIixcclxuICAgICAgICAgICAgMHgwNTogXCJEaXNwbGF5aW5nIE1lc3NhZ2VcIixcclxuICAgICAgICAgICAgMHgwNjogXCJUZXN0IChSZXNlcnZlZCBmb3IgZnV0dXJlIHVzZSlcIixcclxuICAgICAgICAgICAgMHgwNzogXCJNYW51YWwgQ2FyZCBFbnRyeVwiLFxyXG4gICAgICAgICAgICAweDA5OiBcIldhaXQgQ2FyZGhvbGRlciBFbnRyeVwiLFxyXG4gICAgICAgICAgICAweDBBOiBcIkNoaXAgQ2FyZFwiLFxyXG4gICAgICAgICAgICAweDBCOiBcIklDQyBLZXJuZWwgVGVzdFwiLFxyXG4gICAgICAgICAgICAweDBDOiBcIkVNViBUcmFuc2FjdGlvblwiLFxyXG4gICAgICAgICAgICAweDBEOiBcIlNob3cgUEFOXCIsXHJcbiAgICAgICAgICAgIDB4MUY6IFwiV2FpdCBmb3IgVGlwIFNlbGVjdGlvblwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FyZERhdGFJZHMgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgMHgwMTogXCJ0cmFjazFcIixcclxuICAgICAgICAgICAgMHgwMjogXCJ0cmFjazJcIixcclxuICAgICAgICAgICAgMHgwMzogXCJ0cmFjazNcIixcclxuICAgICAgICAgICAgMHgwNDogXCJlbmNyeXB0ZWRUcmFjazFcIixcclxuICAgICAgICAgICAgMHgwNTogXCJlbmNyeXB0ZWRUcmFjazJcIixcclxuICAgICAgICAgICAgMHgwNjogXCJlbmNyeXB0ZWRUcmFjazNcIixcclxuICAgICAgICAgICAgMHgwNzogXCJtYWduZVByaW50XCIsXHJcbiAgICAgICAgICAgIDB4NDA6IFwiZW5jcnlwdGVkUGFuQW5kRXhwXCIsXHJcbiAgICAgICAgICAgIDB4NDE6IFwic2VyaWFsTnVtYmVyXCIsXHJcbiAgICAgICAgICAgIDB4NjM6IFwia3NuQW5kTWFnbmVQcmludFN0YXR1c1wiLFxyXG4gICAgICAgICAgICAweDY0OiBcIkNCQy1NQUNcIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNhcmRob2xkZXJTdGF0dXNJZHMgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgMHgwMTogXCJXYWl0aW5nIGZvciBhbW91bnQgY29uZmlybWF0aW9uIHNlbGVjdGlvblwiLFxyXG4gICAgICAgICAgICAweDAyOiBcIkFtb3VudCBjb25maXJtYXRpb24gc2VsZWN0ZWRcIixcclxuICAgICAgICAgICAgMHgwMzogXCJXYWl0aW5nIGZvciBtdWx0aS1wYXltZW50IElDQyBBcHBsaWNhdGlvbiBzZWxlY3Rpb25cIixcclxuICAgICAgICAgICAgMHgwNDogXCJJQ0MgQXBwbGljYXRpb24gc2VsZWN0ZWRcIixcclxuICAgICAgICAgICAgMHgwNTogXCJXYWl0aW5nIGZvciBzaWduYXR1cmUgY2FwdHVyZVwiLFxyXG4gICAgICAgICAgICAweDA2OiBcIlNpZ25hdHVyZSBjYXB0dXJlZFwiLFxyXG4gICAgICAgICAgICAweDA3OiBcIldhaXRpbmcgZm9yIGxhbmd1YWdlIHNlbGVjdGlvblwiLFxyXG4gICAgICAgICAgICAweDA4OiBcIkxhbmd1YWdlIHNlbGVjdGVkXCIsXHJcbiAgICAgICAgICAgIDB4MDk6IFwiV2FpdGluZyBmb3IgY3JlZGl0L2RlYml0IHNlbGVjdGlvblwiLFxyXG4gICAgICAgICAgICAweDBBOiBcIkNyZWRpdC9EZWJpdCBzZWxlY3RlZFwiLFxyXG4gICAgICAgICAgICAweDBCOiBcIldhaXRpbmcgZm9yIFBpbiBFbnRyeSBmb3IgSUNDXCIsXHJcbiAgICAgICAgICAgIDB4MEM6IFwiUElOIGVudGVyZWQgZm9yIElDQ1wiLFxyXG4gICAgICAgICAgICAweDBEOiBcIldhaXRpbmcgZm9yIFBpbiBFbnRyeSBmb3IgTVNSXCIsXHJcbiAgICAgICAgICAgIDB4MEU6IFwiUElOIGVudGVyZWQgZm9yIE1TUlwiLFxyXG4gICAgICAgICAgICAweDBGOiBcIldhaXRpbmcgZm9yIHRpcCBzZWxlY3Rpb25cIixcclxuICAgICAgICAgICAgMHgxMDogXCJUaXAgaW50ZXJhY3Rpb24gc2VsZWN0ZWRcIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmJ1ZmZlclR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIDB4MDI6IFwiRGV2aWNlIENlcnRpZmljYXRlXCIsXHJcbiAgICAgICAgICAgIDB4MzI6IFwiU2V0IEJJTiAoTUFDKVwiLFxyXG4gICAgICAgICAgICAweDQyOiBcIkNTUlwiLFxyXG4gICAgICAgICAgICAweEExOiBcIkVNViBkYXRhIGluIFRMViBmb3JtYXQsIFRhZyBEYXRhIChNQUMpXCIsXHJcbiAgICAgICAgICAgIDB4QTI6IFwiUkVTRVJWRURcIixcclxuICAgICAgICAgICAgMHhBMzogXCJSRVNFUlZFRFwiLFxyXG4gICAgICAgICAgICAweEE0OiBcIkVNViBkYXRhIGluIFRMViBmb3JtYXQsIEF1dGhvcml6YXRpb24gUmVxdWVzdCAoQVJRQylcIixcclxuICAgICAgICAgICAgMHhBNTogXCJDQSBQdWJsaWMgS2V5IChNQUMpXCIsXHJcbiAgICAgICAgICAgIDB4QUI6IFwiRU1WIGRhdGEgaW4gVExWIGZvcm1hdCwgQmF0Y2ggRGF0YVwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FyZERhdGFPYmogPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5hcnFjQXJyaXZpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJhdGNoRGF0YUFycml2aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuYXJxY1RvdGFsTGVuID0gMDtcclxuICAgICAgICB0aGlzLmJhdGNoVG90YWxMZW4gPSAwO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnZlcnRTdGF0dXNUb1N0cmluZyA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICAweDAwOiBcIk9rXCIsXHJcbiAgICAgICAgICAgIDB4MDE6IFwiRW1wdHlcIixcclxuICAgICAgICAgICAgMHgwMjogXCJFcnJvclwiLFxyXG4gICAgICAgICAgICAweDA0OiBcIkRpc2FibGVkXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kRW12Q2FyZGhvbGRlclN0YXR1cyA9IGNhcmRIb2xkZXJTdGF0dXNCeXRlID0+ICAoe1xyXG4gICAgICAgIGVtdkNhcmRob2xkZXJTdGF0dXM6ICh0aGlzLmNhcmRob2xkZXJTdGF0dXNJZHNbIGNhcmRIb2xkZXJTdGF0dXNCeXRlIF0gfHwgYCR7dW5rbm93blVuZG9jfSBDYXJkaG9sZGVyIEludGVyYWN0aW9uIFN0YXR1cyBJRDogJHtjYXJkSG9sZGVyU3RhdHVzQnl0ZX1gKVxyXG4gICAgfSk7XHJcblxyXG4gICAgZmluZE9wZXJhdGlvblN0YXR1cyA9IHN0YXR1c0lkID0+ICh7XHJcbiAgICAgICAgb3BlcmF0aW9uU3RhdHVzOiAodGhpcy5vcGVyYXRpb25TdGF0dXNbIHN0YXR1c0lkIF0gfHwgYCR7dW5rbm93blVuZG9jfSBPcGVyYXRpb24gU3RhdHVzYClcclxuICAgIH0pO1xyXG5cclxuICAgIHBhcnNlRGlzcGxheU1lc3NhZ2VEb25lID0gZGlzcGxheVN0YXR1cyA9PiB0aGlzLmZpbmRPcGVyYXRpb25TdGF0dXMoZGlzcGxheVN0YXR1c1syXSk7XHJcblxyXG4gICAgcGFyc2VFbXZDb21wbGV0aW9uID0gY29tbWFuZFJlc3AgPT4ge1xyXG4gICAgICAgIC8vVE9ETzogTW9yZSByZXNlYXJjaCByZXF1aXJlZFxyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtFTVYgQ29tcGxldGlvbl06ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhjb21tYW5kUmVzcCl9YCk7XHJcbiAgICAgICAgcmV0dXJuICh7XHJcbiAgICAgICAgICAgIGVtdkNvbXBsZXRpb25SZXNwb25zZTogY29tbWFuZFJlc3BcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmb3JtYXRTZXJpYWxOdW1iZXIgPSBjb21tYW5kUmVzcCA9PiAodGhpcy5kZXZpY2VTZXJpYWxOdW1iZXIgPSB0aGlzLmhleFRvQXNjaWkoIHRoaXMuZmluZE51bGxUZXJtaW5hdGVkU3RyaW5nKGNvbW1hbmRSZXNwKSApKTtcclxuXHJcbiAgICBoYW5kbGVCaWdCbG9ja0JlZ2luID0gYmlnQmxvY2tEYXRhID0+IHtcclxuICAgICAgICBzd2l0Y2goYmlnQmxvY2tEYXRhWzFdKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMHhBNDpcclxuICAgICAgICAgICAgICAgIHRoaXMuYXJxY0Fycml2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXJxY1RvdGFsTGVuID0gdGhpcy5yZWFkVHdvQnl0ZUxlbmd0aChbIGJpZ0Jsb2NrRGF0YVs1XSwgYmlnQmxvY2tEYXRhWzRdIF0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMHhBQjpcclxuICAgICAgICAgICAgICAgIHRoaXMuYmF0Y2hEYXRhQXJyaXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaFRvdGFsTGVuID0gdGhpcy5yZWFkVHdvQnl0ZUxlbmd0aChbIGJpZ0Jsb2NrRGF0YVs1XSwgYmlnQmxvY2tEYXRhWzRdIF0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMHgxODpcclxuICAgICAgICAgICAgY2FzZSAweDIwOlxyXG4gICAgICAgICAgICBjYXNlIDB4MjE6XHJcbiAgICAgICAgICAgICAgICAvL0RlYnVnIGRhdGEuIElnbm9yZS5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJUeXBlOiAodGhpcy5idWZmZXJUeXBlc1sgYmlnQmxvY2tEYXRhWzFdIF0gfHwgXCJCdWZmZXIgdHlwZSBub3QgZG9jdW1lbnRlZFwiKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVBcnFjQmlnQmxvY2tGaW5pc2ggPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXJxYyA9IHRoaXMuYnVpbGRJbml0aWFsRGF0YUFycmF5KGZhbHNlKTtcclxuICAgICAgICBjb25zdCBkYXRhRm9yQXJxYyA9IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoIGFycWMgKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0FSUUNdOiAke2RhdGFGb3JBcnFjfWApO1xyXG5cclxuICAgICAgICB0aGlzLmNhcmREYXRhT2JqID0ge1xyXG4gICAgICAgICAgICAuLi50aGlzLmNhcmREYXRhT2JqLFxyXG4gICAgICAgICAgICBhcnFjRGF0YTogZGF0YUZvckFycWMsXHJcbiAgICAgICAgICAgIGFycWNEYXRhUGFyc2VkOiB0aGlzLnRsdlBhcnNlcihcclxuICAgICAgICAgICAgICAgIGFycWMuc2xpY2UoMilcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yYXdEYXRhID0ge307XHJcblxyXG4gICAgICAgIHRoaXMuYXJxY0Fycml2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuICghdGhpcy5pc1F1aWNrQ2hpcFRyYW5zYWN0aW9uKSA/IHRoaXMudHJhbnNhY3Rpb25DYWxsYmFjayggdGhpcy5jYXJkRGF0YU9iaiApIDogdm9pZCgwKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVCYXRjaEJpZ0Jsb2NrRmluaXNoID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGJhdGNoID0gdGhpcy5idWlsZEluaXRpYWxEYXRhQXJyYXkoZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IGRhdGFGb3JCYXRjaCA9IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoIGJhdGNoICk7XHJcblxyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtCQVRDSCBEQVRBXTogJHtkYXRhRm9yQmF0Y2h9YCk7XHJcblxyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25IYXNTdGFydGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcnNlZEJhdGNoRGF0YSA9IHRoaXMudGx2UGFyc2VyKFxyXG4gICAgICAgICAgICBiYXRjaC5zbGljZSgyKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGlzU2lnbmF0dXJlUmVxdWlyZWQgPSBwYXJzZWRCYXRjaERhdGEuZmluZCggKHsgdGFnIH0pID0+IHRhZyA9PT0gXCJERkRGNDBcIik7XHJcblxyXG4gICAgICAgIHRoaXMuY2FyZERhdGFPYmogPSAoaXNTaWduYXR1cmVSZXF1aXJlZCkgPyAoe1xyXG4gICAgICAgICAgICAuLi50aGlzLmNhcmREYXRhT2JqLFxyXG4gICAgICAgICAgICBiYXRjaERhdGE6IGRhdGFGb3JCYXRjaCxcclxuICAgICAgICAgICAgYmF0Y2hEYXRhUGFyc2VkOiBwYXJzZWRCYXRjaERhdGEsXHJcbiAgICAgICAgICAgIHNpZ25hdHVyZVJlcXVpcmVkOiAoaXNTaWduYXR1cmVSZXF1aXJlZCA9PT0gMHgwMSlcclxuICAgICAgICB9KSA6ICh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuY2FyZERhdGFPYmosXHJcbiAgICAgICAgICAgIGJhdGNoRGF0YTogZGF0YUZvckJhdGNoLFxyXG4gICAgICAgICAgICBiYXRjaERhdGFQYXJzZWQ6IHBhcnNlZEJhdGNoRGF0YVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnJhd0RhdGEgPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5iYXRjaERhdGFBcnJpdmluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbkNhbGxiYWNrKCB0aGlzLmNhcmREYXRhT2JqICk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQmlnQmxvY2tGaW5pc2ggPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXJxY0Fycml2aW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUFycWNCaWdCbG9ja0ZpbmlzaCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmJhdGNoRGF0YUFycml2aW5nKSB7XHJcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQmF0Y2hCaWdCbG9ja0ZpbmlzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwYXJzZUVtdkNhcmRob2xkZXJJbnRlcmFjdGlvblN0YXR1cyA9IGNhcmRob2xkZXJSZXNwID0+IHtcclxuICAgICAgICBzd2l0Y2goY2FyZGhvbGRlclJlc3BbMV0pIHtcclxuICAgICAgICAgICAgY2FzZSAweDAyOiBcclxuICAgICAgICAgICAgICAgIHJldHVybiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZmluZEVtdkNhcmRob2xkZXJTdGF0dXMoY2FyZGhvbGRlclJlc3BbMV0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzQW1vdW50Q29uZmlybWVkOiAoY2FyZGhvbGRlclJlc3BbNF0gPT09IDB4MDEpID8gdHJ1ZSA6IChjYXJkaG9sZGVyUmVzcFs0XSA9PT0gMHgwMikgPyBmYWxzZSA6IGAke3Vua25vd25VbmRvY30gQW1vdW50IENvbmZpcm1lZCBTdGF0dXNgXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2FzZSAweDA0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5maW5kRW12Q2FyZGhvbGRlclN0YXR1cyhjYXJkaG9sZGVyUmVzcFsxXSksXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25PckxhYmVsTmFtZTogdGhpcy5idWZmZXJUb1V0ZjgoIGNhcmRob2xkZXJSZXNwLnNsaWNlKDQpIClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjYXNlIDB4MEE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmZpbmRFbXZDYXJkaG9sZGVyU3RhdHVzKGNhcmRob2xkZXJSZXNwWzFdKSxcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2RTZWxlY3RlZDogKGNhcmRob2xkZXJSZXNwWzRdID09PSAweDAxKSA/IFwiQ3JlZGl0XCIgOiBcclxuICAgICAgICAgICAgICAgICAgICAoY2FyZGhvbGRlclJlc3BbNF0gPT09IDB4MDIpID8gXCJEZWJpdFwiIDogYCR7dW5rbm93blVuZG9jfSBwYXltZW50IG1ldGhvZCBzZWxlY3RlZGBcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjYXNlIDB4MjA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmZpbmRFbXZDYXJkaG9sZGVyU3RhdHVzKGNhcmRob2xkZXJSZXNwWzFdKSxcclxuICAgICAgICAgICAgICAgICAgICB0bHZEYXRhOiB0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKCBjYXJkaG9sZGVyUmVzcC5zbGljZSg0KSApLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFRsdkRhdGE6IHRoaXMudGx2UGFyc2VyKCBjYXJkaG9sZGVyUmVzcC5zbGljZSg0KSApXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAodHlwZW9mKGNhcmRob2xkZXJSZXNwWzRdKSA9PT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5maW5kRW12Q2FyZGhvbGRlclN0YXR1cyhjYXJkaG9sZGVyUmVzcFsxXSkgXHJcbiAgICAgICAgICAgICAgICAgICAgOiAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmZpbmRFbXZDYXJkaG9sZGVyU3RhdHVzKGNhcmRob2xkZXJSZXNwWzFdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kb2N1bWVudGVkRGF0YTogdGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyggY2FyZGhvbGRlclJlc3Auc2xpY2UoNCkgKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwYXJzZUNhcmRTdGF0dXNSZXBvcnQgPSBjYXJkU3RhdHVzID0+IChjYXJkU3RhdHVzLmxlbmd0aCA8IDQpID8gIFxyXG4gICAgICAgIHRoaXMuZmluZE9wZXJhdGlvblN0YXR1cyhjYXJkU3RhdHVzWzJdKVxyXG4gICAgICAgIDogKHtcclxuICAgICAgICAgICAgLi4udGhpcy5maW5kT3BlcmF0aW9uU3RhdHVzKGNhcmRTdGF0dXNbMl0pLFxyXG4gICAgICAgICAgICBjYXJkU3RhdHVzOiAoY2FyZFN0YXR1c1syXSA9PT0gMHgwMCkgPyBcIk9rXCIgOiBcIkVycm9yXCIsXHJcbiAgICAgICAgICAgIGNhcmRUeXBlOiB0aGlzLmNhcmRUeXBlc0VudW1bIGNhcmRTdGF0dXNbM10gXVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIHBhcnNlQWNrUmVzcG9uc2UgPSBhY2tSZXNwID0+ICh7XHJcbiAgICAgICAgY29kZTogYWNrUmVzcFsxXSxcclxuICAgICAgICBtZXNzYWdlOiB0aGlzLkFDS1NUU1sgYWNrUmVzcFsxXSBdLFxyXG4gICAgICAgIGNvbW1hbmRUeXBlOiAoIHRoaXMucGluQ29tbWFuZElkc1sgYWNrUmVzcFsyXSBdIHx8IFwiRGV2aWNlIGVycm9yIG9yIGNvbW1hbmQgdHlwZSBub3QgZG9jdW1lbnRlZFwiIClcclxuICAgIH0pO1xyXG5cclxuICAgIHBhcnNlRGV2aWNlU3RhdGVSZXBvcnQgPSBkZXZpY2VSZXNwID0+ICh7XHJcbiAgICAgICAgZGV2aWNlU3RhdGU6ICh0aGlzLmRldmljZVN0YXRlWyBkZXZpY2VSZXNwWzFdIF0gfHwgYCR7dW5rbm93blVuZG9jfSBkZXZpY2Ugc3RhdGUgaWQ6ICR7ZGV2aWNlUmVzcFsxXX1gKSwgXHJcbiAgICAgICAgc2Vzc2lvblN0YXRlOiB0aGlzLnBhcnNlU2Vzc2lvblN0YXRlKFxyXG4gICAgICAgICAgICB0aGlzLmRlY2ltYWxUb0JpbmFyeSggZGV2aWNlUmVzcFsyXSApXHJcbiAgICAgICAgKSxcclxuICAgICAgICBkZXZpY2VTdGF0dXM6IHRoaXMucGFyc2VEZXZpY2VTdGF0dXMoXHJcbiAgICAgICAgICAgIHRoaXMuZGVjaW1hbFRvQmluYXJ5KGRldmljZVJlc3BbM10pXHJcbiAgICAgICAgKSxcclxuICAgICAgICBkZXZpY2VDZXJ0U3RhdHVzOiB0aGlzLnBhcnNlQ2VydFN0YXR1cyggXHJcbiAgICAgICAgICAgIHRoaXMuZGVjaW1hbFRvQmluYXJ5KCBkZXZpY2VSZXNwWzRdIClcclxuICAgICAgICApLFxyXG4gICAgICAgIGhhcmR3YXJlU3RhdHVzOiB0aGlzLnBhcnNlSGFyZHdhcmVTdGF0dXMoXHJcbiAgICAgICAgICAgIHRoaXMuZGVjaW1hbFRvQmluYXJ5KGRldmljZVJlc3BbNV0pXHJcbiAgICAgICAgKSxcclxuICAgICAgICBhZGRpdGlvbmFsSW5mbzogdGhpcy5wYXJzZUFkZGl0aW9uYWxJbmZvKFxyXG4gICAgICAgICAgICB0aGlzLmRlY2ltYWxUb0JpbmFyeShkZXZpY2VSZXNwWzZdKVxyXG4gICAgICAgIClcclxuICAgIH0pO1xyXG5cclxuICAgIHBhcnNlU2Vzc2lvblN0YXRlID0gYmluYXJ5U3RyaW5nID0+ICh7XHJcbiAgICAgICAgcG93ZXJEaWRDaGFuZ2U6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbMF0gKSxcclxuICAgICAgICBjYXJkRGF0YUlzQXZhaWxhYmxlOiB0aGlzLnN0cmluZ051bVRvQm9vbCggYmluYXJ5U3RyaW5nWzRdICksXHJcbiAgICAgICAgcGFuUGFyc2VkRnJvbUNhcmQ6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbNV0gKSxcclxuICAgICAgICBleHRlcm5hbFBhblNlbnQ6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbNl0gKSxcclxuICAgICAgICBhbW91bnRXYXNTZW50OiB0aGlzLnN0cmluZ051bVRvQm9vbCggYmluYXJ5U3RyaW5nWzddIClcclxuICAgIH0pO1xyXG5cclxuICAgIHBhcnNlQ2VydFN0YXR1cyA9IGJpbmFyeVN0cmluZyA9PiAoe1xyXG4gICAgICAgIG1zckNybENlcnRFeGlzdHM6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbMF0gKSxcclxuICAgICAgICBwaW5DcmxDZXJ0RXhpc3RzOiB0aGlzLnN0cmluZ051bVRvQm9vbCggYmluYXJ5U3RyaW5nWzFdICksXHJcbiAgICAgICAgbWZnVW5iaW5kQ2VydEV4aXN0czogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1szXSApLFxyXG4gICAgICAgIG1zckNhQ2VydEV4aXN0czogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1s0XSApLFxyXG4gICAgICAgIHBpbkNhQ2VydEV4aXN0czogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1s1XSApLFxyXG4gICAgICAgIGRldmljZUNhQ2VydEV4aXN0czogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1s2XSApLFxyXG4gICAgICAgIGRldmljZUNlcnRFeGlzdHM6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbN10gKVxyXG4gICAgfSk7XHJcblxyXG4gICAga2V5U3RhdHVzRW51bSA9IHBpbk9yTXNyID0+IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIFwiMDBcIjogYCR7cGluT3JNc3J9IEtleSBPS2AsXHJcbiAgICAgICAgXCIwMVwiOiBgJHtwaW5Pck1zcn0gS2V5IEV4aGF1c3RlZGAsXHJcbiAgICAgICAgXCIxMFwiOiBgTm8gJHtwaW5Pck1zcn0gS2V5YCxcclxuICAgICAgICBcIjExXCI6IGAke3Bpbk9yTXNyfSBLZXkgTm90IEJvdW5kYFxyXG4gICAgfSk7XHJcblxyXG4gICAgcGFyc2VEZXZpY2VTdGF0dXMgPSBiaW5hcnlTdHJpbmcgPT4gKGJpbmFyeVN0cmluZyAhPT0gXCIwMDAwMDAwMFwiKSA/ICh7XHJcbiAgICAgICAgcGluS2V5U3RhdHVzOiB0aGlzLmtleVN0YXR1c0VudW0oXCJQSU5cIilbIGJpbmFyeVN0cmluZy5zbGljZSg2KSBdLFxyXG4gICAgICAgIG1zcktleVN0YXR1czogdGhpcy5rZXlTdGF0dXNFbnVtKFwiTVNSXCIpWyBiaW5hcnlTdHJpbmcuc2xpY2UoNCwgNikgXSxcclxuICAgICAgICB0YW1wZXJEZXRlY3RlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1szXSApLFxyXG4gICAgICAgIGlzQXV0aGVudGljYXRlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1sxXSApLFxyXG4gICAgICAgIGRldmljZUVycm9yRGV0ZWN0ZWQ6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbMF0gKVxyXG4gICAgfSlcclxuICAgIDogXCJPa1wiO1xyXG5cclxuICAgIHBhcnNlSGFyZHdhcmVTdGF0dXMgPSBiaW5hcnlTdHJpbmcgPT4gKHtcclxuICAgICAgICBJRTNfb25seTogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1swXSApLFxyXG4gICAgICAgIFNSRUQ6IHRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbMV0gKSxcclxuICAgICAgICBNYWdIZWFkSXNQcm9ncmFtbWVkOiB0aGlzLnN0cmluZ051bVRvQm9vbCggYmluYXJ5U3RyaW5nWzZdICksXHJcbiAgICAgICAgdGFtcGVyU2Vuc29yc0FyZUFjdGl2ZTogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1s3XSApXHJcbiAgICB9KTtcclxuXHJcbiAgICBwYXJzZUFkZGl0aW9uYWxJbmZvID0gYmluYXJ5U3RyaW5nID0+ICh7XHJcbiAgICAgICAgSUNDX0FjcXVpcmVyTWFzdGVyS2V5SXNJbmplY3RlZDogIXRoaXMuc3RyaW5nTnVtVG9Cb29sKCBiaW5hcnlTdHJpbmdbN10gKSxcclxuICAgICAgICBJQ0NfU2Vzc2lvbktleUlzQWN0aXZlOiAhdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1s2XSApLFxyXG4gICAgICAgIENBUEtfRW12RGF0YWJhc2VJc0NvcnJ1cHRlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1s1XSApLFxyXG4gICAgICAgIEVtdlRlcm1pbmFsRGF0YWJhc2VJc0NvcnJ1cHRlZDogdGhpcy5zdHJpbmdOdW1Ub0Jvb2woIGJpbmFyeVN0cmluZ1s0XSApLFxyXG4gICAgICAgIGNhcmRJc1ByZXNlbnRJbkNoaXBDYXJkQ29ubmVjdG9yOiB0aGlzLnN0cmluZ051bVRvQm9vbCggYmluYXJ5U3RyaW5nWzNdIClcclxuICAgIH0pO1xyXG5cclxuICAgIHBhcnNlQ2FyZERhdGEgPSBwYXJ0aWFsTm90aWZpY2F0aW9uID0+IHtcclxuICAgICAgICBjb25zdCB0cmFja0tleSA9ICh0aGlzLmNhcmREYXRhSWRzWyBwYXJ0aWFsTm90aWZpY2F0aW9uWzFdIF0gfHwgYHRyYWNrTmFtZSR7dW5rbm93bn1gKTtcclxuICAgICAgICBcclxuICAgICAgICAvLzB4MDAgPT09IFwiT2tcIlxyXG4gICAgICAgIGlmIChwYXJ0aWFsTm90aWZpY2F0aW9uWzJdID09PSAweDAwKSB7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2godHJhY2tLZXkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmFjazFcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcmREYXRhT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNhcmREYXRhT2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbdHJhY2tLZXldOiB0aGlzLmJ1ZmZlclRvVXRmOChwYXJ0aWFsTm90aWZpY2F0aW9uLnNsaWNlKDQpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmFjazJcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcmREYXRhT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNhcmREYXRhT2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbdHJhY2tLZXldOiB0aGlzLmJ1ZmZlclRvVXRmOChwYXJ0aWFsTm90aWZpY2F0aW9uLnNsaWNlKDQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5mb3JtYXRFeHBQQU4oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsTm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImtzbkFuZE1hZ25lUHJpbnRTdGF0dXNcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcmREYXRhT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNhcmREYXRhT2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrc246IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcocGFydGlhbE5vdGlmaWNhdGlvbi5zbGljZSg0LCAxNCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWduZVByaW50U3RhdHVzOiB0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKHBhcnRpYWxOb3RpZmljYXRpb24uc2xpY2UoLTQpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FyZERhdGFPYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuY2FyZERhdGFPYmosXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFt0cmFja0tleV06IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcocGFydGlhbE5vdGlmaWNhdGlvbi5zbGljZSg0KSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FyZERhdGFPYmogPSB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLmNhcmREYXRhT2JqLFxyXG4gICAgICAgICAgICAgICAgW3RyYWNrS2V5XTogdGhpcy5jb252ZXJ0U3RhdHVzVG9TdHJpbmdbIHBhcnRpYWxOb3RpZmljYXRpb25bMl0gXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlUGluUmVzcG9uc2UgPSBwaW5SZXNwID0+IHtcclxuICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbUElOIFJlc3BvbnNlXTogUmVzcG9uc2UgZnJvbSBQSU4gRW50cnk6ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhwaW5SZXNwKX1gKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gKHBpblJlc3AubGVuZ3RoID4gMikgPyAoe1xyXG4gICAgICAgICAgICBwaW5EYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLmZpbmRPcGVyYXRpb25TdGF0dXMocGluUmVzcFsxXSksXHJcbiAgICAgICAgICAgICAgICBwaW5Lc246IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoIHBpblJlc3Auc2xpY2UoMiwgMTIpICksXHJcbiAgICAgICAgICAgICAgICBlbmNyeXB0ZWRQaW5CbG9jazogdGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyggcGluUmVzcC5zbGljZSgxMiwgMjApIClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgOiB0aGlzLmZpbmRPcGVyYXRpb25TdGF0dXMocGluUmVzcFsxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyc2VDYXJkaG9sZGVyUmVzcG9uc2UgPSBzZWxlY3Rpb25SZXNwID0+IHtcclxuICAgICAgICBjb25zdCBkZXZpY2VLZXlzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIDB4NzE6IFwiTGVmdCBmdW5jdGlvbiBrZXlcIixcclxuICAgICAgICAgICAgMHg3MjogXCJNaWRkbGUgZnVuY3Rpb24ga2V5XCIsXHJcbiAgICAgICAgICAgIDB4NzQ6IFwiUmlnaHQgZnVuY3Rpb24ga2V5XCIsXHJcbiAgICAgICAgICAgIDB4Nzg6IFwiRW50ZXIga2V5XCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChzZWxlY3Rpb25SZXNwLmxlbmd0aCA+IDIpID8gKHtcclxuICAgICAgICAgICAgLi4udGhpcy5maW5kT3BlcmF0aW9uU3RhdHVzKHNlbGVjdGlvblJlc3BbMV0pLFxyXG4gICAgICAgICAgICBrZXlQcmVzc2VkOiAoZGV2aWNlS2V5c1sgc2VsZWN0aW9uUmVzcFsyXSBdIHx8IGAke3Vua25vd25VbmRvY30gS2V5YClcclxuICAgICAgICB9KVxyXG4gICAgICAgIDogdGhpcy5maW5kT3BlcmF0aW9uU3RhdHVzKHNlbGVjdGlvblJlc3BbMV0pXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHBhcnNlVGlwQ2FzaGJhY2tSZXBvcnQgPSByZXBvcnQgPT4gKHJlcG9ydC5sZW5ndGggPiAyKSA/IFxyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25DYWxsYmFjayh7XHJcbiAgICAgICAgICAgIHRpcENhc2hiYWNrUmVwb3J0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5maW5kT3BlcmF0aW9uU3RhdHVzKHJlcG9ydFsxXSksXHJcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0TW9kZTogKHJlcG9ydFsyXSA9PT0gMHgwMCkgPyBcIlRpcFwiIDogXCJDYXNoYmFja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogcmVwb3J0LnNsaWNlKDMsIDkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRheDogcmVwb3J0LnNsaWNlKDksIDE1KSxcclxuICAgICAgICAgICAgICAgICAgICB0YXhSYXRlOiByZXBvcnQuc2xpY2UoMTUsIDE4KSxcclxuICAgICAgICAgICAgICAgICAgICB0aXBPckNhc2hiYWNrQW1vdW50OiByZXBvcnQuc2xpY2UoMTgsIDI0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgOiB0aGlzLnRyYW5zYWN0aW9uQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICB0aXBDYXNoYmFja1JlcG9ydDoge1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5maW5kT3BlcmF0aW9uU3RhdHVzKHJlcG9ydFsxXSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBpblN0YXR1c1BhcnNlcjtcclxuIiwiaW1wb3J0IFBpblN0YXR1c1BhcnNlciBmcm9tICcuLi9wYXJzZXJzL3BpblN0YXR1c1BhcnNlcic7XHJcbmltcG9ydCB7IG1pc3NpbmdSZXF1aXJlZEZpZWxkcyB9IGZyb20gJy4uL2Vycm9ySGFuZGxlci9lcnJDb25zdGFudHMnO1xyXG5cclxuY2xhc3MgUGluQ21kQnVpbGRlciBleHRlbmRzIFBpblN0YXR1c1BhcnNlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIGNhbGxCYWNrcykge1xyXG4gICAgICAgIHN1cGVyKGRldmljZSwgY2FsbEJhY2tzKTtcclxuXHJcbiAgICAgICAgdGhpcy50b25lQ2hvaWNlID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgICdub3NvdW5kJzogMHgwMCxcclxuICAgICAgICAgICAgJ29uZWJlZXAnOiAweDAxLFxyXG4gICAgICAgICAgICAndHdvYmVlcHMnOiAweDAyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZW12T3B0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICAnbm9ybWFsJzogMHgwMCxcclxuICAgICAgICAgICAgJ2J5cGFzc3Bpbic6IDB4MDEsXHJcbiAgICAgICAgICAgICdmb3JjZW9ubGluZSc6IDB4MDIsXHJcbiAgICAgICAgICAgICdhY3F1aXJlcm5vdGF2YWlsYWJsZSc6IDB4MDRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBidWlsZFN3aXBlQ29tbWFuZCA9ICh7IHRpbWVvdXQsIGlzRmFsbGJhY2ssIHRvbmVDaG9pY2UsIGRpc3BsYXlUeXBlIH0pID0+IChbIFxyXG4gICAgICAgIDB4MDEsIDB4MDMsICh0aW1lb3V0IHx8IDB4M0MpLFxyXG4gICAgICAgIChpc0ZhbGxiYWNrID09PSB0cnVlKSA/IDB4MDQgOiAodHlwZW9mKGRpc3BsYXlUeXBlKSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5kaXNwbGF5VHlwZXNbIGRpc3BsYXlUeXBlLnRvTG93ZXJDYXNlKCkgXSA6IDB4MDIsXHJcbiAgICAgICAgKHR5cGVvZih0b25lQ2hvaWNlKSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy50b25lQ2hvaWNlWyB0b25lQ2hvaWNlLnRvTG93ZXJDYXNlKCkgXSA6IDB4MDFcclxuICAgIF0pO1xyXG5cclxuICAgIGJ1aWxkRW12Q29tbWFuZCA9ICh7IFxyXG4gICAgICAgIHRpbWVvdXQsIFxyXG4gICAgICAgIHBpblRpbWVvdXQsIFxyXG4gICAgICAgIGNhcmRUeXBlLCBcclxuICAgICAgICB0cmFuc2FjdGlvblR5cGUsIFxyXG4gICAgICAgIGNhc2hCYWNrLCBcclxuICAgICAgICBjdXJyZW5jeUNvZGUsXHJcbiAgICAgICAgdG9uZUNob2ljZSwgXHJcbiAgICAgICAgaXNRdWlja0NoaXAsIFxyXG4gICAgICAgIGF1dGhvcml6ZWRBbW91bnQsIFxyXG4gICAgICAgIGVtdk9wdGlvbnMsXHJcbiAgICAgICAgdGF4QW1vdW50LFxyXG4gICAgICAgIHRheFBlcmNlbnQsXHJcbiAgICAgICAgdGlwQW1vdW50LFxyXG4gICAgICAgIGJhbGFuY2VCZWZvcmVHZW5BQyxcclxuICAgICAgICBiYWxhbmNlQWZ0ZXJHZW5BQyxcclxuICAgICAgICB0cnhDYXRlZ29yeUNvZGVcclxuICAgIH0pID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0aGlzLmlzUXVpY2tDaGlwVHJhbnNhY3Rpb24gPSAoaXNRdWlja0NoaXAgPT09IGZhbHNlKSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLnZhbGlkYXRlQW1vdW50KHJlamVjdCk7XHJcblxyXG4gICAgICAgIGxldCBjb21tYW5kID0gWyBcclxuICAgICAgICAgICAgMHgwMSwgMHhBMixcclxuICAgICAgICAgICAgKHRpbWVvdXQgfHwgMHgzQyksXHJcbiAgICAgICAgICAgIChwaW5UaW1lb3V0IHx8IDB4MTQpLFxyXG4gICAgICAgICAgICAweDAwLFxyXG4gICAgICAgICAgICAodHlwZW9mKHRvbmVDaG9pY2UpICE9PSAndW5kZWZpbmVkJykgPyB0aGlzLnRvbmVDaG9pY2VbIHRvbmVDaG9pY2UudG9Mb3dlckNhc2UoKSBdIDogMHgwMSxcclxuICAgICAgICAgICAgKGNhcmRUeXBlKSA/IHRoaXMuY2FyZFR5cGVzKCBjYXJkVHlwZS50b0xvd2VyQ2FzZSgpICkgOiB0aGlzLmNhcmRUeXBlcyhcImFsbFwiKSxcclxuICAgICAgICAgICAgKHR5cGVvZihlbXZPcHRpb25zKSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5lbXZPcHRpb25zWyBlbXZPcHRpb25zLnRvTG93ZXJDYXNlKCkgXSA6IDB4MDBcclxuICAgICAgICBdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGF1dGhBbW91bnQgPSB2YWxpZGF0b3IoYXV0aG9yaXplZEFtb3VudCwgJ2F1dGhvcml6ZWRBbW91bnQnLCBbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgMHgwMF0pO1xyXG4gICAgICAgIGlmICh0eXBlb2YoYXV0aEFtb3VudCkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGF1dGhBbW91bnQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgY29tbWFuZCA9IGNvbW1hbmQuY29uY2F0KCBhdXRoQW1vdW50ICk7XHJcblxyXG4gICAgICAgIGNvbW1hbmQgPSAodHlwZW9mKHRyYW5zYWN0aW9uVHlwZSkgIT09ICd1bmRlZmluZWQnKSA/IFxyXG4gICAgICAgICAgICBjb21tYW5kLmNvbmNhdCh0aGlzLnRyYW5zYWN0aW9uVHlwZXNbIHRyYW5zYWN0aW9uVHlwZS50b0xvd2VyQ2FzZSgpIF0pXHJcbiAgICAgICAgICAgIDogY29tbWFuZC5jb25jYXQoMHgwMClcclxuXHJcbiAgICAgICAgY29uc3QgY2FzaGJhY2tBbW50ID0gdmFsaWRhdG9yKGNhc2hCYWNrLCAnY2FzaEJhY2snLCB0aGlzLm5ld0FycmF5UGFydGlhbCgweDAwLCA2KSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZihjYXNoYmFja0FtbnQpID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChjYXNoYmFja0FtbnQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgY29tbWFuZCA9IGNvbW1hbmQuY29uY2F0KCBjYXNoYmFja0FtbnQgKTtcclxuXHJcbiAgICAgICAgY29uc3QgYmFsYW5jZUJlZm9yZUFtbnQgPSB2YWxpZGF0b3IoYmFsYW5jZUJlZm9yZUdlbkFDLCAnYmFsYW5jZUJlZm9yZUdlbkFDJywgdGhpcy5uZXdBcnJheVBhcnRpYWwoMHgwMCwgNikpO1xyXG4gICAgICAgIGlmICh0eXBlb2YoYmFsYW5jZUJlZm9yZUFtbnQpID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChiYWxhbmNlQmVmb3JlQW1udCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBjb21tYW5kID0gY29tbWFuZC5jb25jYXQoIGJhbGFuY2VCZWZvcmVBbW50ICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhbGFuY2VBZnRlckFtbnQgPSB2YWxpZGF0b3IoYmFsYW5jZUFmdGVyR2VuQUMsICdiYWxhbmNlQWZ0ZXJHZW5BQycsIHRoaXMubmV3QXJyYXlQYXJ0aWFsKDB4MDAsIDYpKTtcclxuICAgICAgICBpZiAodHlwZW9mKGJhbGFuY2VBZnRlckFtbnQpID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChiYWxhbmNlQWZ0ZXJBbW50KTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGNvbW1hbmQgPSBjb21tYW5kLmNvbmNhdCggYmFsYW5jZUFmdGVyQW1udCApO1xyXG5cclxuICAgICAgICBjb21tYW5kID0gKGN1cnJlbmN5Q29kZSkgPyBjb21tYW5kLmNvbmNhdCgoIHRoaXMuY3VycmVuY3lDb2RlWyBjdXJyZW5jeUNvZGUudG9Mb3dlckNhc2UoKSBdIHx8ICB0aGlzLmN1cnJlbmN5Q29kZVsnZGVmYXVsdCddICkpXHJcbiAgICAgICAgICAgIDogY29tbWFuZC5jb25jYXQodGhpcy5jdXJyZW5jeUNvZGUuZG9sbGFyKTtcclxuXHJcbiAgICAgICAgY29tbWFuZC5wdXNoKCAodHlwZW9mKHRyeENhdGVnb3J5Q29kZSkgIT09ICd1bmRlZmluZWQnKSA/IHRyeENhdGVnb3J5Q29kZSA6IDB4MDAgKTtcclxuXHJcbiAgICAgICAgY29tbWFuZC5wdXNoKCAodGhpcy5pc1F1aWNrQ2hpcFRyYW5zYWN0aW9uKSA/IDB4MDEgOiAweDAwICk7XHJcblxyXG4gICAgICAgIGNvbW1hbmQucHVzaCggXHJcbiAgICAgICAgICAgICgodHlwZW9mKHRpcEFtb3VudCkgIT09ICd1bmRlZmluZWQnKSA/IDB4MDEgOiAodHlwZW9mKGNhc2hCYWNrKSAhPT0gJ3VuZGVmaW5lZCcpID8gMHgwMiA6IDB4MDApIFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRheEFtbnQgPSB2YWxpZGF0b3IodGF4QW1vdW50LCAndGF4QW1vdW50JywgdGhpcy5uZXdBcnJheVBhcnRpYWwoMHgwMCwgNikpO1xyXG4gICAgICAgIGlmICh0eXBlb2YodGF4QW1udCkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KHRheEFtbnQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgY29tbWFuZCA9IGNvbW1hbmQuY29uY2F0KCB0YXhBbW50ICk7XHJcblxyXG4gICAgICAgIGNvbW1hbmQgPSAodHlwZW9mKHRheFBlcmNlbnQpICE9PSAndW5kZWZpbmVkJykgPyBcclxuICAgICAgICAgICAgKHR5cGVvZih0YXhQZXJjZW50KSA9PT0gJ251bWJlcicpID8gY29tbWFuZC5jb25jYXQodGhpcy5jb252ZXJ0TnVtVG9BbW91bnQodGF4UGVyY2VudCwgNikpIDogY29tbWFuZC5jb25jYXQodGF4UGVyY2VudClcclxuICAgICAgICA6IGNvbW1hbmQuY29uY2F0KCB0aGlzLm5ld0FycmF5UGFydGlhbCgweDAwLCAzKSApO1xyXG5cclxuICAgICAgICBjb21tYW5kID0gY29tbWFuZC5jb25jYXQoIHRoaXMubmV3QXJyYXlQYXJ0aWFsKDB4MDAsIDMpICk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpcEFtbnQgPSB2YWxpZGF0b3IodGlwQW1vdW50LCAndGlwQW1vdW50JywgdGhpcy5uZXdBcnJheVBhcnRpYWwoMHgwMCwgNikpO1xyXG4gICAgICAgIGlmICh0eXBlb2YodGlwQW1udCkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KHRpcEFtbnQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgY29tbWFuZCA9IGNvbW1hbmQuY29uY2F0KCB0aXBBbW50ICk7XHJcblxyXG4gICAgICAgIGNvbW1hbmQgPSBjb21tYW5kLmNvbmNhdCggdGhpcy5uZXdBcnJheVBhcnRpYWwoMHgwMCwgOSkgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoY29tbWFuZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBidWlsZFBpbkNvbW1hbmQgPSAoe1xyXG4gICAgICAgIGxhbmd1YWdlU2VsZWN0aW9uLFxyXG4gICAgICAgIGRpc3BsYXlUeXBlLFxyXG4gICAgICAgIHRpbWVvdXQsXHJcbiAgICAgICAgbWF4UGluTGVuZ3RoLFxyXG4gICAgICAgIG1pblBpbkxlbmd0aCxcclxuICAgICAgICB0b25lQ2hvaWNlLFxyXG4gICAgICAgIHdhaXRNZXNzYWdlLFxyXG4gICAgICAgIHZlcmlmeVBpbixcclxuICAgICAgICBwaW5CbG9ja0Zvcm1hdFxyXG4gICAgfSkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBwaW5EaXNwbGF5T3B0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICBcImVudGVycGluXCI6IDB4MDAsXHJcbiAgICAgICAgICAgIFwiZW50ZXJwaW5hbW91bnRcIjogMHgwMSxcclxuICAgICAgICAgICAgXCJyZWVudGVycGluYW1vdW50XCI6IDB4MDIsXHJcbiAgICAgICAgICAgIFwicmVlbnRlcnBpblwiOiAweDAzLFxyXG4gICAgICAgICAgICBcInZlcmlmeXBpblwiOiAweDA0XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAweDAxLCAweDA0LFxyXG4gICAgICAgICAgICAodGltZW91dCB8fCAweDFFKSxcclxuICAgICAgICAgICAgKChkaXNwbGF5VHlwZSkgPyAocGluRGlzcGxheU9wdGlvbnNbIGRpc3BsYXlUeXBlLnRvTG93ZXJDYXNlKCkgXSB8fCAweDAwKTogMHgwMCksXHJcbiAgICAgICAgICAgICh0aGlzLmZpbmRQaW5MZW5ndGgobWF4UGluTGVuZ3RoLCBtaW5QaW5MZW5ndGgpKSxcclxuICAgICAgICAgICAgKHR5cGVvZih0b25lQ2hvaWNlKSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy50b25lQ2hvaWNlWyB0b25lQ2hvaWNlLnRvTG93ZXJDYXNlKCkgXSA6IDB4MDEsXHJcbiAgICAgICAgICAgICh0aGlzLmJ1aWxkUGluT3B0aW9uc0J5dGUobGFuZ3VhZ2VTZWxlY3Rpb24sIHdhaXRNZXNzYWdlLCB2ZXJpZnlQaW4sIHBpbkJsb2NrRm9ybWF0KSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICBidWlsZEFycGNDb21tYW5kID0gKGxlbiwgZGF0YSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2VuZEJpZ0Jsb2NrRGF0YSgweEE0LCBsZW4sIGRhdGEpLnRoZW4oXHJcbiAgICAgICAgICAgICgpID0+IHJlc29sdmUoWzB4MDEsIDB4QTQsIC4uLnRoaXMubmV3QXJyYXlQYXJ0aWFsKDB4MDAsIDEwKV0pXHJcbiAgICAgICAgKS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYnVpbGRUaXBPckNhc2hiYWNrQ21kID0gKHtcclxuICAgICAgICB0aW1lb3V0LFxyXG4gICAgICAgIGNvbW1hbmRUeXBlLFxyXG4gICAgICAgIHRvbmVDaG9pY2UsXHJcbiAgICAgICAgdHJhbnNhY3Rpb25BbW91bnQsXHJcbiAgICAgICAgY2FsY3VsYXRlZFRheEFtb3VudCxcclxuICAgICAgICB0YXhSYXRlLFxyXG4gICAgICAgIHRpcFNlbGVjdGlvbk1vZGUsXHJcbiAgICAgICAgbGVmdEJ1dHRvbixcclxuICAgICAgICBtaWRkbGVCdXR0b24sXHJcbiAgICAgICAgcmlnaHRCdXR0b25cclxuICAgIH0pID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLnZhbGlkYXRlQW1vdW50KHJlamVjdCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb3BzVG9WYWxpZGF0ZSA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcHJvcDogY29tbWFuZFR5cGUsXHJcbiAgICAgICAgICAgICAgICBwcm9wTmFtZTogJ2NvbW1hbmRUeXBlJyxcclxuICAgICAgICAgICAgICAgIHZhbGlkVHlwZXM6IFsnc3RyaW5nJ10sXHJcbiAgICAgICAgICAgICAgICBjb25kaXRpb246IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2YWxpZFZhbHVlczogWyd0aXAnLCAnY2FzaGJhY2snXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcm9wOiB0aXBTZWxlY3Rpb25Nb2RlLFxyXG4gICAgICAgICAgICAgICAgcHJvcE5hbWU6ICd0aXBTZWxlY3Rpb25Nb2RlJyxcclxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogKGNvbW1hbmRUeXBlICYmIGNvbW1hbmRUeXBlLnRvTG93ZXJDYXNlKCkgIT09ICdjYXNoYmFjaycpLFxyXG4gICAgICAgICAgICAgICAgdmFsaWRUeXBlczogWydzdHJpbmcnXSxcclxuICAgICAgICAgICAgICAgIHZhbGlkVmFsdWVzOiBbJ3BlcmNlbnQnLCAnYW1vdW50J11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcHJvcDogdGF4UmF0ZSxcclxuICAgICAgICAgICAgICAgIHByb3BOYW1lOiAndGF4UmF0ZScsXHJcbiAgICAgICAgICAgICAgICBjb25kaXRpb246IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2YWxpZFR5cGVzOiBbJ251bWJlcicsICdvYmplY3QnXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZVJlcXVpcmVkSW5wdXRzKHByb3BzVG9WYWxpZGF0ZSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0aXBDYXNoYmFja0NtZCA9IFtcclxuICAgICAgICAgICAgICAgIDB4MDEsIDB4QTAsXHJcbiAgICAgICAgICAgICAgICAodHlwZW9mKHRpbWVvdXQpICE9PSAndW5kZWZpbmVkJykgPyB0aW1lb3V0IDogMHgxRSxcclxuICAgICAgICAgICAgICAgIChjb21tYW5kVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndGlwJykgPyAweDAwIDogMHgwMSxcclxuICAgICAgICAgICAgICAgICh0eXBlb2YodG9uZUNob2ljZSkgPT09ICdzdHJpbmcnKSA/IHRoaXMudG9uZUNob2ljZVsgdG9uZUNob2ljZS50b0xvd2VyQ2FzZSgpIF0gOiB0aGlzLnRvbmVDaG9pY2Uub25lYmVlcFxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdHJ4QW1udCA9IHZhbGlkYXRvcih0cmFuc2FjdGlvbkFtb3VudCwgJ3RyYW5zYWN0aW9uQW1vdW50Jyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YodHJ4QW1udCkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCh0cnhBbW50KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGlwQ2FzaGJhY2tDbWQgPSB0aXBDYXNoYmFja0NtZC5jb25jYXQoIHRyeEFtbnQgKTtcclxuICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjYWxjVGF4QW1udCA9IHZhbGlkYXRvcihjYWxjdWxhdGVkVGF4QW1vdW50LCAnY2FsY3VsYXRlZFRheEFtb3VudCcpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mKGNhbGNUYXhBbW50KSA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGNhbGNUYXhBbW50KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGlwQ2FzaGJhY2tDbWQgPSB0aXBDYXNoYmFja0NtZC5jb25jYXQoIGNhbGNUYXhBbW50ICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aXBDYXNoYmFja0NtZCA9ICh0eXBlb2YodGF4UmF0ZSkgPT09ICdudW1iZXInKSA/IFxyXG4gICAgICAgICAgICAgICAgdGlwQ2FzaGJhY2tDbWQuY29uY2F0KHRoaXMuY29udmVydE51bVRvQW1vdW50KHRheFJhdGUsIDYpKSA6IHRpcENhc2hiYWNrQ21kLmNvbmNhdCh0YXhSYXRlKTtcclxuXHJcbiAgICAgICAgICAgIHRpcENhc2hiYWNrQ21kLnB1c2goXHJcbiAgICAgICAgICAgICAgICAodHlwZW9mKHRpcFNlbGVjdGlvbk1vZGUpID09PSAndW5kZWZpbmVkJykgPyAweDAwIDogKHRpcFNlbGVjdGlvbk1vZGUgPT09ICdwZXJjZW50JykgPyAweDAwIDogMHgwMVxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgICB0aXBDYXNoYmFja0NtZC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZihsZWZ0QnV0dG9uKSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5idWlsZE4yRm9ybWF0KGxlZnRCdXR0b24pIDogMHgwMCBcclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgdGlwQ2FzaGJhY2tDbWQucHVzaChcclxuICAgICAgICAgICAgICAgICh0eXBlb2YobWlkZGxlQnV0dG9uKSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5idWlsZE4yRm9ybWF0KG1pZGRsZUJ1dHRvbikgOiAweDAwIFxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgICB0aXBDYXNoYmFja0NtZC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZihyaWdodEJ1dHRvbikgIT09ICd1bmRlZmluZWQnKSA/IHRoaXMuYnVpbGROMkZvcm1hdChyaWdodEJ1dHRvbikgOiAweDAwIFxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgICB0aXBDYXNoYmFja0NtZCA9IHRpcENhc2hiYWNrQ21kLmNvbmNhdCh0aGlzLm5ld0FycmF5UGFydGlhbCgweDAwLCAyNSkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodGlwQ2FzaGJhY2tDbWQpO1xyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSlcclxuICAgIH0pO1xyXG5cclxuICAgIGJ1aWxkRGlzcGxheUNtZCA9ICh7IGRpc3BsYXlUaW1lLCBtZXNzYWdlSWQgfSkgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IFxyXG4gICAgICAgICh0eXBlb2YobWVzc2FnZUlkKSA9PT0gJ3VuZGVmaW5lZCcpID8gXHJcbiAgICAgICAgICAgIHJlamVjdCggbWlzc2luZ1JlcXVpcmVkRmllbGRzKFwibWVzc2FnZUlkXCIpICkgXHJcbiAgICAgICAgICAgIDogcmVzb2x2ZShbXHJcbiAgICAgICAgICAgICAgICAweDAxLCAweDA3LFxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZihkaXNwbGF5VGltZSkgIT09ICd1bmRlZmluZWQnKSA/IGRpc3BsYXlUaW1lIDogMHgwRixcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBpbkNtZEJ1aWxkZXI7XHJcbiIsImltcG9ydCBQaW5DbWRCdWlsZGVyIGZyb20gJy4uL2NvbW1hbmRCdWlsZGVycy9waW5DbWRCdWlsZGVyJztcclxuaW1wb3J0IHsgXHJcbiAgICBkZXZpY2VOb3RGb3VuZCwgXHJcbiAgICByZWFkRmFpbGVkLCBcclxuICAgIGNvbW1hbmROb3RTZW50RnJvbUhvc3QsIFxyXG4gICAgY29tbWFuZE5vdFNlbnQsXHJcbiAgICBkZXZpY2VOb3RPcGVuLFxyXG4gICAgcmVzcG9uc2VOb3RSZWNlaXZlZFxyXG59IGZyb20gJy4uL2Vycm9ySGFuZGxlci9lcnJDb25zdGFudHMnO1xyXG5pbXBvcnQgeyBvcGVuU3VjY2Vzcywgc3VjY2Vzc0NvZGUsIG5vU2Vzc2lvblRvQ2xlYXIsIGdhdHRCdXN5LCBzdWNjZXNzZnVsQ2xvc2UgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xyXG5cclxuY2xhc3MgUGluUGFkIGV4dGVuZHMgUGluQ21kQnVpbGRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIGNhbGxCYWNrcykge1xyXG4gICAgICAgIHN1cGVyKGRldmljZSwgY2FsbEJhY2tzKTtcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uQ2FsbGJhY2sgPSBjYWxsQmFja3MudHJhbnNhY3Rpb25DYWxsYmFjayB8fCBjYWxsQmFja3M7XHJcbiAgICAgICAgdGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrID0gY2FsbEJhY2tzLnRyYW5zYWN0aW9uU3RhdHVzQ2FsbGJhY2s7XHJcblxyXG4gICAgICAgIHRoaXMuZGV2aWNlRnJvbUhvc3RMZW4gPSAnMDUwOGU2ZjgtYWQ4Mi04OThmLWY4NDMtZTM0MTBjYjYwMjIwJztcclxuICAgICAgICB0aGlzLmRldmljZUZyb21Ib3N0RGF0YSA9ICcwNTA4ZTZmOC1hZDgyLTg5OGYtZjg0My1lMzQxMGNiNjAyMjEnO1xyXG4gICAgICAgIHRoaXMuZGV2aWNlVG9Ib3N0TGVuID0gJzA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDIyMic7XHJcbiAgICAgICAgdGhpcy5kZXZpY2VUb0hvc3REYXRhID0gJzA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDIyMyc7XHJcblxyXG4gICAgICAgIHRoaXMuY2FyZERhdGFMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlRGF0YUNoYXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZENoYXJhY3RlcmlzdGljID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbmRMZW5Ub0RldmljZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuY29tbWFuZFNlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN3aXBlSGFzQmVndW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uSGFzU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGF0YUdhdGhlcmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1F1aWNrQ2hpcFRyYW5zYWN0aW9uID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRldmljZVNlcmlhbE51bWJlciA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuZGlzcGxheVR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgICdzd2lwZWlkbGVhbHRlcm5hdGUnOiAweDAwLFxyXG4gICAgICAgICAgICAnc3dpcGVjYXJkJzogMHgwMSxcclxuICAgICAgICAgICAgJ3BsZWFzZXN3aXBlJzogMHgwMixcclxuICAgICAgICAgICAgJ3BsZWFzZXN3aXBlYWdhaW4nOiAweDAzLFxyXG4gICAgICAgICAgICAnY2hpcGVycm9ydXNlc3dpcGUnOiAweDA0XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucmVwb3J0SWRzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlQWNrOiAweDAxLFxyXG4gICAgICAgICAgICBlbmRTZXNzaW9uOiAweDAyLFxyXG4gICAgICAgICAgICByZXF1ZXN0Q2FyZFN3aXBlOiAweDAzLFxyXG4gICAgICAgICAgICBjYXJkU3RhdHVzUmVwb3J0OiAweDIyLFxyXG4gICAgICAgICAgICBkZXZpY2VTdGF0ZVJlcG9ydDogMHgyMCxcclxuICAgICAgICAgICAgY2FyZERhdGFSZXBvcnQ6IDB4MjMsXHJcbiAgICAgICAgICAgIGVtdkNhcmRob2xkZXJTdGF0dXM6IDB4MkMsXHJcbiAgICAgICAgICAgIGJpZ0Jsb2NrRGF0YTogMHgyOSxcclxuICAgICAgICAgICAgZW12Q29tcGxldGlvbjogMHhBMixcclxuICAgICAgICAgICAgcmVxdWVzdFNuOiAweDFBLFxyXG4gICAgICAgICAgICBkZXZpY2VDb25maWc6IDB4MDksXHJcbiAgICAgICAgICAgIHBpblJlc3BvbnNlOiAweDI0LFxyXG4gICAgICAgICAgICBzZWxlY3Rpb25SZXNwb25zZTogMHgyNSxcclxuICAgICAgICAgICAgZGlzcGxheVJlc3A6IDB4MjcsXHJcbiAgICAgICAgICAgIHRpcENhc2hiYWNrUmVwb3J0OiAweDMwLFxyXG4gICAgICAgICAgICBkZWxheWVkQWNrOiAweDJBXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdGlhbE5vdGlmaWNhdGlvbiA9IFsweDAwXTtcclxuXHJcbiAgICAgICAgdGhpcy5jbGVhclNlc3Npb25DbWQgPSBbMHgwMSwgMHgwMiwgMHgwMF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2FyZFNlcnZpY2UgPSAoKSA9PiBuZXcgUHJvbWlzZSggKHBhcmVudFJlc29sdmUsIHBhcmVudFJlamVjdCkgPT4gKCF0aGlzLmRldmljZSkgP1xyXG4gICAgICAgIHBhcmVudFJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RGb3VuZCkgKVxyXG4gICAgICAgIDpcclxuICAgICAgICB0aGlzLmNvbm5lY3RBbmRDYWNoZSgyKVxyXG4gICAgICAgICAgICAudGhlbiggc2VydmljZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbR0FUVF06IENhY2hlIEFwcERhdGFUb0hvc3RMZW5ndGggQ2hhcmFjdGVyaXN0aWMgfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmdldENoYXJhY3RlcmlzdGljKHRoaXMuZGV2aWNlVG9Ib3N0TGVuKSBcclxuICAgICAgICAgICAgfSkudGhlbiggY2hhcmFjdGVyaXN0aWMgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0dBVFRdOiBCZWdpbiBub3RpZmljYXRpb25zIG9uIEFwcERhdGFUb0hvc3RMZW5ndGggQ2hhcmFjdGVyaXN0aWMgfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFyYWN0ZXJpc3RpYy5zdGFydE5vdGlmaWNhdGlvbnMoKVxyXG4gICAgICAgICAgICB9KS50aGVuKCBjaGFyYWN0ZXJpc3RpYyA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbR0FUVF06IEFkZCBsaXN0ZW5lciB0byBub3RpZmljYXRpb25zIHx8ICR7bmV3IERhdGUoKX1gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJpc3RpYy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFyYWN0ZXJpc3RpY3ZhbHVlY2hhbmdlZCcsIHRoaXMuZGF0YVdhdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuYWRkRXZlbnRMaXN0ZW5lcignY2hhcmFjdGVyaXN0aWN2YWx1ZWNoYW5nZWQnLCB0aGlzLmRhdGFXYXRjaGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmREYXRhTGlzdGVuZXIgPSBjaGFyYWN0ZXJpc3RpYztcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtHQVRUXTogQ2FjaGUgQXBwRGF0YVRvSG9zdCBDaGFyYWN0ZXJpc3RpYyB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FyZFNlcnZpY2UuZ2V0Q2hhcmFjdGVyaXN0aWModGhpcy5kZXZpY2VUb0hvc3REYXRhKTtcclxuICAgICAgICAgICAgfSkudGhlbiggY2hhcmFjdGVyaXN0aWMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZWl2ZURhdGFDaGFyID0gY2hhcmFjdGVyaXN0aWM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0dBVFRdOiBDYWNoZSBBcHBEYXRhRnJvbUhvc3RMZW5ndGggQ2hhcmFjdGVyaXN0aWMgfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYXJkU2VydmljZS5nZXRDaGFyYWN0ZXJpc3RpYyh0aGlzLmRldmljZUZyb21Ib3N0TGVuKVxyXG4gICAgICAgICAgICB9KS50aGVuKCBjaGFyYWN0ZXJpc3RpYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTGVuVG9EZXZpY2UgPSBjaGFyYWN0ZXJpc3RpYztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbR0FUVF06IENhY2hlIEFwcERhdGFGcm9tSG9zdCBDaGFyYWN0ZXJpc3RpYyB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhcmRTZXJ2aWNlLmdldENoYXJhY3RlcmlzdGljKHRoaXMuZGV2aWNlRnJvbUhvc3REYXRhKVxyXG4gICAgICAgICAgICB9KS50aGVuKCBjaGFyYWN0ZXJpc3RpYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kQ2hhcmFjdGVyaXN0aWMgPSBjaGFyYWN0ZXJpc3RpYztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhpcyBsaWJyYXJ5IGlzIGJlaW5nIHVzZWQgaW4gYSB3ZWIgYXBwbGljYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgTWFrZSBzdXJlIHRoZSBkZXZpY2UgY2FuY2VscyBhbnkgYWN0aXZlIGNvbW1hbmQsIGFuZCBkaXNjb25uZWN0cyBwcm9wZXJseVxyXG4gICAgICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMub25EZXN0cm95SGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLm9uRGVzdHJveUhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0dBVFRdOiBTdWNjZXNzZnVsbHkgY2FjaGVkIGFsbCBHQVRUIHNlcnZpY2VzIGFuZCBjaGFyYWN0ZXJpc3RpY3MuIFJldHVybmluZyBzdWNjZXNzZnVsIHBhaXIgdG8gdXNlciB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlbGF5UHJvbWlzZSg0MDApXHJcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4gcGFyZW50UmVzb2x2ZSh7IFxyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IHN1Y2Nlc3NDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wZW5TdWNjZXNzXHJcbiAgICAgICAgICAgIH0pKS5jYXRjaChlcnIgPT4gcGFyZW50UmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikgKSlcclxuICAgICk7XHJcbiAgICBcclxuICAgIGRhdGFXYXRjaGVyID0gZXZlbnQgPT4ge1xyXG4gICAgICAgIGxldCBkYXRhRXZlbnQgPSBldmVudC50YXJnZXQudmFsdWUuZ2V0VWludDgoMCk7XHJcbiAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW05PVElGWTogQXBwRGF0YVRvSG9zdExlbmd0aF06ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhbZGF0YUV2ZW50XSl9IHx8ICR7bmV3IERhdGUoKX1gKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29tbWFuZFNlbnQgJiYgZGF0YUV2ZW50ID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRSZXNwQXZhaWxhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZFNlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkQ29tbWFuZFJlc3AoKTtcclxuICAgIH1cclxuXHJcbiAgICByZWFkQ29tbWFuZFJlc3AgPSAoKSA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4gKCF0aGlzLnJlY2VpdmVEYXRhQ2hhcikgP1xyXG4gICAgICAgIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihyZWFkRmFpbGVkKSlcclxuICAgICAgICA6IHRoaXMucmVjZWl2ZURhdGFDaGFyLnJlYWRWYWx1ZSgpXHJcbiAgICAgICAgICAgIC50aGVuKHZhbHVlID0+IHRoaXMucmVhZFZhbHVlSGFuZGxlcih2YWx1ZSkgKVxyXG4gICAgICAgICAgICAudGhlbih2YWx1ZSA9PiByZXNvbHZlKHZhbHVlKSlcclxuICAgICAgICAgICAgLmNhdGNoKCBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSBnYXR0QnVzeS5jb2RlICYmIGVyci5tZXNzYWdlID09PSBnYXR0QnVzeS5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0lORk9dOiBSZWFkIGZhaWxlZCBkdWUgdG8gZGV2aWNlIGJlaW5nIGJ1c3kuIEF0dGVtcHRpbmcgcmVhZCBhZ2FpbiB8fCAke25ldyBEYXRlKCl9YClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWxheVByb21pc2UoMTAwKS50aGVuKCgpID0+IHJlc29sdmUoIHRoaXMucmVhZENvbW1hbmRSZXNwKCkgKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikpXHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICByZWFkVmFsdWVIYW5kbGVyID0gcmVhZFZhbHVlID0+IG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcclxuICAgICAgICBjb25zdCBjb21tYW5kUmVzcCA9IHRoaXMucmVhZEJ5dGVBcnJheShyZWFkVmFsdWUpO1xyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtSRUFEOiBBcHBEYXRhVG9Ib3N0XTogJHt0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKGNvbW1hbmRSZXNwKX0gfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG5cclxuICAgICAgICBpZiAoY29tbWFuZFJlc3AubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaChjb21tYW5kUmVzcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnJlcG9ydElkcy5yZXNwb25zZUFjazpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggdGhpcy5wYXJzZUFja1Jlc3BvbnNlKGNvbW1hbmRSZXNwKSApXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucmVwb3J0SWRzLmRldmljZVN0YXRlUmVwb3J0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCB0aGlzLmhhbmRsZURldmljZVN0YXRlUmVwb3J0KGNvbW1hbmRSZXNwKSApXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucmVwb3J0SWRzLmNhcmRTdGF0dXNSZXBvcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoIHRoaXMuaGFuZGxlQ2FyZFN0YXR1c1JlcG9ydChjb21tYW5kUmVzcCkgKVxyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnJlcG9ydElkcy5jYXJkRGF0YVJlcG9ydDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggdGhpcy5oYW5kbGVDYXJkRGF0YVJlcG9ydChjb21tYW5kUmVzcCkgKVxyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnJlcG9ydElkcy5lbXZDYXJkaG9sZGVyU3RhdHVzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCB0aGlzLnRyYW5zYWN0aW9uU3RhdHVzQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFbXZDYXJkaG9sZGVySW50ZXJhY3Rpb25TdGF0dXMoY29tbWFuZFJlc3ApXHJcbiAgICAgICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucmVwb3J0SWRzLmVtdkNvbXBsZXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoIHRoaXMudHJhbnNhY3Rpb25TdGF0dXNDYWxsYmFjayhcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVtdkNvbXBsZXRpb24oY29tbWFuZFJlc3ApXHJcbiAgICAgICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucmVwb3J0SWRzLmJpZ0Jsb2NrRGF0YTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggdGhpcy5oYW5kbGVCaWdCbG9ja0RhdGEoY29tbWFuZFJlc3ApIClcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5yZXBvcnRJZHMucmVxdWVzdFNuOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCB0aGlzLmZvcm1hdFNlcmlhbE51bWJlcihjb21tYW5kUmVzcCkgKVxyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnJlcG9ydElkcy5kZXZpY2VDb25maWc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoIHRoaXMucGFyc2VEZXZpY2VDb25maWd1cmF0aW9uKGNvbW1hbmRSZXNwKSApXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucmVwb3J0SWRzLnBpblJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbkNhbGxiYWNrKCB0aGlzLnBhcnNlUGluUmVzcG9uc2UocGluUmVzcCkgKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucmVwb3J0SWRzLnNlbGVjdGlvblJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCB0aGlzLnBhcnNlQ2FyZGhvbGRlclJlc3BvbnNlKGNvbW1hbmRSZXNwKSApXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucmVwb3J0SWRzLmRpc3BsYXlSZXNwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrKCB0aGlzLmZpbmRPcGVyYXRpb25TdGF0dXMoY29tbWFuZFJlc3BbMV0pIClcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnJlcG9ydElkcy50aXBDYXNoYmFja1JlcG9ydDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggdGhpcy5wYXJzZVRpcENhc2hiYWNrUmVwb3J0KGNvbW1hbmRSZXNwKSApO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnJlcG9ydElkcy5kZWxheWVkQWNrOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFja1Jlc3AgPSB0aGlzLnBhcnNlQWNrUmVzcG9uc2UoY29tbWFuZFJlc3ApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25TdGF0dXNDYWxsYmFjayh7IGRlbGF5ZWRBQ0s6IGFja1Jlc3AgfSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggYWNrUmVzcCApXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBbRGF0YSBSZXNwXTogVGhlcmUgaXMgbm8gcGFyc2VyIGZvciB0aGlzIGRhdGEsIHJldHVybmluZyB0byBjYWxsZXI6ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhjb21tYW5kUmVzcCl9IHx8ICR7bmV3IERhdGUoKX1gXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggdGhpcy50cmFuc2FjdGlvbkNhbGxiYWNrKCBjb21tYW5kUmVzcCApICk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmVzb2x2ZSggY29tbWFuZFJlc3AgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGhhbmRsZUJpZ0Jsb2NrRGF0YSA9IGJpZ0Jsb2NrRGF0YSA9PiB7XHJcbiAgICAgICAgc3dpdGNoKGJpZ0Jsb2NrRGF0YVsyXSkge1xyXG4gICAgICAgICAgICBjYXNlIDB4MDA6XHJcbiAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQmlnQmxvY2tCZWdpbiggYmlnQmxvY2tEYXRhICk7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDB4NjM6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heEJsb2NrSWQgPSBNYXRoLm1heCguLi5PYmplY3Qua2V5cyh0aGlzLnJhd0RhdGEpKSArIDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUJpZ0Jsb2NrRmluaXNoKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRoaXMucmF3RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnJhd0RhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgWyBiaWdCbG9ja0RhdGFbMl0gXTogYmlnQmxvY2tEYXRhLnNsaWNlKDQpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2FyZFN0YXR1c1JlcG9ydCA9IGNvbW1hbmRSZXNwID0+IG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uU3RhdHVzQ2FsbGJhY2soXHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VDYXJkU3RhdHVzUmVwb3J0KGNvbW1hbmRSZXNwKVxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnN3aXBlSGFzQmVndW4gfHwgdGhpcy50cmFuc2FjdGlvbkhhc1N0YXJ0ZWQpID8gXHJcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbW1hbmRXaXRoUmVzcCggXHJcbiAgICAgICAgICAgICAgICAodGhpcy5zd2lwZUhhc0JlZ3VuID8gWzB4MDEsIDB4MEEsIDB4MDBdIDogWzB4MDEsIDB4QUIsIDB4MDBdKVxyXG4gICAgICAgICAgICApLnRoZW4oIGFja1Jlc3AgPT4gcmVzb2x2ZSggdGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrKGFja1Jlc3ApIClcclxuICAgICAgICAgICAgKS5jYXRjaChlcnIgPT4gdGhpcy5zZW5kRXJyVG9DYWxsYmFjayggdGhpcy5idWlsZERldmljZUVycihlcnIpICkpXHJcbiAgICAgICAgOiByZXNvbHZlKClcclxuICAgIH0pO1xyXG5cclxuICAgIGhhbmRsZURldmljZVN0YXRlUmVwb3J0ID0gY29tbWFuZFJlc3AgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGFHYXRoZXJlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFHYXRoZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9TZW5kIGFzc2VtYmxlZCB0cmFuc2FjdGlvbiBkYXRhIHRvIGNhbGxiYWNrXHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25DYWxsYmFjayh7XHJcbiAgICAgICAgICAgICAgICBzd2lwZURhdGE6IHRoaXMuY2FyZERhdGFPYmpcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uU3RhdHVzQ2FsbGJhY2soXHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VEZXZpY2VTdGF0ZVJlcG9ydChjb21tYW5kUmVzcClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNhcmREYXRhUmVwb3J0ID0gY29tbWFuZFJlc3AgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnN3aXBlSGFzQmVndW4pIHtcclxuICAgICAgICAgICAgdGhpcy5zd2lwZUhhc0JlZ3VuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YUdhdGhlcmVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb21tYW5kUmVzcC5sZW5ndGggIT09IDMpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJzZUNhcmREYXRhKGNvbW1hbmRSZXNwKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShcIltFUlJPUl0gVW5kb2N1bWVudGVkIENhcmQgRGF0YSBiZWxvd1wiKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShjb21tYW5kUmVzcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlcXVlc3RDYXJkU3dpcGUgPSBzd2lwZU9wdGlvbnMgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0aGlzLnN3aXBlSGFzQmVndW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2FyZERhdGFPYmogPSB7fTtcclxuICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbSU5GT106IE1TUiB0cmFuc2FjdGlvbiBiZWd1biB8fCAke25ldyBEYXRlKCl9YClcclxuXHJcbiAgICAgICAgcmV0dXJuICghdGhpcy5kZXZpY2UuZ2F0dC5jb25uZWN0ZWQpID8gcmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGRldmljZU5vdE9wZW4pKVxyXG4gICAgICAgICAgICA6IFxyXG4gICAgICAgICAgICB0aGlzLnNlbmRDb21tYW5kV2l0aFJlc3AoIHRoaXMuY2xlYXJTZXNzaW9uQ21kIClcclxuICAgICAgICAgICAgLnRoZW4oIGFja1Jlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrKGFja1Jlc3ApO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRDb21tYW5kV2l0aFJlc3AoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZFN3aXBlQ29tbWFuZCggKHN3aXBlT3B0aW9ucyB8fCB7fSkgKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KS50aGVuKCByZXNwID0+IHJlc29sdmUocmVzcClcclxuICAgICAgICAgICAgKS5jYXRjaCggZXJyID0+IHJlamVjdChlcnIpKVxyXG4gICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICBzdGFydFRyYW5zYWN0aW9uID0gZW12T3B0aW9ucyA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25IYXNTdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNhcmREYXRhT2JqID0ge307XHJcbiAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0lORk9dOiBFTVYgdHJhbnNhY3Rpb24gYmVndW4gfHwgJHtuZXcgRGF0ZSgpfWApXHJcblxyXG4gICAgICAgIHJldHVybiAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/IHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RPcGVuKSlcclxuICAgICAgICAgICAgOiB0aGlzLnNlbmRDb21tYW5kV2l0aFJlc3AodGhpcy5jbGVhclNlc3Npb25DbWQpXHJcbiAgICAgICAgICAgICAgICAudGhlbiggYWNrUmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25TdGF0dXNDYWxsYmFjayhhY2tSZXNwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRFbXZDb21tYW5kKCBlbXZPcHRpb25zIHx8IHt9IClcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oIGVtdkNvbW1tYW5kID0+XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQ29tbWFuZFdpdGhSZXNwKCBlbXZDb21tbWFuZCApXHJcbiAgICAgICAgICAgICAgICApLnRoZW4oIHJlc3AgPT4gcmVzb2x2ZShyZXNwKVxyXG4gICAgICAgICAgICAgICAgKS5jYXRjaChlcnIgPT4gcmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikgKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXF1ZXN0UGluRW50cnkgPSBwaW5PcHRpb25zID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW1BJTl06IFJlcXVlc3QgZm9yIFBJTiBlbnRyeSBzdGFydCB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/IHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RPcGVuKSlcclxuICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICB0aGlzLnNlbmRDb21tYW5kV2l0aFJlc3AoIHRoaXMuYnVpbGRQaW5Db21tYW5kKCBwaW5PcHRpb25zIHx8IHt9ICkgKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oIHJlc3AgPT4gcmVzb2x2ZShyZXNwKVxyXG4gICAgICAgICAgICAgICAgKS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7IFxyXG5cclxuICAgIHNlbmRCaWdCbG9ja0RhdGEgPSAoZGF0YVR5cGUsIGRhdGFMZW4sIGRhdGEpID0+IG5ldyBQcm9taXNlKChwYXJlbnRSZXNvbHZlLCBwYXJlbnRSZWplY3QpID0+IHtcclxuICAgICAgICBsZXQgYmxvY2taZXJvID0gWzB4MDEsIDB4MTAsIGRhdGFUeXBlLCAweDAwLCAoZGF0YUxlbiAmIDB4RkYpXTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFMZW4gPCA2MCkge1xyXG4gICAgICAgICAgICBibG9ja1plcm8gPSBibG9ja1plcm8uY29uY2F0KC4uLnRoaXMubmV3QXJyYXlQYXJ0aWFsKDB4MDAsIDYwKSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtTZW5kIEJpZyBCbG9jayBEYXRhIExlZ2FjeV06ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhibG9ja1plcm8pfWApO1xyXG5cclxuICAgICAgICAgICAgbGV0IGxlZ2FjeURhdGEgPSBbMHgwMSwgMHgxMCwgZGF0YVR5cGUsIDB4MDEsIGRhdGFMZW4sIC4uLmRhdGFdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxlZ2FjeURhdGEubGVuZ3RoIDwgNjUpXHJcbiAgICAgICAgICAgICAgICBsZWdhY3lEYXRhID0gbGVnYWN5RGF0YS5jb25jYXQoLi4udGhpcy5uZXdBcnJheVBhcnRpYWwoMHgwMCwgKDY1IC0gbGVnYWN5RGF0YS5sZW5ndGgpKSlcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRQaW5Db21tYW5kKGJsb2NrWmVybykudGhlbigoKSA9PiB0aGlzLnNlbmRQaW5Db21tYW5kKGxlZ2FjeURhdGEpXHJcbiAgICAgICAgICAgICAgICApLnRoZW4oKCkgPT4gcGFyZW50UmVzb2x2ZSgpXHJcbiAgICAgICAgICAgICAgICApLmNhdGNoKGVyciA9PiBwYXJlbnRSZWplY3QodGhpcy5idWlsZERldmljZUVycihlcnIpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBibG9ja1plcm8gPSBibG9ja1plcm8uY29uY2F0KFtcclxuICAgICAgICAgICAgICAgICgoZGF0YUxlbiA+PiA4KSAmIDB4RkYpLCBcclxuICAgICAgICAgICAgICAgICgoZGF0YUxlbiA+PiAxNikgJiAweEZGKSwgXHJcbiAgICAgICAgICAgICAgICAoKGRhdGFMZW4gPj4gMjQpICYgMHhGRiksIFxyXG4gICAgICAgICAgICAgICAgMHgwMSwgXHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLm5ld0FycmF5UGFydGlhbCgweDAwLCA1NilcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kRXh0ZW5kZWRCaWdCbG9ja0RhdGEoZGF0YVR5cGUsIGRhdGFMZW4sIGRhdGEsIGJsb2NrWmVybykudGhlbigoKSA9PiBwYXJlbnRSZXNvbHZlKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHNlbmRFeHRlbmRlZEJpZ0Jsb2NrRGF0YSA9IChkYXRhVHlwZSwgZGF0YUxlbiwgZGF0YSwgYmxvY2taZXJvKSA9PiBuZXcgUHJvbWlzZSggKHBhcmVudFJlc29sdmUsIHBhcmVudFJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG51bWJlck9mQmxvY2tzID0gTWF0aC5jZWlsKGRhdGFMZW4gLyA2MCk7XHJcbiAgICAgICAgbGV0IHdvcmtpbmdPblByb21pc2UgPSBmYWxzZTtcclxuICAgICAgICBsZXQgY29tbWFuZEJsb2NrcyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbU2VuZCBCaWcgQmxvY2sgRGF0YSBFeHRlbmRlZF06ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhibG9ja1plcm8pfSB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJlZ2luUXVldWUgPSAoKSA9PiBuZXcgUHJvbWlzZSgoYmVnaW5RdWV1ZVJlc29sdmUsIGJlZ2luUXVldWVSZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKHdvcmtpbmdPblByb21pc2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWxheVByb21pc2UoNTAwKS50aGVuKCgpID0+IGJlZ2luUXVldWVSZXNvbHZlKCBiZWdpblF1ZXVlKCkgKSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRhQmxvY2sgPSBjb21tYW5kQmxvY2tzLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWRhdGFCbG9jaylcclxuICAgICAgICAgICAgICAgIHJldHVybiBiZWdpblF1ZXVlUmVzb2x2ZSh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHdvcmtpbmdPblByb21pc2UgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRhdGFCbG9jay5xdWV1ZWRQcm9taXNlKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IGRhdGFCbG9jay5yZXNvbHZlKClcclxuICAgICAgICAgICAgICAgICkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgd29ya2luZ09uUHJvbWlzZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiZWdpblF1ZXVlUmVzb2x2ZSggYmVnaW5RdWV1ZSgpIClcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgd29ya2luZ09uUHJvbWlzZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiZWdpblF1ZXVlUmVqZWN0KCBkYXRhQmxvY2sucmVqZWN0KGVycikgKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVucXVldWUgPSBxdWV1ZWRQcm9taXNlID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29tbWFuZEJsb2Nrcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlZFByb21pc2UsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlLFxyXG4gICAgICAgICAgICAgICAgcmVqZWN0LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZW5xdWV1ZSggXHJcbiAgICAgICAgICAgICgpID0+IG5ldyBQcm9taXNlKGlubmVyUmVzb2x2ZSA9PiBcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBpbkNvbW1hbmQoYmxvY2taZXJvKS50aGVuKCgpID0+IGlubmVyUmVzb2x2ZSgpKSApIFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBibG9jayA9IDE7IGJsb2NrIDw9IG51bWJlck9mQmxvY2tzOyBpICsgNjAsIGJsb2NrKyspIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFGb3JCbG9jayA9IGRhdGEuc2xpY2UoaSwgKGkgKyA2MCkpO1xyXG4gICAgICAgICAgICBsZXQgYmxvY2tDbWQgPSBbMHgwMSwgMHgxMCwgZGF0YVR5cGUsIGJsb2NrLCBkYXRhRm9yQmxvY2subGVuZ3RoLCAuLi5kYXRhRm9yQmxvY2tdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJsb2NrQ21kLmxlbmd0aCAhPT0gNjUpXHJcbiAgICAgICAgICAgICAgICBibG9ja0NtZCA9IGJsb2NrQ21kLmNvbmNhdCggLi4udGhpcy5uZXdBcnJheVBhcnRpYWwoMHgwMCwgKDY1IC0gYmxvY2tDbWQubGVuZ3RoKSkgKVxyXG5cclxuICAgICAgICAgICAgZW5xdWV1ZSggXHJcbiAgICAgICAgICAgICAgICAoKSA9PiBuZXcgUHJvbWlzZSggaW5uZXJSZXNvbHZlID0+IFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBpbkNvbW1hbmQoYmxvY2tDbWQpLnRoZW4oICgpID0+IGlubmVyUmVzb2x2ZSgpKSApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbU2VuZCBCaWcgQmxvY2sgRGF0YSBFeHRlbmRlZF06IEV4ZWN1dGluZyBxdWV1ZSBvZiAke2NvbW1hbmRCbG9ja3MubGVuZ3RofSBjb21tYW5kcyB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgIHJldHVybiBiZWdpblF1ZXVlKCkudGhlbihiZWdpblF1ZVJlc3AgPT4gcGFyZW50UmVzb2x2ZShiZWdpblF1ZVJlc3ApKS5jYXRjaChlcnIgPT4gcGFyZW50UmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2VuZEFycGMgPSBhcnBjUmVzcCA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/XHJcbiAgICAgICAgcmVqZWN0KHRoaXMuYnVpbGREZXZpY2VFcnIoZGV2aWNlTm90T3BlbikpXHJcbiAgICAgICAgOiB0aGlzLnNlbmRBcnBjQmFzZShhcnBjUmVzcClcclxuICAgICAgICAudGhlbihhcnBjQ21kID0+IHRoaXMuZGVsYXlQcm9taXNlKDIwMCwgYXJwY0NtZClcclxuICAgICAgICApLnRoZW4oY21kID0+IHRoaXMuc2VuZENvbW1hbmRXaXRoUmVzcChjbWQpXHJcbiAgICAgICAgKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbU2VuZCBBUlBDIFJlc3VsdF06ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhyZXNwKX1gKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3ApO1xyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QodGhpcy5idWlsZERldmljZUVycihlcnIpKSlcclxuICAgICk7XHJcblxyXG4gICAgcmVxdWVzdFRpcE9yQ2FzaGJhY2sgPSB0aXBDYXNoYmFja09wdGlvbnMgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKCF0aGlzLmRldmljZS5nYXR0LmNvbm5lY3RlZCkgP1xyXG4gICAgICAgIHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGRldmljZU5vdE9wZW4pKVxyXG4gICAgICAgIDogdGhpcy5idWlsZFRpcE9yQ2FzaGJhY2tDbWQoICh0aXBDYXNoYmFja09wdGlvbnMgfHwge30gKSlcclxuICAgICAgICAgICAgLnRoZW4odGlwQ2FzaGJhY2tDbWQgPT4gdGhpcy5zZW5kQ29tbWFuZFdpdGhSZXNwKHRpcENhc2hiYWNrQ21kKVxyXG4gICAgICAgICAgICApLnRoZW4ocmVzcCA9PiByZXNvbHZlKHJlc3ApXHJcbiAgICAgICAgICAgICkuY2F0Y2goZXJyID0+IHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikpKVxyXG4gICAgKTtcclxuXHJcbiAgICBzZXREaXNwbGF5TWVzc2FnZSA9IGRpc3BsYXlPcHRpb25zID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IFxyXG4gICAgICAgICh0aGlzLmRldmljZSAmJiB0aGlzLmRldmljZS5nYXR0LmNvbm5lY3RlZCkgPyBcclxuICAgICAgICAgICAgdGhpcy5idWlsZERpc3BsYXlDbWQoIChkaXNwbGF5T3B0aW9ucyB8fCB7fSkgKS50aGVuKCBjbWQgPT4gdGhpcy5zZW5kQ29tbWFuZFdpdGhSZXNwKGNtZCkgXHJcbiAgICAgICAgICAgICAgICApLnRoZW4ocmVzcCA9PiByZXNvbHZlKHJlc3ApXHJcbiAgICAgICAgICAgICAgICApLmNhdGNoKGVyciA9PiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZXJyKSApKVxyXG4gICAgICAgICAgICA6IHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RPcGVuKSkgKTtcclxuXHJcbiAgICBzZW5kUGluQ29tbWFuZCA9IHdyaXRlQ29tbWFuZCA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtBcHBGcm9tSG9zdExlbmd0aF06ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhbd3JpdGVDb21tYW5kLmxlbmd0aF0pfSB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoIXRoaXMuc2VuZExlblRvRGV2aWNlKSA/IHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihjb21tYW5kTm90U2VudEZyb21Ib3N0KSApXHJcbiAgICAgICAgOiB0aGlzLnNlbmRMZW5Ub0RldmljZS53cml0ZVZhbHVlKFVpbnQ4QXJyYXkub2YoIHdyaXRlQ29tbWFuZC5sZW5ndGggKSlcclxuICAgICAgICAgICAgLnRoZW4oICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtBcHBGcm9tSG9zdERhdGFdOiAke3RoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcod3JpdGVDb21tYW5kKX0gfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kU2VudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggdGhpcy5jb21tYW5kQ2hhcmFjdGVyaXN0aWMud3JpdGVWYWx1ZSggVWludDhBcnJheS5mcm9tKHdyaXRlQ29tbWFuZCkgKSApXHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRTZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycilcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzZW5kQ29tbWFuZFdpdGhSZXNwID0gd3JpdGVDb21tYW5kID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB0aGlzLnNlbmRQaW5Db21tYW5kKHdyaXRlQ29tbWFuZClcclxuICAgICAgICAudGhlbiggKCkgPT4gKHRoaXMuY29tbWFuZFJlc3BBdmFpbGFibGUpID8gUHJvbWlzZS5yZXNvbHZlKHRydWUpIDogdGhpcy53YWl0Rm9yRGV2aWNlUmVzcG9uc2UoMTYpIClcclxuICAgICAgICAudGhlbiggd2FpdFJlc3AgPT4gKHdhaXRSZXNwKSA/IHRoaXMucmVhZENvbW1hbmRSZXNwKCkgOiB0aGlzLnRyeUNvbW1hbmRBZ2Fpbih3cml0ZUNvbW1hbmQpIClcclxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRSZXNwQXZhaWxhYmxlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSggcmVzcG9uc2UgKTtcclxuICAgICAgICB9KS5jYXRjaCggZXJyID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb21tYW5kUmVzcEF2YWlsYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihlcnIpIClcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICB0cnlDb21tYW5kQWdhaW4gPSB3cml0ZUNvbW1hbmQgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IHRoaXMuc2VuZFBpbkNvbW1hbmQod3JpdGVDb21tYW5kKVxyXG4gICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLndhaXRGb3JEZXZpY2VSZXNwb25zZSg1KSApXHJcbiAgICAgICAgLnRoZW4oIHdhaXRSZXNwID0+ICh3YWl0UmVzcCkgPyByZXNvbHZlKCB0aGlzLnJlYWRDb21tYW5kUmVzcCgpIClcclxuICAgICAgICAgICAgOiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIocmVzcG9uc2VOb3RSZWNlaXZlZCkgKVxyXG4gICAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgLy8jcmVnaW9uIEdldERldmljZUluZm9cclxuICAgIGdldERldmljZUluZm8gPSAoKSA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4gKCF0aGlzLmRldmljZS5nYXR0LmNvbm5lY3RlZCkgP1xyXG4gICAgICAgIHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGRldmljZU5vdE9wZW4pKSBcclxuICAgICAgICA6IHRoaXMuZ2F0aGVyRGV2aWNlSW5mbygpXHJcbiAgICAgICAgICAgIC50aGVuKCBkZXZpY2VJbmZvID0+IHJlc29sdmUoZGV2aWNlSW5mbylcclxuICAgICAgICAgICAgKS5jYXRjaChlcnIgPT4gcmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikpIClcclxuICAgICk7XHJcblxyXG4gICAgZ2F0aGVyRGV2aWNlSW5mbyA9ICgpID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiAodGhpcy5kZXZpY2VTZXJpYWxOdW1iZXIpID8gXHJcbiAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgIHNlcmlhbE51bWJlcjogdGhpcy5kZXZpY2VTZXJpYWxOdW1iZXIsXHJcbiAgICAgICAgICAgIGRldmljZU5hbWU6IHRoaXMuZGV2aWNlLm5hbWUsXHJcbiAgICAgICAgICAgIGRldmljZVR5cGU6IHRoaXMuZGV2aWNlVHlwZSxcclxuICAgICAgICAgICAgaXNDb25uZWN0ZWQ6IHRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkXHJcbiAgICAgICAgfSkgXHJcbiAgICAgICAgOiB0aGlzLmNoZWNrSWZEZXZpY2VJZGxlKClcclxuICAgICAgICAgICAgLnRoZW4oICgpID0+IHRoaXMuZ2V0RGV2aWNlSW5mb1Byb2NlZWQoKVxyXG4gICAgICAgICAgICApLnRoZW4oICgpID0+IHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbE51bWJlcjogdGhpcy5kZXZpY2VTZXJpYWxOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlTmFtZTogdGhpcy5kZXZpY2UubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBkZXZpY2VUeXBlOiB0aGlzLmRldmljZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNDb25uZWN0ZWQ6IHRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSlcclxuICAgICk7XHJcblxyXG4gICAgZ2V0RGV2aWNlSW5mb1Byb2NlZWQgPSAoKSA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2VuZFBpbkNvbW1hbmQoWzB4MDAsIDB4MUEsIDB4MDVdKVxyXG4gICAgICAgIC50aGVuKCAoKSA9PiAodGhpcy5kZXZpY2VTZXJpYWxOdW1iZXIpID8gUHJvbWlzZS5yZXNvbHZlKHRydWUpIDogdGhpcy53YWl0Rm9yU24oNykgXHJcbiAgICAgICAgKS50aGVuKCB3YWl0UmVzcCA9PiAod2FpdFJlc3ApID8gcmVzb2x2ZSgpIDogXHJcbiAgICAgICAgICAgIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihyZXNwb25zZU5vdFJlY2VpdmVkKSlcclxuICAgICAgICApLmNhdGNoKCBlcnIgPT4gcmVqZWN0KGVycikpXHJcbiAgICB9KVxyXG5cclxuICAgIGNoZWNrSWZEZXZpY2VJZGxlID0gKCkgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBcclxuICAgICAgICB0aGlzLnNlbmRDb21tYW5kV2l0aFJlc3AoWzB4MDEsIDB4MUEsIDB4MDVdKVxyXG4gICAgICAgICAgICAudGhlbiggYWNrUmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWNrUmVzcC5jb2RlID09PSAweDgxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJTZXNzaW9uKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4gcmVzb2x2ZSggdGhpcy5jaGVja0lmRGV2aWNlSWRsZSgpICkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrKGFja1Jlc3ApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHdhaXRGb3JTbiA9IG1heFRyaWVzID0+IG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcclxuXHJcbiAgICAgICAgY29uc3Qgd2FpdEZvclJlc3BvbnNlID0gdHJ5TnVtYmVyID0+IFxyXG4gICAgICAgICAgICAodHJ5TnVtYmVyIDwgbWF4VHJpZXMpID8gXHJcbiAgICAgICAgICAgICAgICAodGhpcy5kZXZpY2VTZXJpYWxOdW1iZXIpID8gcmVzb2x2ZSggdHJ1ZSApIDogc2V0VGltZW91dCgoKSA9PiB3YWl0Rm9yUmVzcG9uc2UodHJ5TnVtYmVyICsgMSksIDIwMClcclxuICAgICAgICAgICAgOiByZXNvbHZlKCBmYWxzZSApO1xyXG5cclxuICAgICAgICB3YWl0Rm9yUmVzcG9uc2UoMCk7XHJcbiAgICB9KTtcclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIGNhbmNlbFRyYW5zYWN0aW9uID0gKCkgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+ICghdGhpcy5jb21tYW5kQ2hhcmFjdGVyaXN0aWMpID8gXHJcbiAgICAgICAgcmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGNvbW1hbmROb3RTZW50KSlcclxuICAgICAgICA6IHRoaXMuc2VuZENvbW1hbmRXaXRoUmVzcChbMHgwMSwgMHgwNSwgMHgwMF0pXHJcbiAgICAgICAgLnRoZW4oIGFja1Jlc3AgPT4gcmVzb2x2ZShhY2tSZXNwKSApXHJcbiAgICAgICAgLmNhdGNoKCBlcnIgPT4gcmVqZWN0KGVycikgKVxyXG4gICAgKTtcclxuXHJcbiAgICBjbGVhclNlc3Npb24gPSAoKSA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtDbGVhclNlc3Npb25dOiBSZXF1ZXN0IHRvIGNsZWFyIHNlc3Npb24gfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG5cclxuICAgICAgICByZXR1cm4gKCF0aGlzLnNlbmRMZW5Ub0RldmljZSkgPyByZXNvbHZlKG5vU2Vzc2lvblRvQ2xlYXIpIFxyXG4gICAgICAgICAgICA6IHRoaXMuc2VuZENvbW1hbmRXaXRoUmVzcCh0aGlzLmNsZWFyU2Vzc2lvbkNtZClcclxuICAgICAgICAgICAgLnRoZW4oIGFja1Jlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrKGFja1Jlc3ApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0NsZWFyU2Vzc2lvbl06IFJlY2VpdmVkIGNsZWFyIHNlc3Npb24gcmVzcG9uc2UgfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckludGVybmFsU3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFja1Jlc3ApXHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZXJyKSApKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNsb3NlUGluRGV2aWNlID0gKCkgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+ICghdGhpcy5jYXJkRGF0YUxpc3RlbmVyKSA/XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCkudGhlbiggKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbQ2xvc2UgRGV2aWNlXTogRGV2aWNlIENsb3NlZC4gQ2xlYXJpbmcgSlMgY2FjaGUgfHwgJHtuZXcgRGF0ZSgpfWApO1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyR2F0dENhY2hlKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoIGVyciApIClcclxuICAgICAgICA6IHRoaXMuY2FyZERhdGFMaXN0ZW5lci5zdG9wTm90aWZpY2F0aW9ucygpXHJcbiAgICAgICAgLnRoZW4oICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0Nsb3NlIERldmljZV06IEdBVFQgbm90aWZpY2F0aW9ucyBzdG9wcGVkLiBDbGVhcmluZyBKUyBjYWNoZSB8fCAke25ldyBEYXRlKCl9YCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcmREYXRhTGlzdGVuZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhcmFjdGVyaXN0aWN2YWx1ZWNoYW5nZWQnLCB0aGlzLmRhdGFXYXRjaGVyKTtcclxuICAgICAgICAgICAgdGhpcy5jYXJkRGF0YUxpc3RlbmVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckdhdHRDYWNoZSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoIHRoaXMuZGlzY29ubmVjdCgpIClcclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KCBlcnIgKSApXHJcbiAgICApO1xyXG5cclxuICAgIGNsb3NlRGV2aWNlID0gKCkgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+ICghdGhpcy5kZXZpY2UuZ2F0dC5jb25uZWN0ZWQpID8gXHJcbiAgICAgICAgcmVzb2x2ZShzdWNjZXNzZnVsQ2xvc2UpIFxyXG4gICAgICAgIDogdGhpcy5jbGVhclNlc3Npb24oKVxyXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gdGhpcy5jbG9zZVBpbkRldmljZSgpXHJcbiAgICAgICAgICAgICkudGhlbigoKT0+IHJlc29sdmUoc3VjY2Vzc2Z1bENsb3NlKVxyXG4gICAgICAgICAgICApLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QodGhpcy5idWlsZERldmljZUVycihlcnIpIClcclxuICAgICAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgY2xlYXJJbnRlcm5hbFN0YXRlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY29tbWFuZFNlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRSZXNwQXZhaWxhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kYXRhR2F0aGVyZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzUXVpY2tDaGlwVHJhbnNhY3Rpb24gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyR2F0dENhY2hlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25IYXNTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlRGF0YUNoYXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZENoYXJhY3RlcmlzdGljID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbmRMZW5Ub0RldmljZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbGVhckludGVybmFsU3RhdGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zd2lwZUhhc0JlZ3VuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50cmFuc2FjdGlvbkhhc1N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGluUGFkO1xyXG4iLCJpbXBvcnQgUGluUGFkIGZyb20gJy4vcGluUGFkJztcclxuaW1wb3J0IHsgIGRwTWluaSB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XHJcblxyXG5jbGFzcyBEcE1pbmkgZXh0ZW5kcyBQaW5QYWQge1xyXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBjYWxsQmFja3MpIHtcclxuICAgICAgICBzdXBlcihkZXZpY2UsIGNhbGxCYWNrcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5kZXZpY2VUeXBlID0gZHBNaW5pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEcE1pbmk7XHJcbiIsImltcG9ydCBQaW5QYWQgZnJvbSAnLi9waW5QYWQnO1xyXG5pbXBvcnQgeyBkeW5hUHJvR28gfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xyXG5cclxuY2xhc3MgRHluYVByb0dvIGV4dGVuZHMgUGluUGFkIHtcclxuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgY2FsbEJhY2tzKSB7XHJcbiAgICAgICAgc3VwZXIoZGV2aWNlLCBjYWxsQmFja3MpO1xyXG5cclxuICAgICAgICB0aGlzLmRldmljZVR5cGUgPSBkeW5hUHJvR287XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IER5bmFQcm9HbzsiLCJpbXBvcnQgRGV2aWNlQmFzZSBmcm9tICcuLi9kZXZpY2VzL2Jhc2VDbGFzcyc7XHJcblxyXG5jbGFzcyBTY3JhU3dpcGVQYXJzZXIgZXh0ZW5kcyBEZXZpY2VCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgY2FsbEJhY2tzKSB7XHJcbiAgICAgICAgc3VwZXIoZGV2aWNlLCBjYWxsQmFja3MpO1xyXG5cclxuICAgICAgICB0aGlzLmRhdGFOYW1lcyA9IFtcclxuICAgICAgICAgICAgJ3RyYWNrMScsXHJcbiAgICAgICAgICAgICd0cmFjazInLFxyXG4gICAgICAgICAgICAndHJhY2szJyxcclxuICAgICAgICAgICAgJ2tzbicsXHJcbiAgICAgICAgICAgICdtYWduZVByaW50JyxcclxuICAgICAgICAgICAgJ21hZ25lUHJpbnRTdGF0dXMnLFxyXG4gICAgICAgICAgICAnc2VyaWFsTnVtYmVyJyxcclxuICAgICAgICAgICAgJ2VuY1Nlc3Npb25JZCcsXHJcbiAgICAgICAgICAgICd0cmFjazFNYXNrZWQnLFxyXG4gICAgICAgICAgICAndHJhY2syTWFza2VkJyxcclxuICAgICAgICAgICAgJ3RyYWNrM01hc2tlZCdcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICB0aGlzLm9mZnNldCA9IDM7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhY2tJbmRpY2VzID0gb2Zmc2V0ID0+IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIHRyYWNrMURlY29kZVN0YXR1czogb2Zmc2V0LFxyXG4gICAgICAgIHRyYWNrMkRlY29kZVN0YXR1czogb2Zmc2V0ICsgMSxcclxuICAgICAgICB0cmFjazNEZWNvZGVTdGF0dXM6IG9mZnNldCArIDIsXHJcbiAgICAgICAgdHJhY2sxTGVuOiBvZmZzZXQgKyAzLFxyXG4gICAgICAgIHRyYWNrMkxlbjogb2Zmc2V0ICsgNCxcclxuICAgICAgICB0cmFjazNMZW46IG9mZnNldCArIDUsXHJcbiAgICAgICAgY2FyZEVuY29kZVR5cGU6IG9mZnNldCArIDYsXHJcbiAgICAgICAgdHJhY2sxU3RhcnQ6IG9mZnNldCArIDcsXHJcbiAgICAgICAgdHJhY2sxRW5kOiBvZmZzZXQgKyAxMTgsXHJcbiAgICAgICAgdHJhY2syU3RhcnQ6IG9mZnNldCArIDExOSxcclxuICAgICAgICB0cmFjazJFbmQ6IG9mZnNldCArIDIzMCxcclxuICAgICAgICB0cmFjazNTdGFydDogb2Zmc2V0ICsgMjMxLFxyXG4gICAgICAgIHRyYWNrM0VuZDogb2Zmc2V0ICsgMzQyLFxyXG4gICAgICAgIGNhcmRTdGF0dXM6IG9mZnNldCArIDM0MyxcclxuICAgICAgICBtYWduZVByaW50U3RhdHVzU3RhcnQ6IG9mZnNldCArIDM0NCxcclxuICAgICAgICBtYWduZVByaW50U3RhdHVzRW5kOiBvZmZzZXQgKyAgMzQ3LFxyXG4gICAgICAgIG1hZ25lUHJpbnRMZW46IG9mZnNldCArIDM0OCxcclxuICAgICAgICBtYWduZVByaW50U3RhcnQ6IG9mZnNldCArIDM0OSxcclxuICAgICAgICBtYWduZVByaW50RW5kOiBvZmZzZXQgKyA0NzYsXHJcbiAgICAgICAgc2VyaWFsTnVtYmVyU3RhcnQ6IG9mZnNldCArIDQ3NyxcclxuICAgICAgICBzZXJpYWxOdW1iZXJFbmQ6IG9mZnNldCArIDQ5MixcclxuICAgICAgICBkZXZpY2VFbmNTdGF0dXNTdGFydDogb2Zmc2V0ICsgNDkzLFxyXG4gICAgICAgIGRldmljZUVuY1N0YXR1c0VuZDogb2Zmc2V0ICsgNDk0LFxyXG4gICAgICAgIGtzblN0YXJ0OiBvZmZzZXQgKyA0OTUsXHJcbiAgICAgICAga3NuRW5kOiBvZmZzZXQgKyA1MDQsXHJcbiAgICAgICAgdHJhY2sxTWFza2VkTGVuOiBvZmZzZXQgKyA1MDUsXHJcbiAgICAgICAgdHJhY2syTWFza2VkTGVuOiBvZmZzZXQgKyA1MDYsXHJcbiAgICAgICAgdHJhY2szTWFza2VkTGVuOiBvZmZzZXQgKyA1MDcsXHJcbiAgICAgICAgdHJhY2sxTWFza2VkU3RhcnQ6IG9mZnNldCArIDUwOCxcclxuICAgICAgICB0cmFjazFNYXNrZWRFbmQ6IG9mZnNldCArIDYxOSxcclxuICAgICAgICB0cmFjazJNYXNrZWRTdGFydDogb2Zmc2V0ICsgNjIwLFxyXG4gICAgICAgIHRyYWNrMk1hc2tlZEVuZDogb2Zmc2V0ICsgNzMxLFxyXG4gICAgICAgIHRyYWNrM01hc2tlZFN0YXJ0OiBvZmZzZXQgKyA3MzIsXHJcbiAgICAgICAgdHJhY2szTWFza2VkRW5kOiBvZmZzZXQgKyA4NDMsXHJcbiAgICAgICAgZW5jU2Vzc2lvbklkU3RhcnQ6IG9mZnNldCArIDg0NCxcclxuICAgICAgICBlbmNTZXNzaW9uSWRFbmQ6IG9mZnNldCArIDg1MSxcclxuICAgICAgICB0cmFjazFBYnNMZW46IG9mZnNldCArIDg1MixcclxuICAgICAgICB0cmFjazJBYnNMZW46IG9mZnNldCArIDg1MyxcclxuICAgICAgICB0cmFjazNBYnNMZW46IG9mZnNldCArIDg1NCxcclxuICAgICAgICBtYWduZVByaW50QWJzTGVuOiBvZmZzZXQgKyA4NTVcclxuICAgIH0pO1xyXG5cclxuICAgIHBhcnNlSGlkRGF0YSA9IGRhdGEgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRyYWNrUG9zaXRpb25zID0gdGhpcy50cmFja0luZGljZXModGhpcy5vZmZzZXQpO1xyXG4gICAgICAgIGxldCB0cmFja0luZm8gPSB7fTtcclxuICAgIFxyXG4gICAgICAgIC8vSXRlcmF0ZSB0aHJvdWdoIHRyYWNrIG5hbWVzIGFuZCBmb3JtYXQgaW4ga2V5IHZhbHVlIHBhaXIgZm9ybWF0LlxyXG4gICAgICAgIHRoaXMuZGF0YU5hbWVzLmZvckVhY2goIGRhdGFQcm9wID0+IHtcclxuXHJcbiAgICAgICAgICAgIGxldCB0cmFja0RhdGEgPSBkYXRhLnNsaWNlKFxyXG4gICAgICAgICAgICAgICAgdHJhY2tQb3NpdGlvbnNbYCR7ZGF0YVByb3B9U3RhcnRgXSwgdHJhY2tQb3NpdGlvbnNbYCR7ZGF0YVByb3B9RW5kYF0gKyAxXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHJhY2tQb3NpdGlvbnMuaGFzT3duUHJvcGVydHkoYCR7ZGF0YVByb3B9TGVuYCkpIHtcclxuICAgICAgICAgICAgICAgIHRyYWNrRGF0YSA9IHRyYWNrRGF0YS5zbGljZShcclxuICAgICAgICAgICAgICAgICAgICAwLCBkYXRhW3RyYWNrUG9zaXRpb25zW2Ake2RhdGFQcm9wfUxlbmBdXVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICBTcGVjaWFsIGZvcm1hdHRpbmcgaXMgbmVlZGVkIGZvciB0cmFjazJNYXNrZWQsIHRyYWNrcyB3aXRoIGEgXCJEZWNvZGVTdGF0dXNcIiBmaWVsZCwgRGV2aWNlIFNlcmlhbCBOdW1iZXIsIGFuZCB0cmFja3MgdGhhdCBoYXZlIGEgXCJtYXNrZWRcIiBzdWZmaXguXHJcbiAgICAgICAgICAgICAgICBUaGUgYmVsb3cgdGVybmFyeSByZXR1cm5zIHRoZSBwcm9wZXIgZm9ybWF0LCBkZXBlbmRpbmcgb24gdHJhY2sgbmFtZSwgYW5kIHBlcmZvcm1zIG11Y2ggYmV0dGVyIHRoYW4gaWYvZWxzZWlmL2Vsc2Ugc3RhdGVtZW50LlxyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0cmFja0luZm8gPSAoZGF0YVByb3AgPT09ICd0cmFjazJNYXNrZWQnKSA/IHRoaXMuZm9ybWF0VHJhY2syTWFza2VkKCB0cmFja0luZm8sIGRhdGFQcm9wLCB0aGlzLmJ1ZmZlclRvVXRmOCh0cmFja0RhdGEpICkgOiBcclxuICAgICAgICAgICAgICAgICh0cmFja1Bvc2l0aW9ucy5oYXNPd25Qcm9wZXJ0eShgJHtkYXRhUHJvcH1EZWNvZGVTdGF0dXNgKSkgPyB0aGlzLmZvcm1hdFRyYWNrV2l0aERlY29kZSggdHJhY2tJbmZvLCBkYXRhUHJvcCwgZGF0YVt0cmFja1Bvc2l0aW9uc1tgJHtkYXRhUHJvcH1EZWNvZGVTdGF0dXNgXV0sIHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcodHJhY2tEYXRhKSApIDogXHJcbiAgICAgICAgICAgICAgICAgICAgKGRhdGFQcm9wID09PSAnc2VyaWFsTnVtYmVyJykgPyB0aGlzLmZvcm1hdFNlcmlhbE51bWJlcih0cmFja0luZm8sIHRyYWNrRGF0YSkgOiBcclxuICAgICAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50cmFja0luZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRhUHJvcF0gOiAoZGF0YVByb3AudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnbWFza2VkJykpID8gdGhpcy5idWZmZXJUb1V0ZjgodHJhY2tEYXRhKSA6IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcodHJhY2tEYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB7IHN3aXBlRGF0YTogeyAuLi50cmFja0luZm8gfSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdFNlcmlhbE51bWJlciA9ICh0cmFja0luZm8sIHRyYWNrRGF0YSkgPT4gKHtcclxuICAgICAgICAuLi50cmFja0luZm8sXHJcbiAgICAgICAgc2VyaWFsTnVtYmVyOiB0aGlzLmJ1ZmZlclRvVXRmOCggKHRyYWNrRGF0YS5sZW5ndGggPiA3ID8gdHJhY2tEYXRhLnNsaWNlKDAsIDcpIDogdHJhY2tEYXRhICkgKVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy9Nb3ZlZCBFeHAgYW5kIFBBTiBmb3JtYXRpbmcgdG8gVXRpbHMgY2xhc3MgLSBmb3IgaW5oZXJpdGFuY2UuXHJcblxyXG4gICAgZm9ybWF0VHJhY2syTWFza2VkID0gKHRyYWNrSW5mbywgZGF0YVByb3AsIHRyYWNrMk1hc2tlZCkgPT4gKHtcclxuICAgICAgICAuLi50cmFja0luZm8sXHJcbiAgICAgICAgW2RhdGFQcm9wXSA6IHRyYWNrMk1hc2tlZCxcclxuICAgICAgICAuLi50aGlzLmZvcm1hdEV4cFBBTih0cmFjazJNYXNrZWQpXHJcbiAgICB9KTtcclxuXHJcbiAgICBmb3JtYXRUcmFja1dpdGhEZWNvZGUgPSAodHJhY2tJbmZvLCBkYXRhUHJvcCwgZGVjb2RlU3RhdHVzVmFsdWUsIHRyYWNrVmFsdWUpID0+ICh7XHJcbiAgICAgICAgLi4udHJhY2tJbmZvLFxyXG4gICAgICAgIFtkYXRhUHJvcF0gOiB0cmFja1ZhbHVlLFxyXG4gICAgICAgIFtgJHtkYXRhUHJvcH1EZWNvZGVTdGF0dXNgXSA6IGRlY29kZVN0YXR1c1ZhbHVlID09PSAweDAwID8gXCJPa1wiIDogXCJFcnJvclwiLFxyXG4gICAgICAgIFtgJHtkYXRhUHJvcH1EZWNvZGVTdGF0dXNDb2RlYF0gOiBkZWNvZGVTdGF0dXNWYWx1ZVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNjcmFTd2lwZVBhcnNlcjsiLCJpbXBvcnQgU2NyYVN3aXBlUGFyc2VyIGZyb20gJy4uL3BhcnNlcnMvc2NyYVN3aXBlUGFyc2VyJztcclxuXHJcbmNsYXNzIFRyeFN0YXR1c1BhcnNlciBleHRlbmRzIFNjcmFTd2lwZVBhcnNlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIGNhbGxCYWNrcykge1xyXG4gICAgICAgIHN1cGVyKGRldmljZSwgY2FsbEJhY2tzKTtcclxuXHJcbiAgICAgICAgdGhpcy5UcnhTdGF0dXNFbnVtID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIDB4MDA6IFwiVHJhbnNhY3Rpb24gU3RhcnRlZCBhbmQgSWRsZVwiLFxyXG4gICAgICAgICAgICAweDAxOiBcIkNhcmQgaXMgSW5zZXJ0ZWRcIixcclxuICAgICAgICAgICAgMHgwMjogXCJFcnJvclwiLFxyXG4gICAgICAgICAgICAweDAzOiBcIlRyYW5zYWN0aW9uIFByb2dyZXNzIENoYW5nZVwiLFxyXG4gICAgICAgICAgICAweDA0OiBcIldhaXRpbmcgZm9yIFVzZXIgUmVzcG9uc2VcIixcclxuICAgICAgICAgICAgMHgwNTogXCJUaW1lZCBPdXRcIixcclxuICAgICAgICAgICAgMHgwNjogXCJUcmFuc2FjdGlvbiBDb21wbGV0ZVwiLFxyXG4gICAgICAgICAgICAweDA3OiBcIkNhbmNlbGxlZCBieSBIb3N0XCIsXHJcbiAgICAgICAgICAgIDB4MDg6IFwiQ2FyZCBSZW1vdmVkXCIsXHJcbiAgICAgICAgICAgIDB4MDk6IFwiQ29udGFjdGxlc3MgVG9rZW4gRGV0ZWN0ZWQsIFBvd2VyaW5nIFVwIENhcmRcIixcclxuICAgICAgICAgICAgMHgwQTogXCJNU1IgU3dpcGUgRGV0ZWN0ZWRcIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLlRyeFByb2dyZXNzSW5kaWNhdG9yID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIDB4MDA6IFwiTm8gdHJhbnNhY3Rpb24gaW4gcHJvZ3Jlc3NcIixcclxuICAgICAgICAgICAgMHgwMTogXCJXYWl0aW5nIGZvciBjYXJkaG9sZGVyIHRvIHByZXNlbnQgcGF5bWVudFwiLFxyXG4gICAgICAgICAgICAweDAyOiBcIlBvd2VyaW5nIHVwIHRoZSBjYXJkXCIsXHJcbiAgICAgICAgICAgIDB4MDM6IFwiU2VsZWN0aW5nIHRoZSBhcHBsaWNhdGlvblwiLFxyXG4gICAgICAgICAgICAweDA0OiBcIldhaXRpbmcgZm9yIHVzZXIgbGFuZ3VhZ2Ugc2VsZWN0aW9uXCIsICAvL0NvbnRhY3QgT25seVxyXG4gICAgICAgICAgICAweDA1OiBcIldhaXRpbmcgZm9yIHVzZXIgYXBwbGljYXRpb24gc2VsZWN0aW9uXCIsICAvL0NvbnRhY3QgT25seVxyXG4gICAgICAgICAgICAweDA2OiBcIkluaXRpYXRpbmcgYXBwbGljYXRpb25cIiwgIC8vQ29udGFjdCBPbmx5XHJcbiAgICAgICAgICAgIDB4MDc6IFwiUmVhZGluZyBhcHBsaWNhdGlvbiBkYXRhXCIsICAvL0NvbnRhY3QgT25seVxyXG4gICAgICAgICAgICAweDA4OiBcIk9mZmxpbmUgZGF0YSBhdXRoZW50aWNhdGlvblwiLCAgLy9Db250YWN0IE9ubHlcclxuICAgICAgICAgICAgMHgwOTogXCJQcm9jZXNzIHJlc3RyaWN0aW9uc1wiLCAgLy9Db250YWN0IE9ubHlcclxuICAgICAgICAgICAgMHgwQTogXCJDYXJkaG9sZGVyIHZlcmlmaWNhdGlvblwiLCAgLy9Db250YWN0IE9ubHlcclxuICAgICAgICAgICAgMHgwQjogXCJUZXJtaW5hbCByaXNrIG1hbmFnZW1lbnRcIiwgIC8vQ29udGFjdCBPbmx5XHJcbiAgICAgICAgICAgIDB4MEM6IFwiVGVybWluYWwgYWN0aW9uIGFuYWx5c2lzXCIsICAvL0NvbnRhY3QgT25seVxyXG4gICAgICAgICAgICAweDBEOiBcIkdlbmVyYXRpbmcgZmlyc3QgYXBwbGljYXRpb24gY3J5cHRvZ3JhbVwiLCAgLy9Db250YWN0IE9ubHlcclxuICAgICAgICAgICAgMHgwRTogXCJDYXJkIGFjdGlvbiBhbmFseXNpc1wiLCAgLy9Db250YWN0IE9ubHlcclxuICAgICAgICAgICAgMHgwRjogXCJPbmxpbmUgcHJvY2Vzc2luZ1wiLFxyXG4gICAgICAgICAgICAweDEwOiBcIldhaXRpbmcgb25saW5lIHByb2Nlc3NpbmcgcmVzcG9uc2VcIixcclxuICAgICAgICAgICAgMHgxMTogXCJUcmFuc2FjdGlvbiBDb21wbGV0ZVwiLFxyXG4gICAgICAgICAgICAweDEyOiBcIlRyYW5zYWN0aW9uIEVycm9yXCIsXHJcbiAgICAgICAgICAgIDB4MTM6IFwiVHJhbnNhY3Rpb24gQXBwcm92ZWRcIixcclxuICAgICAgICAgICAgMHgxNDogXCJUcmFuc2FjdGlvbiBEZWNsaW5lZFwiLFxyXG4gICAgICAgICAgICAweDE1OiBcIlRyYW5zYWN0aW9uIENhbmNlbGxlZCBieSBNU1IgU3dpcGVcIiwgIC8vTVNSIE9ubHlcclxuICAgICAgICAgICAgMHgxNjogXCJFTVYgZXJyb3IgLSBDb25kaXRpb25zIE5vdCBTYXRpc2ZpZWRcIiwgIC8vQ29udGFjdCBPbmx5XHJcbiAgICAgICAgICAgIDB4MTc6IFwiRU1WIGVycm9yIC0gQ2FyZCBCbG9ja2VkXCIsICAvL0NvbnRhY3QgT25seVxyXG4gICAgICAgICAgICAweDE4OiBcIkFwcGxpY2F0aW9uIHNlbGVjdGlvbiBmYWlsZWRcIiwgIC8vQ29udGFjdCBPbmx5XHJcbiAgICAgICAgICAgIDB4MTk6IFwiRU1WIGVycm9yIC0gQ2FyZCBOb3QgQWNjZXB0ZWRcIiwgIC8vQ29udGFjdCBPbmx5XHJcbiAgICAgICAgICAgIDB4MUE6IFwiRW1wdHkgQ2FuZGlkYXRlIExpc3RcIixcclxuICAgICAgICAgICAgMHgxQjogXCJBcHBsaWNhdGlvbiBCbG9ja2VkXCIsXHJcbiAgICAgICAgICAgIDB4Mjk6IFwiQ29udGFjdGxlc3MgUmVtb3ZlIENhcmRcIixcclxuICAgICAgICAgICAgMHgyQTogXCJDb2xsaXNpb24gRGV0ZWN0ZWRcIixcclxuICAgICAgICAgICAgMHgyQjogXCJSZWZlciB0byBNb2JpbGUgRGV2aWNlIFByb21wdFwiLFxyXG4gICAgICAgICAgICAweDJDOiBcIkNvbnRhY3RsZXNzIFRyYW5zYWN0aW9uIENvbXBsZXRlXCIsXHJcbiAgICAgICAgICAgIDB4MkQ6IFwiUmVxdWVzdCBTd2l0Y2ggdG8gSUNDL01TUiAtIEtlcm5lbCBoYXMgcmVmdXNlZCBjb250YWN0bGVzcyBwYXltZW50XCIsXHJcbiAgICAgICAgICAgIDB4MkU6IFwiV3JvbmcgQ2FyZCBUeXBlIChNU0Qgb3IgRU1WKVwiLFxyXG4gICAgICAgICAgICAweDJGOiBcIk5vIEFwcGxpY2F0aW9uIEludGVyY2hhbmdlIFByb2ZpbGUgKFRhZyA4MikgUmVjZWl2ZWRcIixcclxuICAgICAgICAgICAgMHgzMTogXCJNYWduZXRpYyBzdHJpcGUgZGVjb2RpbmcgZXJyb3IuXCIsXHJcbiAgICAgICAgICAgIDB4M0M6IFwiTWFnbmV0aWMgc3RyaXBlIGRlY29kaW5nIGR1cmluZyBUZWNobmljYWwgRmFsbGJhY2suIFJldmVydCB0byBNU1IsIHBvd2VyaW5nIHVwIGJ1dCBub3QgcmVjZWl2aW5nIGFuIEFuc3dlciB0byBSZXNldCBmcm9tIGNhcmQuXCIsXHJcbiAgICAgICAgICAgIDB4M0Q6IFwiTWFnbmV0aWMgc3RyaXBlIGNhcmQgZGVjb2RlZCBkdXJpbmcgTVNSIEZhbGxiYWNrLiBEZXZpY2UgcmV2ZXJ0ZWQgdG8gTVNSLCBidXQgZW5jb3VudGVyZWQgZmF0YWwgZXJyb3JzLlwiLFxyXG4gICAgICAgICAgICAweDNFOiBcIk1hZ25ldGljIHN0cmlwZSBjYXJkIGRlY29kZWQgZHVyaW5nIGEgTm8gRmFsbGJhY2sgTVNSIHJlYWQuXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZVRyYW5zYWN0aW9uU3RhdHVzID0gbm90aWZpY2F0aW9uID0+IHtcclxuICAgICAgICBjb25zdCBkYXRhTGVuID0gdGhpcy5yZWFkVHdvQnl0ZUxlbmd0aChbXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvblsxXSxcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uWzJdXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIGxldCBuZXdOb3RpZmljYXRpb24gPSBub3RpZmljYXRpb24uc2xpY2UoMyk7XHJcblxyXG4gICAgICAgIHJldHVybiAobmV3Tm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gZGF0YUxlbikgPyB0aGlzLnBhcnNlTm90aWZpY2F0aW9ucyhuZXdOb3RpZmljYXRpb24pIDogdGhpcy50aHJvd0xlbkVycigpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgcGFyc2VOb3RpZmljYXRpb25zID0gbm90aWZpY2F0aW9uU2xpY2UgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld05vdGlmaWNhdGlvblNsaWNlID0gbm90aWZpY2F0aW9uU2xpY2Uuc2xpY2UoNik7XHJcbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uTGVuZ3RoID0gdGhpcy5yZWFkVHdvQnl0ZUxlbmd0aChbXHJcbiAgICAgICAgICAgIG5ld05vdGlmaWNhdGlvblNsaWNlWzBdLFxyXG4gICAgICAgICAgICBuZXdOb3RpZmljYXRpb25TbGljZVsxXVxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25Db250ZW50ID0gbmV3Tm90aWZpY2F0aW9uU2xpY2Uuc2xpY2UoMik7XHJcbiAgICAgICAgY29uc3QgdHJ4U3RhdHVzQ29kZSA9IG5vdGlmaWNhdGlvbkNvbnRlbnRbMF07XHJcbiAgICAgICAgY29uc3QgdHJ4UHJvZ3Jlc3NDb2RlID0gbm90aWZpY2F0aW9uQ29udGVudFsyXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChub3RpZmljYXRpb25Db250ZW50Lmxlbmd0aCA9PT0gbm90aWZpY2F0aW9uTGVuZ3RoKSA/ICB7XHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RhdHVzOiB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiB0cnhTdGF0dXNDb2RlLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzTXNnOiAoIHRoaXMuVHJ4U3RhdHVzRW51bVsgdHJ4U3RhdHVzQ29kZSBdIHx8IFwiU3RhdHVzIGNvZGUgbWVzc2FnZSBub3QgZG9jdW1lbnRlZFwiICksXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0NvZGU6IHRyeFByb2dyZXNzQ29kZSxcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzTXNnOiAoIHRoaXMuVHJ4UHJvZ3Jlc3NJbmRpY2F0b3JbIHRyeFByb2dyZXNzQ29kZSBdIHx8IFwiUHJvZ3Jlc3MgY29kZSBtZXNzYWdlIG5vdCBkb2N1bWVudGVkXCIgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDogdGhpcy50aHJvd0xlbkVycigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcnhTdGF0dXNQYXJzZXI7IiwiaW1wb3J0IFRyeFN0YXR1c1BhcnNlciBmcm9tICcuL3RyeFN0YXR1c1BhcnNlcic7XHJcblxyXG5jb25zdCBkdWtwdEZhaWx1cmVCYXNlID0gXCJGYWlsdXJlLCBEVUtQVCBzY2hlbWUgaXMgXCI7XHJcbmNvbnN0IGludmFsaWRCYXNlID0gXCJJbnZhbGlkIFwiO1xyXG5cclxuXHJcbmNsYXNzIFNjcmFFbXZQYXJzZXIgZXh0ZW5kcyBUcnhTdGF0dXNQYXJzZXIge1xyXG4gICAgY29uc3RydWN0b3IoZGV2aWNlLCBjYWxsQmFja3MpIHtcclxuICAgICAgICBzdXBlcihkZXZpY2UsIGNhbGxCYWNrcyk7XHJcblxyXG4gICAgICAgIHRoaXMuZW12UmVzdWx0Q29kZXMgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgMHg4MTogZHVrcHRGYWlsdXJlQmFzZSArIFwibm90IGxvYWRlZFwiLFxyXG4gICAgICAgICAgICAweDgyOiBkdWtwdEZhaWx1cmVCYXNlICsgXCJsb2FkZWQgYnV0IGFsbCBvZiBpdHMga2V5cyBoYXZlIGJlZW4gdXNlZFwiLFxyXG4gICAgICAgICAgICAweDgzOiBkdWtwdEZhaWx1cmVCYXNlICsgXCJub3QgbG9hZGVkIChTZWN1cml0eSBMZXZlbCBub3QgMyBvciA0KVwiLFxyXG4gICAgICAgICAgICAweDg0OiBpbnZhbGlkQmFzZSArIFwiVG90YWwgVHJhbnNhY3Rpb24gVGltZSBGaWVsZFwiLFxyXG4gICAgICAgICAgICAweDg1OiBpbnZhbGlkQmFzZSArIFwiQ2FyZCBUeXBlIEZpZWxkXCIsXHJcbiAgICAgICAgICAgIDB4ODY6IGludmFsaWRCYXNlICsgXCJPcHRpb25zIEZpZWxkXCIsXHJcbiAgICAgICAgICAgIDB4ODc6IGludmFsaWRCYXNlICsgXCJBbW91bnQgQXV0aG9yaXplZCBGaWVsZFwiLFxyXG4gICAgICAgICAgICAweDg4OiBpbnZhbGlkQmFzZSArIFwiVHJhbnNhY3Rpb24gVHlwZSBGaWVsZFwiLFxyXG4gICAgICAgICAgICAweDg5OiBpbnZhbGlkQmFzZSArICBcIkNhc2ggQmFjayBGaWVsZFwiLFxyXG4gICAgICAgICAgICAweDhBOiBpbnZhbGlkQmFzZSArIFwiVHJhbnNhY3Rpb24gQ3VycmVuY3kgQ29kZSBGaWVsZFwiLFxyXG4gICAgICAgICAgICAweDhFOiBpbnZhbGlkQmFzZSArIFwiUmVwb3J0aW5nIE9wdGlvblwiLFxyXG4gICAgICAgICAgICAweDhGOiBcIlRyYW5zYWN0aW9uIEFscmVhZHkgSW4gUHJvZ3Jlc3NcIixcclxuICAgICAgICAgICAgMHg5MTogaW52YWxpZEJhc2UgKyBcIkRldmljZSBTZXJpYWwgTnVtYmVyXCIsXHJcbiAgICAgICAgICAgIDB4OTY6IGludmFsaWRCYXNlICsgXCJTeXN0ZW0gRGF0ZSBhbmQgVGltZVwiXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyc2VFbXZEYXRhID0gKGVtdkRhdGEsIGlzQXJxYykgPT4gKGlzQXJxYykgPyAoe1xyXG4gICAgICAgIGFycWNEYXRhOiB0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKCBlbXZEYXRhLnNsaWNlKDExKSApLFxyXG4gICAgICAgIGFycWNEYXRhUGFyc2VkOlxyXG4gICAgICAgICAgICB0aGlzLnRsdlBhcnNlcihcclxuICAgICAgICAgICAgICAgIGVtdkRhdGEuc2xpY2UoMTMpLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSlcclxuICAgICAgICA6ICh7XHJcbiAgICAgICAgICAgIHNpZ25hdHVyZVJlcXVpcmVkOiAoZW12RGF0YVsxMV0gPT09IDB4ODApID8gXCJDQkMtTUFDIGNoZWNrZWQgaW4gQVJRQyBvbmxpbmUgcmVzcG9uc2VcIiA6IChlbXZEYXRhWzExXSA9PT0gMHgwMSksXHJcbiAgICAgICAgICAgIGJhdGNoRGF0YTogdGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyggZW12RGF0YS5zbGljZSgxMSkgKSxcclxuICAgICAgICAgICAgYmF0Y2hEYXRhUGFyc2VkOiB0aGlzLnRsdlBhcnNlciggZW12RGF0YS5zbGljZSgxNCksIHRydWUgKVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgLy9SZWFkIFJlc3VsdCBDb2RlIGZyb20gc3RhcnRUcmFuc2FjdGlvbiBjb21tYW5kIGFuZCByZXR1cm4gdG8gdXNlci4gSWYgbm90IDAgLSByZXR1cm4gZXJyb3IgbWVzc2FnZS5cclxuICAgIHBhcnNlRW12Q29tbWFuZFJlc3BvbnNlID0gcmVzcCA9PiAge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdENvZGUgPSByZXNwLnNsaWNlKDQsIDYpO1xyXG5cclxuICAgICAgICAvL3Jlc3VsdCBjb2RlIG9mIFsweDAwLCAweDAwXSBpcyBzdWNjZXNzLlxyXG4gICAgICAgIHJldHVybiAocGFyc2VJbnQoIHJlc3VsdENvZGUuam9pbihcIlwiKSApKSA/XHJcbiAgICAgICAgICAgICh7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBwYXJzZUludCh0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKCByZXN1bHRDb2RlICksIDE2KSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RhcnRUcmFuc2FjdGlvbkVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLmVtdlJlc3VsdENvZGVzWyByZXN1bHRDb2RlWzFdIF0gfHwgXCJUcmFuc2FjdGlvbiBFcnJvciBNZXNzYWdlIG5vdCB5ZXQgZG9jdW1lbnRlZFwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgKHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IDAsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlN1Y2Nlc3MsIHRyYW5zYWN0aW9uIGhhcyBzdGFydGVkXCJcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZVVzZXJTZWxlY3Rpb25SZXF1ZXN0ID0gc2VsZWN0aW9uUmVxdWVzdCA9PiAoe1xyXG4gICAgICAgIHVzZXJTZWxlY3Rpb25SZXF1ZXN0OiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvblR5cGU6IChzZWxlY3Rpb25SZXF1ZXN0WzBdID09PSAweDAwKSA/IFwiQXBwbGljYXRpb24gU2VsZWN0aW9uXCIgOiBcIkxhbmd1YWdlIFNlbGVjdGlvblwiLFxyXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiAgc2VsZWN0aW9uUmVxdWVzdFsxXSxcclxuICAgICAgICAgICAgbWVudUl0ZW1zOiB0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKHNlbGVjdGlvblJlcXVlc3Quc2xpY2UoMikpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2NyYUVtdlBhcnNlcjsiLCJpbXBvcnQgU2NyYUVtdlBhcnNlciBmcm9tICcuLi9wYXJzZXJzL3NjcmFFbXZQYXJzZXInO1xyXG5cclxuXHJcbmNsYXNzIFNjcmFDbWRCdWlsZGVyIGV4dGVuZHMgU2NyYUVtdlBhcnNlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIGNhbGxCYWNrcykge1xyXG4gICAgICAgIHN1cGVyKGRldmljZSwgY2FsbEJhY2tzKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbXZPcHRpb25zID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgICdub3JtYWwnOiAweDAwLFxyXG4gICAgICAgICAgICAnYnlwYXNzcGluJzogMHgwMSxcclxuICAgICAgICAgICAgJ2ZvcmNlb25saW5lJzogMHgwMixcclxuICAgICAgICAgICAgJ3F1aWNrY2hpcCc6IDB4ODAsXHJcbiAgICAgICAgICAgICdwaW5ieXBhc3NxdWlja2NoaXAnOiAweDgxLFxyXG4gICAgICAgICAgICAnZm9yY2VvbmxpbmVxdWlja2NoaXAnOiAweDgyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdHVzVmVyYm9zaXR5ID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIFwibWluaW11bVwiOiAweDAwLFxyXG4gICAgICAgICAgICAnbWVkaXVtJzogMHgwMSxcclxuICAgICAgICAgICAgJ3ZlcmJvc2UnOiAweDAyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZW12Q29tbWFuZEJhc2UgPSBbMHg0OSwgMHgxOSwgMHgwMCwgMHgwMCwgMHgwMywgMHgwMCwgMHgwMCwgMHgxM107XHJcbiAgICB9XHJcblxyXG4gICAgYW1vdW50SGVscGVyID0gKGF1dGhBbW91bnQsIHRyeFR5cGUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCh0eXBlb2YoYXV0aEFtb3VudCkpIHtcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnROdW1Ub0Ftb3VudChhdXRoQW1vdW50KTtcclxuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBhdXRoQW1vdW50O1xyXG4gICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGV4VG9CeXRlcyhhdXRoQW1vdW50KTtcclxuICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyeFR5cGVMb3dlciA9ICh0eXBlb2YodHJ4VHlwZSkgPT09ICdzdHJpbmcnKSA/IHRyeFR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRyeFR5cGVMb3dlciA9PT0gJ3JlZnVuZCcgfHwgdHJ4VHlwZUxvd2VyID09PSAnY2FzaGJhY2snIHx8IHRyeFR5cGVMb3dlciA9PT0gJ2NvbnRhY3RsZXNzY2FzaGJhY2snKSA/IFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV3QXJyYXlQYXJ0aWFsKDB4MDAsIDYpIDogZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYnVpbGRFbXZDb21tYW5kID0gKHsgXHJcbiAgICAgICAgdGltZW91dCwgXHJcbiAgICAgICAgY2FyZFR5cGUsIFxyXG4gICAgICAgIHRyYW5zYWN0aW9uVHlwZSwgXHJcbiAgICAgICAgY2FzaEJhY2ssIFxyXG4gICAgICAgIGN1cnJlbmN5Q29kZSwgXHJcbiAgICAgICAgcmVwb3J0VmVyYm9zaXR5LFxyXG4gICAgICAgIGVtdk9wdGlvbnMsXHJcbiAgICAgICAgYXV0aG9yaXplZEFtb3VudFxyXG4gICAgfSkgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjb21tYW5kID0gWyBcclxuICAgICAgICAgICAgLi4udGhpcy5lbXZDb21tYW5kQmFzZSwgXHJcbiAgICAgICAgICAgIHRpbWVvdXQgfHwgMHgzQywgXHJcbiAgICAgICAgICAgIChjYXJkVHlwZSkgPyB0aGlzLmNhcmRUeXBlcyggY2FyZFR5cGUudG9Mb3dlckNhc2UoKSApIDogMHgwMyxcclxuICAgICAgICAgICAgKHR5cGVvZihlbXZPcHRpb25zKSAhPT0gJ3VuZGVmaW5lZCcpID8gKHRoaXMuZW12T3B0aW9uc1sgZW12T3B0aW9ucy50b0xvd2VyQ2FzZSgpIF0pIDogMHg4MFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbW1hbmQgPSBjb21tYW5kLmNvbmNhdCggdGhpcy5hbW91bnRIZWxwZXIoYXV0aG9yaXplZEFtb3VudCwgdHJhbnNhY3Rpb25UeXBlLCBbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgMHgwMF0pICk7XHJcblxyXG4gICAgICAgIGNvbW1hbmQgPSAodHJhbnNhY3Rpb25UeXBlKSA/IFxyXG4gICAgICAgICAgICBjb21tYW5kLmNvbmNhdCh0aGlzLnRyYW5zYWN0aW9uVHlwZXNbIHRyYW5zYWN0aW9uVHlwZS50b0xvd2VyQ2FzZSgpIF0gfHwgMHgwMCkgXHJcbiAgICAgICAgICAgIDogY29tbWFuZC5jb25jYXQoMHgwMClcclxuXHJcbiAgICAgICAgY29tbWFuZCA9IGNvbW1hbmQuY29uY2F0KCB0aGlzLmFtb3VudEhlbHBlcihjYXNoQmFjaywgdHJhbnNhY3Rpb25UeXBlLCB0aGlzLm5ld0FycmF5UGFydGlhbCgweDAwLCA2KSkgKTtcclxuXHJcbiAgICAgICAgY29tbWFuZCA9IChjdXJyZW5jeUNvZGUpID8gY29tbWFuZC5jb25jYXQoIHRoaXMuY3VycmVuY3lDb2RlWyBjdXJyZW5jeUNvZGUudG9Mb3dlckNhc2UoKSBdIHx8ICB0aGlzLmN1cnJlbmN5Q29kZVsnZGVmYXVsdCddIClcclxuICAgICAgICAgICAgOiBjb21tYW5kLmNvbmNhdCggWzB4MDgsIDB4NDBdICk7XHJcblxyXG4gICAgICAgIGNvbW1hbmQucHVzaChcclxuICAgICAgICAgICAgKHJlcG9ydFZlcmJvc2l0eSkgPyAoIHRoaXMuc3RhdHVzVmVyYm9zaXR5WyByZXBvcnRWZXJib3NpdHkudG9Mb3dlckNhc2UoKSBdIHx8IDB4MDAgKSA6IDB4MDFcclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBjb21tYW5kO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkQXJwY0NvbW1hbmQgPSAobGVuLCBkYXRhKSA9PiAoWzB4NDksIChsZW4gKyA2KSwgMHgwMCwgMHgwMCwgMHgwMywgMHgwMywgKChsZW4gPj4gOCkgJiAweEZGKSwgKGxlbiAmIDB4RkYpLCAuLi5kYXRhIF0pO1xyXG5cclxuICAgIGJ1aWxkRGF0ZVRpbWVDb21tYW5kID0gc3BlY2lmaWNUaW1lID0+IHtcclxuICAgICAgICBsZXQgZGF0ZVRpbWVDb21tYW5kID0gWzB4NDksIDB4MjIsIDB4MDAsIDB4MDAsIDB4MDMsIDB4MEMsIDB4MDAsIDB4MUNdO1xyXG4gICAgICAgIGRhdGVUaW1lQ29tbWFuZCA9IGRhdGVUaW1lQ29tbWFuZC5jb25jYXQoIHRoaXMubmV3QXJyYXlQYXJ0aWFsKDB4MDAsIDE3KSApO1xyXG4gICAgICAgIC8vRm9ybWF0IERhdGUgc2VnbWVudCBiZWxvd1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSAoc3BlY2lmaWNUaW1lIGluc3RhbmNlb2YgRGF0ZSkgPyBzcGVjaWZpY1RpbWUgOiBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAvL01vbnRoICh6ZXJvIGJhc2VkIGluZGV4LCBzbyBhZGQgMSkuXHJcbiAgICAgICAgZGF0ZVRpbWVDb21tYW5kLnB1c2goIFxyXG4gICAgICAgICAgICB0aGlzLmNhc3REZWNUb0hleCggY3VycmVudC5nZXRNb250aCgpICsgMSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBkYXRlVGltZUNvbW1hbmQucHVzaChcclxuICAgICAgICAgICAgdGhpcy5jYXN0RGVjVG9IZXgoIGN1cnJlbnQuZ2V0RGF0ZSgpIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBkYXRlVGltZUNvbW1hbmQucHVzaChcclxuICAgICAgICAgICAgdGhpcy5jYXN0RGVjVG9IZXgoIGN1cnJlbnQuZ2V0SG91cnMoKSApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgZGF0ZVRpbWVDb21tYW5kLnB1c2goXHJcbiAgICAgICAgICAgIHRoaXMuY2FzdERlY1RvSGV4KCBjdXJyZW50LmdldE1pbnV0ZXMoKSApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgZGF0ZVRpbWVDb21tYW5kLnB1c2goXHJcbiAgICAgICAgICAgIHRoaXMuY2FzdERlY1RvSGV4KCBjdXJyZW50LmdldFNlY29uZHMoKSApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy9DdXJyZW50bHkgdW51c2VkIG9mZnNldC4gIDB4MDAgLSAweDA2IGlzIHZhbGlkIC0gYnV0IGlzIG5vdCBleGFtaW5lZC5cclxuICAgICAgICBkYXRlVGltZUNvbW1hbmQucHVzaCgweDAwKTtcclxuXHJcbiAgICAgICAgLy9ZZWFyIGlzIGJhc2VkIHVwb24gMjAwOCA9PT0gMHgwMC5cclxuICAgICAgICBkYXRlVGltZUNvbW1hbmQucHVzaChcclxuICAgICAgICAgICAgdGhpcy5jYXN0RGVjVG9IZXgoIGN1cnJlbnQuZ2V0RnVsbFllYXIoKSAtIDIwMDggKVxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgLy9NQUMgLSBmb3IgYWxsIGRldmljZXMgZXhjZXB0IHR3byBleGNlcHRpb25zIChzZWUgZG9jdW1lbnRhdGlvbikgdGhpcyBjYW4gYmUgcGFkZGVkIHdpdGggemVyb3MuXHJcbiAgICAgICAgZGF0ZVRpbWVDb21tYW5kID0gZGF0ZVRpbWVDb21tYW5kLmNvbmNhdCggdGhpcy5uZXdBcnJheVBhcnRpYWwoMHgwMCwgNCkgKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gZGF0ZVRpbWVDb21tYW5kO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTY3JhQ21kQnVpbGRlcjtcclxuIiwiaW1wb3J0IFNjcmFDbWRCdWlsZGVyIGZyb20gJy4uL2NvbW1hbmRCdWlsZGVycy9zY3JhQ21kQnVpbGRlcic7XHJcbmltcG9ydCB7IFxyXG4gICAgY29tbWFuZE5vdFNlbnQsXHJcbiAgICByZXNwb25zZU5vdFJlY2VpdmVkLFxyXG4gICAgZGV2aWNlTm90Rm91bmQsXHJcbiAgICBkZXZpY2VOb3RPcGVuXHJcbn0gZnJvbSAnLi4vZXJyb3JIYW5kbGVyL2VyckNvbnN0YW50cyc7XHJcbmltcG9ydCB7IFxyXG4gICAgY2xvc2VTdWNjZXNzLCBcclxuICAgIHN1Y2Nlc3NDb2RlLCBcclxuICAgIG9wZW5TdWNjZXNzLFxyXG4gICAgdW5rbm93blVuZG9jXHJcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcclxuXHJcbmNsYXNzIFNjcmEgZXh0ZW5kcyBTY3JhQ21kQnVpbGRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIGNhbGxCYWNrcykge1xyXG4gICAgICAgIHN1cGVyKGRldmljZSwgY2FsbEJhY2tzKTtcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uQ2FsbGJhY2sgPSBjYWxsQmFja3MudHJhbnNhY3Rpb25DYWxsYmFjayB8fCBjYWxsQmFja3M7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5Q2FsbGJhY2sgPSBjYWxsQmFja3MuZGlzcGxheUNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25TdGF0dXNDYWxsYmFjayA9IGNhbGxCYWNrcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMudXNlclNlbGVjdGlvbkNhbGxiYWNrID0gY2FsbEJhY2tzLnVzZXJTZWxlY3Rpb25DYWxsYmFjaztcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm1heEJsb2NrSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbE5vdGlmaWNhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yYXdEYXRhID0ge307XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YVJlYWRTdGF0dXNDaGFyYWN0ZXJpc3RpYyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kYXRhUmVhZHlDaGFyYWN0ZXJpc3RpYyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kQ2hhcmFjdGVyaXN0aWMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2FyZERhdGFMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jYXJkRGF0YU5vdGlmaWNhdGlvbiA9XCIwNTA4ZTZmOC1hZDgyLTg5OGYtZjg0My1lMzQxMGNiNjAyMDFcIjtcclxuICAgICAgICB0aGlzLmNvbW1hbmRDaGFySWQgPSAnMDUwOGU2ZjgtYWQ4Mi04OThmLWY4NDMtZTM0MTBjYjYwMjAwJztcclxuICAgICAgICB0aGlzLmRhdGFSZWFkeUlkID0gXCIwNTA4ZTZmOC1hZDgyLTg5OGYtZjg0My1lMzQxMGNiNjAyMDJcIjtcclxuICAgICAgICB0aGlzLmRhdGFSZWFkU3RhdHVzSWQgPSBcIjA1MDhlNmY4LWFkODItODk4Zi1mODQzLWUzNDEwY2I2MDIwM1wiO1xyXG5cclxuICAgICAgICB0aGlzLnJlc3VsdENvZGVzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgICcwMDAwJzogXCJTdWNjZXNzXCIsXHJcbiAgICAgICAgICAgICcwMzhCJzogXCJJbnZhbGlkIFNlbGVjdGlvbiBTdGF0dXNcIixcclxuICAgICAgICAgICAgJzAzOEMnOiAnSW52YWxpZCBTZWxlY3Rpb24gUmVzdWx0JyxcclxuICAgICAgICAgICAgJzAzOEQnOiBcIkZhaWx1cmUsIG5vIHRyYW5zYWN0aW9uIGN1cnJlbnRseSBpbiBwcm9ncmVzc1wiLFxyXG4gICAgICAgICAgICAnMDM4Ric6IFwiRmFpbHVyZSwgdHJhbnNhY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzc1wiLFxyXG4gICAgICAgICAgICAnMDM5MCc6ICdEZXZpY2UgaGFzIG5vIGtleXMnLFxyXG4gICAgICAgICAgICAnMDM5MSc6ICdJbnZhbGlkIGRldmljZSBzZXJpYWwgbnVtYmVyJyxcclxuICAgICAgICAgICAgJzAzOTInOiAnSW52YWxpZCB0eXBlIG9mIE1BQyBmaWVsZCcsXHJcbiAgICAgICAgICAgICcwMzk2JzogJ0ludmFsaWQgZGF0ZS90aW1lIGRhdGEnLFxyXG4gICAgICAgICAgICAnMDM5Nyc6ICdJbnZhbGlkIE1BQydcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5jYW5jZWxFbXZDb21tYW5kID0gVWludDhBcnJheS5vZihcclxuICAgICAgICAgICAgMHg0OSwgMHgwNiwgMHgwMCwgMHgwMCwgMHgwMywgMHgwNCwgMHgwMCwgMHgwMFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2FyZFNlcnZpY2VCYXNlID0gb3B0aW9uYWxJbmRleCA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4gKCF0aGlzLmRldmljZSkgP1xyXG4gICAgICAgIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RGb3VuZCkpXHJcbiAgICAgICAgOlxyXG4gICAgICAgIHRoaXMuY29ubmVjdEFuZENhY2hlKG9wdGlvbmFsSW5kZXgpXHJcbiAgICAgICAgICAgIC50aGVuKCBzZXJ2aWNlID0+XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLmdldENoYXJhY3RlcmlzdGljKHRoaXMuY2FyZERhdGFOb3RpZmljYXRpb24pXHJcbiAgICAgICAgICAgICkudGhlbihjaGFyYWN0ZXJpc3RpYyA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbR0FUVCBOT1RJRklDQVRJT05TXTogUmVxdWVzdCB0byBjYWNoZSBjaGFyYWN0ZXJpc3RpY3MsIHN0YXJ0IG5vdGlmaWNhdGlvbnMsIGFuZCBhdHRhY2ggbGlzdGVuZXJzLiB8fCAke25ldyBEYXRlKCl9YCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFyYWN0ZXJpc3RpYy5zdGFydE5vdGlmaWNhdGlvbnMoKVxyXG4gICAgICAgICAgICB9KS50aGVuKGNoYXJhY3RlcmlzdGljID0+IHtcclxuICAgICAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYXJhY3RlcmlzdGljdmFsdWVjaGFuZ2VkJywgdGhpcy5jYXJkRGF0YUhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuYWRkRXZlbnRMaXN0ZW5lcignY2hhcmFjdGVyaXN0aWN2YWx1ZWNoYW5nZWQnLCB0aGlzLmNhcmREYXRhSGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FyZERhdGFMaXN0ZW5lciA9IGNoYXJhY3RlcmlzdGljO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FyZFNlcnZpY2UuZ2V0Q2hhcmFjdGVyaXN0aWModGhpcy5jb21tYW5kQ2hhcklkKVxyXG4gICAgICAgICAgICB9KS50aGVuKGNoYXJhY3RlcmlzdGljID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZENoYXJhY3RlcmlzdGljID0gY2hhcmFjdGVyaXN0aWM7XHJcbiAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICAgIElmIHRoaXMgbGlicmFyeSBpcyBiZWluZyB1c2VkIGluIGEgd2ViIGFwcGxpY2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgTWFrZSBzdXJlIHRoZSBkZXZpY2UgZGlzY29ubmVjdHMgcHJvcGVybHkgdXBvbiB3aW5kb3cgdW5sb2FkLlxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5vbkRlc3Ryb3lIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5vbkRlc3Ryb3lIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYXJkU2VydmljZS5nZXRDaGFyYWN0ZXJpc3RpYyh0aGlzLmRhdGFSZWFkeUlkKVxyXG4gICAgICAgICAgICB9KS50aGVuKCBjaGFyYWN0ZXJpc3RpYyA9PiBjaGFyYWN0ZXJpc3RpYy5zdGFydE5vdGlmaWNhdGlvbnMoKVxyXG4gICAgICAgICAgICApLnRoZW4oIGNoYXJhY3RlcmlzdGljID0+IHtcclxuICAgICAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYXJhY3RlcmlzdGljdmFsdWVjaGFuZ2VkJywgdGhpcy5kYXRhUmVhZHlIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYXJhY3RlcmlzdGljdmFsdWVjaGFuZ2VkJywgdGhpcy5kYXRhUmVhZHlIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFSZWFkeUNoYXJhY3RlcmlzdGljID0gY2hhcmFjdGVyaXN0aWM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYXJkU2VydmljZS5nZXRDaGFyYWN0ZXJpc3RpYyh0aGlzLmRhdGFSZWFkU3RhdHVzSWQpXHJcbiAgICAgICAgICAgIH0pLnRoZW4oIGNoYXJhY3RlcmlzdGljID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVJlYWRTdGF0dXNDaGFyYWN0ZXJpc3RpYyA9IGNoYXJhY3RlcmlzdGljO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0dBVFQgTk9USUZJQ0FUSU9OU106IFN1Y2Nlc3MhIENhY2hlZCBjaGFyYWN0ZXJpc3RpY3MsIHN0YXJ0ZWQgbm90aWZpY2F0aW9ucywgYW5kIGF0dGFjaGVkIGxpc3RlbmVycy4gfHwgJHtuZXcgRGF0ZSgpfWApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogc3VjY2Vzc0NvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogb3BlblN1Y2Nlc3NcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KCBlcnIgKSlcclxuICAgICk7XHJcblxyXG4gICAgZGF0YVJlYWR5SGFuZGxlciA9IGV2ZW50ID0+IHtcclxuICAgICAgICBsZXQgZXZlbnRWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICBsZXQgZm9ybWF0dGVkRXZlbnRWYWx1ZSA9IHRoaXMucmVhZEJ5dGVBcnJheShldmVudFZhbHVlKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgW0RhdGEgUmVhZHkgTGlzdGVuZXJdOiAke3RoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoZm9ybWF0dGVkRXZlbnRWYWx1ZSl9YCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbW1hbmRTZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZFJlc3BBdmFpbGFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRTZW50ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhcmREYXRhSGFuZGxlciA9IGV2ZW50ID0+IHtcclxuICAgICAgICBsZXQgZXZlbnRWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuXHJcbiAgICAgICAgLy9JZiB0aGUgZmlyc3QgcG9zaXRpb24gaW4gdGhlIGFycmF5ID09PSAyNTUsIGNhcmQgZGF0YSBub3RpZmljYXRpb25zIGhhdmUgZmluaXNoZWQuXHJcbiAgICAgICAgaWYgKGV2ZW50VmFsdWUuZ2V0VWludDgoMCkgIT09IDI1NSkge1xyXG4gICAgICAgICAgICBsZXQgbm90aWZpY2F0aW9uQXJyYXkgPSB0aGlzLnJlYWRCeXRlQXJyYXkoZXZlbnRWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJhd0RhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnJhd0RhdGEsXHJcbiAgICAgICAgICAgICAgICBbbm90aWZpY2F0aW9uQXJyYXlbMF1dOiBub3RpZmljYXRpb25BcnJheS5zbGljZSgxKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvL0tlZXAgdHJhY2sgb2YgdGhlIGFtb3VudCBvZiBub3RpZmljYXRpb25zIHNlbnQgZnJvbSBkZXZpY2UuXHJcbiAgICAgICAgICAgIHRoaXMubWF4QmxvY2tJZCA9IGV2ZW50VmFsdWUuZ2V0VWludDgoMSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja05vdGlmaWNhdGlvbkxlbmd0aCgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxOb3RpZmljYXRpb24gPSAodGhpcy5ybGVGb3JtYXRzWyB0aGlzLnJhd0RhdGFbMF1bMF0gXSkgPyB0aGlzLmRlY29kZVJMRSh0aGlzLnJhd0RhdGFbMF0pIDogdGhpcy5yYXdEYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL0NoZWNrIGlmIHN3aXBlIGRhdGFcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxOb3RpZmljYXRpb25bMF0gPT09IDAgfHwgdGhpcy5pbml0aWFsTm90aWZpY2F0aW9uWzBdID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0dXJuVG9Vc2VyKHRoaXMudHJhbnNhY3Rpb25DYWxsYmFjaykoIHRoaXMucGFyc2VIaWREYXRhKCB0aGlzLmJ1aWxkSW5pdGlhbERhdGFBcnJheSh0cnVlKSApICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25JZCA9IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxOb3RpZmljYXRpb25bN10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbE5vdGlmaWNhdGlvbls4XVxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmROb3RpZmljYXRpb25UeXBlKG5vdGlmaWNhdGlvbklkKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICBlbHNlIHRoaXMuc2VuZEVyclRvQ2FsbGJhY2soIHRoaXMudGhyb3dMZW5FcnIoKSApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmaW5kTm90aWZpY2F0aW9uVHlwZSA9IG5vdGlmaWNhdGlvbklkID0+IHtcclxuICAgICAgICBsZXQgYnVpbHROb3RpZmljYXRpb24gPSB0aGlzLmJ1aWxkSW5pdGlhbERhdGFBcnJheSh0cnVlKTtcclxuXHJcbiAgICAgICAgc3dpdGNoKG5vdGlmaWNhdGlvbklkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCIwMzAwXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKCc9PVRyYW5zYWN0aW9uIFN0YXR1cz09Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXR1cm5Ub1VzZXIodGhpcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrKSh0aGlzLnBhcnNlVHJhbnNhY3Rpb25TdGF0dXMoIGJ1aWx0Tm90aWZpY2F0aW9uICkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiMDMwMVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShcIj09RGlzcGxheSBNZXNzYWdlIFJlcXVlc3Q9PVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJldHVyblRvVXNlcih0aGlzLmRpc3BsYXlDYWxsYmFjaykoe1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlNZXNzYWdlOiB0aGlzLmJ1ZmZlclRvVXRmOCggYnVpbHROb3RpZmljYXRpb24uc2xpY2UoMTEpIClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjYXNlIFwiMDMwMlwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShcIj09VXNlciBTZWxlY3Rpb24gUmVxdWVzdD09XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZSh0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKGJ1aWx0Tm90aWZpY2F0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICAvL1RPRE86IEZ1cnRoZXIgaW52ZXN0aWdhdGlvbiB3YXJyYW50ZWQgZm9yIHRoaXMgY2lyY3Vtc3RhbmNlLlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0dXJuVG9Vc2VyKHRoaXMudXNlclNlbGVjdGlvbkNhbGxiYWNrKSggdGhpcy5wYXJzZVVzZXJTZWxlY3Rpb25SZXF1ZXN0KGJ1aWxkTm90aWZpY2F0aW9uKSApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCIwMzAzXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKFwiPT1BUlFDIE1lc3NhZ2U9PVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJldHVyblRvVXNlcih0aGlzLnRyYW5zYWN0aW9uQ2FsbGJhY2spKHRoaXMucGFyc2VFbXZEYXRhKCBidWlsdE5vdGlmaWNhdGlvbiwgdHJ1ZSApKSA7XHJcbiAgICAgICAgICAgIGNhc2UgXCIwMzA0XCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKCc9PUJhdGNoIERhdGEgTWVzc2FnZT09Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXR1cm5Ub1VzZXIodGhpcy50cmFuc2FjdGlvbkNhbGxiYWNrKSh0aGlzLnBhcnNlRW12RGF0YSggYnVpbHROb3RpZmljYXRpb24sIGZhbHNlICkpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dEZXZpY2VTdGF0ZShgVW5kb2N1bWVudGVkIE5vdGlmaWNhdGlvbiBJRDogJHtub3RpZmljYXRpb25JZH1gLCBidWlsdE5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKCB0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKCBidWlsdE5vdGlmaWNhdGlvbiApICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0VHJhbnNhY3Rpb24gPSBlbXZPcHRpb25zID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/IFxyXG4gICAgICAgIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RPcGVuKSApXHJcbiAgICAgICAgOiB0aGlzLnNlbmRDb21tYW5kV2l0aFJlc3AoXHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGRFbXZDb21tYW5kKCBlbXZPcHRpb25zIHx8IHt9IClcclxuICAgICAgICApLnRoZW4oIHZhbHVlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29tbWFuZFJlc3AgPSB0aGlzLnBhcnNlRW12Q29tbWFuZFJlc3BvbnNlKHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoY29tbWFuZFJlc3AuY29kZSA9PT0gMCkgPyByZXNvbHZlKGNvbW1hbmRSZXNwKSA6XHJcbiAgICAgICAgICAgICAgICAoY29tbWFuZFJlc3AuY29kZSAhPT0gOTE4KSA/IHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGNvbW1hbmRSZXNwKSkgOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RGV2aWNlRGF0ZVRpbWUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiB0aGlzLmRlbGF5UHJvbWlzZSg1MDApIClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbiggKCkgPT4gcmVzb2x2ZSggdGhpcy5zdGFydFRyYW5zYWN0aW9uKGVtdk9wdGlvbnMpICkgKVxyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZXJyKSkgKVxyXG4gICAgKTsgXHJcblxyXG4gICAgcmVhZENvbW1hbmRWYWx1ZSA9ICgpID0+IG5ldyBQcm9taXNlIChyZXNvbHZlID0+IHRoaXMuY29tbWFuZENoYXJhY3RlcmlzdGljLnJlYWRWYWx1ZSgpXHJcbiAgICAgICAgLnRoZW4oIHZhbHVlID0+IHJlc29sdmUoIHRoaXMucmVhZEJ5dGVBcnJheSh2YWx1ZSkgKSkpO1xyXG5cclxuICAgIGNoZWNrTm90aWZpY2F0aW9uTGVuZ3RoID0gKCkgPT4gTWF0aC5tYXgoLi4uT2JqZWN0LmtleXModGhpcy5yYXdEYXRhKSkgPT09IHRoaXMubWF4QmxvY2tJZCAtIDE7XHJcbiAgIFxyXG4gICAgc2VuZENvbW1hbmRXaXRoUmVzcCA9IHdyaXRlQ29tbWFuZCA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5jb21tYW5kQ2hhcmFjdGVyaXN0aWMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihjb21tYW5kTm90U2VudCkpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBTZW5kaW5nIGNvbW1hbmQ6ICR7dGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyh3cml0ZUNvbW1hbmQpfWApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRTZW50ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRDaGFyYWN0ZXJpc3RpYy53cml0ZVZhbHVlKFVpbnQ4QXJyYXkuZnJvbSh3cml0ZUNvbW1hbmQpKVxyXG4gICAgICAgICAgICAudGhlbiggKCkgPT4gKHRoaXMuY29tbWFuZFJlc3BBdmFpbGFibGUpID8gUHJvbWlzZS5yZXNvbHZlKCB0cnVlICkgOiB0aGlzLndhaXRGb3JEZXZpY2VSZXNwb25zZSgxNSkpXHJcbiAgICAgICAgICAgIC50aGVuKCB3YWl0UmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRSZXNwQXZhaWxhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiAoIXdhaXRSZXNwKSA/IFxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihyZXNwb25zZU5vdFJlY2VpdmVkKSkgOiB0aGlzLnJlYWRDb21tYW5kVmFsdWUoKVxyXG4gICAgICAgICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHJlc29sdmUocmVzcG9uc2UpXHJcbiAgICAgICAgICAgICkuY2F0Y2goZXJyID0+IHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihlcnIpICkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVyblRvVXNlciA9IHNwZWNpZmllZENhbGxiYWNrID0+IHJldHVybk9iaiA9PiB7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsTm90aWZpY2F0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1heEJsb2NrSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmF3RGF0YSA9IHt9O1xyXG4gICAgICAgIHJldHVybiBzcGVjaWZpZWRDYWxsYmFjayhyZXR1cm5PYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHNldERldmljZURhdGVUaW1lID0gc3BlY2lmaWNUaW1lID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+ICghdGhpcy5kZXZpY2UuZ2F0dC5jb25uZWN0ZWQpID9cclxuICAgICAgICByZWplY3QoZGV2aWNlTm90T3BlbilcclxuICAgICAgICA6IHRoaXMuc2VuZENvbW1hbmRXaXRoUmVzcChcclxuICAgICAgICAgICAgdGhpcy5idWlsZERhdGVUaW1lQ29tbWFuZChzcGVjaWZpY1RpbWUpXHJcbiAgICAgICAgKS50aGVuKHJlc3AgPT4gcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICBkYXRlVGltZVJlc3VsdDogdGhpcy5yZXN1bHRDb2Rlc1sgdGhpcy5jb252ZXJ0QXJyYXlUb0hleFN0cmluZyhyZXNwLnNsaWNlKDQsIDYpKSBdIHx8IGAke3Vua25vd25VbmRvY30gcmVzdWx0IGNvZGVgXHJcbiAgICAgICAgfSkpLmNhdGNoKGVyciA9PiByZWplY3QodGhpcy5idWlsZERldmljZUVycihlcnIpKSlcclxuICAgICk7XHJcblxyXG4gICAgcmVhZEJhdHRlcnlMZXZlbCA9ICgpID0+IG5ldyBQcm9taXNlKCByZXNvbHZlID0+IFxyXG4gICAgICAgIHRoaXMuc2VuZENvbW1hbmRXaXRoUmVzcChbMHg0NSwgMHgwMF0pLnRoZW4odmFsdWUgPT4gcmVzb2x2ZSggdmFsdWVbMl0gKSlcclxuICAgICk7XHJcblxyXG4gICAgZ2V0RGV2aWNlU24gPSAoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IFxyXG4gICAgICAgIHRoaXMuc2VuZENvbW1hbmRXaXRoUmVzcChbMHgwMCwgMHgwMSwgMHgwM10pXHJcbiAgICAgICAgLnRoZW4oIHJlc3AgPT4gdGhpcy5idWZmZXJUb1V0ZjgocmVzcC5zbGljZSgyKSkgXHJcbiAgICAgICAgKS50aGVuKGZvcm1hdHRlZFZhbHVlID0+IHJlc29sdmUoZm9ybWF0dGVkVmFsdWUpKVxyXG4gICAgKTtcclxuXHJcbiAgICBnYXRoZXJEZXZpY2VJbmZvID0gKCkgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBsZXQgYmF0dGVyeTtcclxuICAgICAgICBsZXQgc2VyaWFsTnVtO1xyXG5cclxuICAgICAgICB0aGlzLnJlYWRCYXR0ZXJ5TGV2ZWwoKVxyXG4gICAgICAgIC50aGVuKCByZXNwQmF0dGVyeSA9PiB7XHJcbiAgICAgICAgICAgIGJhdHRlcnkgPSByZXNwQmF0dGVyeTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGV2aWNlU24oKVxyXG4gICAgICAgIH0pLnRoZW4oIHJlc3BTbiA9PiB7XHJcbiAgICAgICAgICAgIHNlcmlhbE51bSA9IHJlc3BTbi5zdWJzdHJpbmcoMCwgNyk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKFsgYmF0dGVyeSwgc2VyaWFsTnVtIF0pXHJcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpIClcclxuICAgIH0pO1xyXG5cclxuICAgIGdldERldmljZUluZm8gPSAoKSA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4gKCF0aGlzLmRldmljZS5nYXR0LmNvbm5lY3RlZCkgP1xyXG4gICAgICAgIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RPcGVuKSApIFxyXG4gICAgICAgIDogdGhpcy5nYXRoZXJEZXZpY2VJbmZvKClcclxuICAgICAgICAgICAgLnRoZW4oXHJcbiAgICAgICAgICAgICAgICBkZXZpY2VJbmZvID0+IHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGRldmljZU5hbWU6IHRoaXMuZGV2aWNlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlVHlwZTogdGhpcy5kZXZpY2VUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhdHRlcnlMZXZlbDogZGV2aWNlSW5mb1swXSxcclxuICAgICAgICAgICAgICAgICAgICBzZXJpYWxOdW1iZXI6IGRldmljZUluZm9bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgaXNDb25uZWN0ZWQ6IHRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApLmNhdGNoKGVyciA9PiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZXJyKSApKVxyXG4gICAgKTtcclxuXHJcbiAgICBzZW5kVXNlclNlbGVjdGlvbiA9IHNlbGVjdGlvblJlc3VsdCA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/IFxyXG4gICAgICAgIHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihkZXZpY2VOb3RPcGVuKSApIFxyXG4gICAgICAgIDogdGhpcy5zZW5kQ29tbWFuZFdpdGhSZXNwKFsweDQ5LCAweDA4LCAweDAwLCAweDAwLCAweDAzLCAweDAyLCAweDAwLCAweDAyLCAweDAwLCBzZWxlY3Rpb25SZXN1bHRdKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nRGV2aWNlU3RhdGUoYFtVc2VyIFNlbGVjdGlvbiBSZXNwXTogJHt0aGlzLmNvbnZlcnRBcnJheVRvSGV4U3RyaW5nKHJlc3ApfWApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlclNlbGVjdGlvblJlc3BvbnNlOiAodGhpcy5yZXN1bHRDb2Rlc1sgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoIHJlc3Auc2xpY2UoNCwgNikgKSBcclxuICAgICAgICAgICAgICAgICAgICBdIHx8IFwiVW5rbm93biBvciB1bmRvY3VtZW50ZWQgcmVzdWx0IGNvZGVcIilcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KCB0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikgKSlcclxuICAgIClcclxuXHJcbiAgICBzZW5kQXJwYyA9IGFycGNSZXNwID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHRoaXMuc2VuZEFycGNCYXNlKGFycGNSZXNwKVxyXG4gICAgICAgIC50aGVuKGFycGNDbWQgPT4gdGhpcy5zZW5kQ29tbWFuZFdpdGhSZXNwKGFycGNDbWQpKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0RldmljZVN0YXRlKGBbU2VuZCBBUlBDIFJlc3BdOiAke3RoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcocmVzcCl9YCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdENvZGUgPSAocmVzcC5sZW5ndGggPiA1KSA/IHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcoIHJlc3Auc2xpY2UoNCwgNikgKSA6IFwiXCI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICBzZW5kQXJwY1Jlc3BvbnNlOiAodGhpcy5yZXN1bHRDb2Rlc1sgcmVzdWx0Q29kZSBdIHx8IFwiVW5rbm93biBvciB1bmRvY3VtZW50ZWQgcmVzdWx0IGNvZGVcIilcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KHRoaXMuYnVpbGREZXZpY2VFcnIoZXJyKSkpXHJcbiAgICApO1xyXG5cclxuICAgIGNsZWFyR2F0dENhY2hlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh3aW5kb3cpXHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLm9uRGVzdHJveUhhbmRsZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubWF4QmxvY2tJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsTm90aWZpY2F0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJhd0RhdGEgPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhUmVhZFN0YXR1c0NoYXJhY3RlcmlzdGljID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRhdGFSZWFkeUNoYXJhY3RlcmlzdGljID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbW1hbmRDaGFyYWN0ZXJpc3RpYyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jYXJkRGF0YUxpc3RlbmVyID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjZWFzZU5vdGlmaWNhdGlvbnMgPSAoKSA9PiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiAoIXRoaXMuY2FyZERhdGFMaXN0ZW5lcikgPyByZXNvbHZlKCkgOiB0aGlzLmNhcmREYXRhTGlzdGVuZXIuc3RvcE5vdGlmaWNhdGlvbnMoKVxyXG4gICAgICAgIC50aGVuKCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FyZERhdGFMaXN0ZW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFyYWN0ZXJpc3RpY3ZhbHVlY2hhbmdlZCcsIHRoaXMuY2FyZERhdGFIYW5kbGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVJlYWRTdGF0dXNDaGFyYWN0ZXJpc3RpYy5zdG9wTm90aWZpY2F0aW9ucygpXHJcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVJlYWR5Q2hhcmFjdGVyaXN0aWMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhcmFjdGVyaXN0aWN2YWx1ZWNoYW5nZWQnLCB0aGlzLmRhdGFSZWFkeUhhbmRsZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpXHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgY2FuY2VsVHJhbnNhY3Rpb24gPSAoKSA9PiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4gKCF0aGlzLmNvbW1hbmRDaGFyYWN0ZXJpc3RpYykgPyBcclxuICAgICAgICByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoY29tbWFuZE5vdFNlbnQpKVxyXG4gICAgICAgIDogdGhpcy5zZW5kQ29tbWFuZFdpdGhSZXNwKHRoaXMuY2FuY2VsRW12Q29tbWFuZClcclxuICAgICAgICAudGhlbihyZXNwID0+IHJlc29sdmUoe1xyXG4gICAgICAgICAgICBjYW5jZWxSZXNwb25zZTogKHRoaXMucmVzdWx0Q29kZXNbIHRoaXMuY29udmVydEFycmF5VG9IZXhTdHJpbmcocmVzcC5zbGljZSg0LCA2KSkgXSB8fCBgJHt1bmtub3duVW5kb2N9IHJlc3VsdCBjb2RlYClcclxuICAgICAgICB9KSkuY2F0Y2goZXJyID0+IHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikpKVxyXG4gICAgKTtcclxuXHJcbiAgICBjbG9zZURldmljZSA9ICgpID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiBcclxuICAgICAgICAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/IHJlc29sdmUoe1xyXG4gICAgICAgICAgICBjb2RlOiBzdWNjZXNzQ29kZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogY2xvc2VTdWNjZXNzXHJcbiAgICAgICAgfSkgXHJcbiAgICAgICAgOiB0aGlzLmNlYXNlTm90aWZpY2F0aW9ucygpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyR2F0dENhY2hlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB9KS50aGVuKCgpID0+IHJlc29sdmUoe1xyXG4gICAgICAgICAgICBjb2RlOiBzdWNjZXNzQ29kZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogY2xvc2VTdWNjZXNzXHJcbiAgICAgICAgfSkpLmNhdGNoKGVyciA9PiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZXJyKSApKVxyXG4gICAgKSBcclxuXHJcbiAgICBjbGVhclNlc3Npb24gPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBcclxuICAgICAgICAodGhpcy5kZXZpY2UgJiYgdGhpcy5kZXZpY2UuZ2F0dC5jb25uZWN0ZWQpID8gXHJcbiAgICAgICAgICAgIHJlc29sdmUoXCJTQ1JBIGRldmljZXMgZG8gbm90IGNhcnJ5IGEgc2Vzc2lvblwiKSBcclxuICAgICAgICAgICAgOiByZWplY3QoIHRoaXMuYnVpbGREZXZpY2VFcnIoZGV2aWNlTm90T3BlbikpIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2NyYTtcclxuIiwiaW1wb3J0IFNjcmEgZnJvbSAnLi9zY3JhJztcclxuaW1wb3J0IHsgXHJcbiAgICBzd2lwZUxpc3RlbmluZyxcclxuICAgIHN1Y2Nlc3NDb2RlLFxyXG4gICAgZUR5bmFtb1xyXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IGRldmljZU5vdE9wZW4gfSBmcm9tICcuLi9lcnJvckhhbmRsZXIvZXJyQ29uc3RhbnRzJztcclxuXHJcbmNsYXNzIEVEeW5hbW8gZXh0ZW5kcyBTY3JhIHtcclxuICAgIGNvbnN0cnVjdG9yKGRldmljZSwgY2FsbEJhY2tzKSB7XHJcbiAgICAgICAgc3VwZXIoZGV2aWNlLCBjYWxsQmFja3MpO1xyXG5cclxuICAgICAgICB0aGlzLmRldmljZVR5cGUgPSBlRHluYW1vO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENhcmRTZXJ2aWNlID0gKCkgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IFxyXG4gICAgICAgIHRoaXMuZ2V0Q2FyZFNlcnZpY2VCYXNlKDEpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiByZXNvbHZlKHJlc3ApXHJcbiAgICAgICAgKS5jYXRjaCggZXJyID0+IHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikpIClcclxuICAgICk7XHJcblxyXG4gICAgcmVxdWVzdENhcmRTd2lwZSA9ICgpID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/IFxyXG4gICAgICAgIHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGRldmljZU5vdE9wZW4pKVxyXG4gICAgICAgIDogcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgIGNvZGU6IHN1Y2Nlc3NDb2RlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBzd2lwZUxpc3RlbmluZ1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFRHluYW1vO1xyXG4iLCJpbXBvcnQgU2NyYSBmcm9tICcuL3NjcmEnO1xyXG5pbXBvcnQgeyBcclxuICAgIHN3aXBlTGlzdGVuaW5nLFxyXG4gICAgc3VjY2Vzc0NvZGUsXHJcbiAgICB0RHluYW1vXHJcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgY29tbWFuZE5vdEFjY2VwdGVkLCBkZXZpY2VOb3RPcGVuIH0gZnJvbSAnLi4vZXJyb3JIYW5kbGVyL2VyckNvbnN0YW50cyc7XHJcblxyXG5jbGFzcyBURHluYW1vIGV4dGVuZHMgU2NyYSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIGNhbGxCYWNrcykge1xyXG4gICAgICAgIHN1cGVyKGRldmljZSwgY2FsbEJhY2tzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRIZWFkQWx3YXlzT24gPSBbMHg1OCwgMHgwMSwgMHgwMV07XHJcbiAgICAgICAgLy90aGlzLnNldEhlYWRPZmZXaGVuSWRsZSA9IFVpbnQ4QXJyYXkub2YoMHg1OCwgMHgwMSwgMHgwMCk7XHJcblxyXG4gICAgICAgIHRoaXMuZGV2aWNlVHlwZSA9IHREeW5hbW9cclxuICAgIH1cclxuXHJcbiAgICBnZXRDYXJkU2VydmljZSA9ICgpID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiBcclxuICAgICAgICB0aGlzLmdldENhcmRTZXJ2aWNlQmFzZSgpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiByZXNvbHZlKHJlc3ApXHJcbiAgICAgICAgKS5jYXRjaCggZXJyID0+IHJlamVjdCh0aGlzLmJ1aWxkRGV2aWNlRXJyKGVycikpIClcclxuICAgICk7XHJcblxyXG4gICAgcmVxdWVzdENhcmRTd2lwZSA9ICgpID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiAoIXRoaXMuZGV2aWNlLmdhdHQuY29ubmVjdGVkKSA/XHJcbiAgICAgICAgcmVqZWN0KHRoaXMuYnVpbGREZXZpY2VFcnIoZGV2aWNlTm90T3BlbikpIFxyXG4gICAgICAgIDogdGhpcy5zZW5kQ29tbWFuZFdpdGhSZXNwKHRoaXMuc2V0SGVhZEFsd2F5c09uKVxyXG4gICAgICAgIC50aGVuKHNldEhlYWRPcGVuUmVzcCA9PiAocGFyc2VJbnQoc2V0SGVhZE9wZW5SZXNwKSA9PT0gMCkgPyBcclxuICAgICAgICAgICAgcmVzb2x2ZSh7IFxyXG4gICAgICAgICAgICAgICAgY29kZTogc3VjY2Vzc0NvZGUsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBzd2lwZUxpc3RlbmluZ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICA6IHJlamVjdCggdGhpcy5idWlsZERldmljZUVycihjb21tYW5kTm90QWNjZXB0ZWQpIClcclxuICAgICAgICApLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSlcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFREeW5hbW87XHJcbiIsImltcG9ydCBEcE1pbmkgZnJvbSAnLi4vZGV2aWNlcy9keW5hUHJvTWluaSc7XHJcbmltcG9ydCBEeW5Qcm9HbyBmcm9tICcuLi9kZXZpY2VzL2R5bmFQcm9Hbyc7XHJcbmltcG9ydCBFRHluYW1vIGZyb20gJy4uL2RldmljZXMvZUR5bmFtbyc7XHJcbmltcG9ydCBURHluYW1vIGZyb20gJy4uL2RldmljZXMvdER5bmFtbyc7XHJcbmltcG9ydCB7IFxyXG4gICAgdER5bmFtbyxcclxuICAgIGVEeW5hbW8sXHJcbiAgICBkeW5hUHJvR28sXHJcbiAgICBkcE1pbmkgXHJcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJzsgXHJcblxyXG5jb25zdCBjb21tYW5kTm90VXNlZCA9IGlzU2NyYSA9PiBcclxuICAgICgpID0+IFByb21pc2UucmVzb2x2ZShgJHsoaXNTY3JhID8gJ1NDUkEnIDogJ1BpblBhZCcpfSBkZXZpY2VzIGRvIG5vdCB1c2UgdGhpcyBjb21tYW5kYCk7XHJcblxyXG4gICAgXHJcbmNsYXNzIERldmljZUludGVyZmFjZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IFxyXG4gICAgICAgIGdldENhcmRTZXJ2aWNlLFxyXG4gICAgICAgIHN0YXJ0VHJhbnNhY3Rpb24sXHJcbiAgICAgICAgY2FuY2VsVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgc2VuZENvbW1hbmRXaXRoUmVzcCxcclxuICAgICAgICBjbGVhclNlc3Npb24sXHJcbiAgICAgICAgY2xvc2VEZXZpY2UsXHJcbiAgICAgICAgZ2V0RGV2aWNlSW5mbyxcclxuICAgICAgICByZXF1ZXN0Q2FyZFN3aXBlLFxyXG4gICAgICAgIGlzRGV2aWNlQ29ubmVjdGVkLFxyXG4gICAgICAgIGRpc2Nvbm5lY3QsXHJcbiAgICAgICAgcmVxdWVzdFBpbkVudHJ5LFxyXG4gICAgICAgIHNldERpc3BsYXlNZXNzYWdlLFxyXG4gICAgICAgIHNlbmRVc2VyU2VsZWN0aW9uLFxyXG4gICAgICAgIHNlbmRBcnBjLFxyXG4gICAgICAgIHNldERldmljZURhdGVUaW1lLFxyXG4gICAgICAgIHJlcXVlc3RUaXBPckNhc2hiYWNrXHJcbiAgICB9KSB7XHJcbiAgICAgICAgdGhpcy5vcGVuRGV2aWNlID0gZ2V0Q2FyZFNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5zdGFydFRyYW5zYWN0aW9uID0gc3RhcnRUcmFuc2FjdGlvbjtcclxuICAgICAgICB0aGlzLmNhbmNlbFRyYW5zYWN0aW9uID0gY2FuY2VsVHJhbnNhY3Rpb247XHJcbiAgICAgICAgdGhpcy5zZW5kQ29tbWFuZCA9IHNlbmRDb21tYW5kV2l0aFJlc3A7XHJcbiAgICAgICAgdGhpcy5jbGVhclNlc3Npb24gPSBjbGVhclNlc3Npb247XHJcbiAgICAgICAgdGhpcy5jbG9zZURldmljZSA9IGNsb3NlRGV2aWNlO1xyXG4gICAgICAgIHRoaXMuZGV2aWNlSW5mbyA9IGdldERldmljZUluZm87XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q2FyZFN3aXBlID0gcmVxdWVzdENhcmRTd2lwZTtcclxuICAgICAgICB0aGlzLmlzRGV2aWNlT3BlbiA9IGlzRGV2aWNlQ29ubmVjdGVkO1xyXG4gICAgICAgIHRoaXMuZm9yY2VEaXNjb25uZWN0ID0gZGlzY29ubmVjdDtcclxuICAgICAgICB0aGlzLnJlcXVlc3RQaW5FbnRyeSA9IChyZXF1ZXN0UGluRW50cnkpID8gcmVxdWVzdFBpbkVudHJ5IDogY29tbWFuZE5vdFVzZWQodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zZXREaXNwbGF5TWVzc2FnZSA9IChzZXREaXNwbGF5TWVzc2FnZSkgPyBzZXREaXNwbGF5TWVzc2FnZSA6IGNvbW1hbmROb3RVc2VkKHRydWUpO1xyXG4gICAgICAgIHRoaXMuc2VuZFVzZXJTZWxlY3Rpb24gPSAoc2VuZFVzZXJTZWxlY3Rpb24pID8gc2VuZFVzZXJTZWxlY3Rpb24gOiBjb21tYW5kTm90VXNlZCgpO1xyXG4gICAgICAgIHRoaXMuc2VuZEFycGNSZXNwb25zZSA9IChzZW5kQXJwYykgPyBzZW5kQXJwYyA6ICgpID0+IFByb21pc2UucmVzb2x2ZShcIkZlYXR1cmUgUGVuZGluZyBDb21wbGV0aW9uXCIpO1xyXG4gICAgICAgIHRoaXMuc2V0RGV2aWNlRGF0ZVRpbWUgPSAoc2V0RGV2aWNlRGF0ZVRpbWUpID8gc2V0RGV2aWNlRGF0ZVRpbWUgOiBjb21tYW5kTm90VXNlZCgpO1xyXG4gICAgICAgIHRoaXMucmVxdWVzdFRpcE9yQ2FzaGJhY2sgPSAocmVxdWVzdFRpcE9yQ2FzaGJhY2spID8gcmVxdWVzdFRpcE9yQ2FzaGJhY2sgOiBjb21tYW5kTm90VXNlZCh0cnVlKTtcclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IG5ld0RldmljZUluc3RhbmNlID0ge1xyXG4gICAgW2VEeW5hbW9dOiAoZGV2aWNlLCBjYWxsYmFja3MpID0+IG5ldyBFRHluYW1vKGRldmljZSwgY2FsbGJhY2tzKSxcclxuICAgIFt0RHluYW1vXTogIChkZXZpY2UsIGNhbGxiYWNrcykgPT4gbmV3IFREeW5hbW8oZGV2aWNlLCBjYWxsYmFja3MpLFxyXG4gICAgW2R5bmFQcm9Hb106IChkZXZpY2UsIGNhbGxiYWNrcykgPT4gbmV3IER5blByb0dvKGRldmljZSwgY2FsbGJhY2tzKSxcclxuICAgIFtkcE1pbmldOiAoZGV2aWNlLCBjYWxsYmFja3MpID0+IG5ldyBEcE1pbmkoZGV2aWNlLCBjYWxsYmFja3MpLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYnVpbGREZXZpY2VPYmplY3QgPSAoZGV2aWNlLCBjYWxsYmFja3MsIGRldmljZVR5cGVTdHJpbmcpID0+ICh7XHJcbiAgICBpZDogZGV2aWNlLmlkLFxyXG4gICAgbmFtZTogZGV2aWNlLm5hbWUsXHJcbiAgICBkZXZpY2VUeXBlOiBkZXZpY2VUeXBlU3RyaW5nLFxyXG4gICAgZGV2aWNlSW50ZXJmYWNlOiBuZXcgRGV2aWNlSW50ZXJmYWNlKFxyXG4gICAgICAgIG5ld0RldmljZUluc3RhbmNlWyBkZXZpY2VUeXBlU3RyaW5nIF0oZGV2aWNlLCBjYWxsYmFja3MpXHJcbiAgICApXHJcbn0pO1xyXG5cclxuIiwiaW1wb3J0IHtcclxuICAgIHREeW5hbW8sXHJcbiAgICBlRHluYW1vLFxyXG4gICAgZHluYVByb0dvLFxyXG4gICAgZHBNaW5pXHJcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBub3RGb3VuZE9iaiB9IGZyb20gJy4uL2Vycm9ySGFuZGxlci9lcnJDb25zdGFudHMnO1xyXG5cclxuY29uc3QgZUR5bmFtb1BhdHRlcm4gPSBuZXcgUmVnRXhwKC9eZUR5bmFtby0vKTtcclxuY29uc3QgdER5bmFtb1BhdHRlcm4gPSBuZXcgUmVnRXhwKC9edER5bmFtby0vKTtcclxuY29uc3QgZHBNaW5pUGF0dGVybiA9IG5ldyBSZWdFeHAoL15EUE1pbmkvKTtcclxuY29uc3QgZHBHb1BhdHRlcm4gPSBuZXcgUmVnRXhwKC9eRFBHLyk7XHJcblxyXG5cclxuY29uc3QgaW5zcGVjdERldmljZU5hbWUgPSBkZXZpY2VOYW1lID0+ICh0RHluYW1vUGF0dGVybi50ZXN0KGRldmljZU5hbWUpKSA/IHREeW5hbW8gOiBcclxuICAgIChlRHluYW1vUGF0dGVybi50ZXN0KGRldmljZU5hbWUpKSA/IGVEeW5hbW8gOiBcclxuICAgICAgICAoZHBHb1BhdHRlcm4udGVzdChkZXZpY2VOYW1lKSkgPyBkeW5hUHJvR28gOiBcclxuICAgICAgICAgICAgKGRwTWluaVBhdHRlcm4udGVzdChkZXZpY2VOYW1lKSkgPyBkcE1pbmkgOiBcIlwiO1xyXG5cclxuY29uc3QgZm9ybWF0VHlwZVN0cmluZyA9IGRldmljZVR5cGVTdHIgPT4ge1xyXG4gICAgY29uc3QgZGV2aWNlVHlwZUFyciA9IFtkeW5hUHJvR28sIGRwTWluaSwgZUR5bmFtbywgdER5bmFtb107XHJcbiAgICBsZXQgcmV0dXJuU3RyID0gXCJcIjtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRldmljZVR5cGVBcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoZGV2aWNlVHlwZVN0ci50b0xvd2VyQ2FzZSgpID09PSBkZXZpY2VUeXBlQXJyW2ldLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuU3RyID0gZGV2aWNlVHlwZUFycltpXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXR1cm5TdHI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmaW5kRGV2aWNlVHlwZVN0cmluZyA9IChuYW1lU3RyLCB0eXBlU3RyKSA9PiB7XHJcbiAgICBpZiAodHlwZVN0cikge1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFN0ciA9IGZvcm1hdFR5cGVTdHJpbmcodHlwZVN0cik7XHJcblxyXG4gICAgICAgIGlmIChmb3JtYXR0ZWRTdHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0cjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluc3BlY3REZXZpY2VOYW1lKG5hbWVTdHIpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmaW5kRGV2aWNlQnlQcm9kdWN0TmFtZSA9IHNlbGVjdGVkRGV2aWNlID0+IG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBsZXQgbW9kZWxOYW1lU3RyaW5nO1xyXG5cclxuICAgIHJldHVybiBzZWxlY3RlZERldmljZS5nYXR0LmNvbm5lY3QoKVxyXG4gICAgLnRoZW4oc2VydmVyID0+IHNlcnZlci5nZXRQcmltYXJ5U2VydmljZSgnZGV2aWNlX2luZm9ybWF0aW9uJylcclxuICAgICkudGhlbihzZXJ2aWNlID0+IHNlcnZpY2UuZ2V0Q2hhcmFjdGVyaXN0aWMoJ21vZGVsX251bWJlcl9zdHJpbmcnKVxyXG4gICAgKS50aGVuKGNoYXJhY3RlcmlzdGljID0+IGNoYXJhY3RlcmlzdGljLnJlYWRWYWx1ZSgpXHJcbiAgICApLnRoZW4odmFsdWUgPT4ge1xyXG4gICAgICAgIG1vZGVsTmFtZVN0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKS5kZWNvZGUodmFsdWUpLnRyaW0oKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBzZWxlY3RlZERldmljZS5nYXR0LmRpc2Nvbm5lY3QoKSApO1xyXG4gICAgfSkudGhlbiggKCkgPT4gcmVzb2x2ZSggbW9kZWxOYW1lU3RyaW5nIClcclxuICAgICkuY2F0Y2goZXJyID0+IChcclxuICAgICAgICAgICAgZXJyLmNvZGUgPT09IG5vdEZvdW5kT2JqLmVycm9yQ29kZSAmJiBcclxuICAgICAgICAgICAgZXJyLm5hbWUgPT09IG5vdEZvdW5kT2JqLmVycm9yTmFtZSAmJiBcclxuICAgICAgICAgICAgZXJyLm1lc3NhZ2UuaW5jbHVkZXMoXCIwMDAwMTgwYS0wMDAwLTEwMDAtODAwMC0wMDgwNWY5YjM0ZmJcIilcclxuICAgICAgICApID8gKCFzZWxlY3RlZERldmljZS5nYXR0LmNvbm5lY3RlZCkgPyByZXNvbHZlKCBkeW5hUHJvR28gKSBcclxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoIHNlbGVjdGVkRGV2aWNlLmdhdHQuZGlzY29ubmVjdCgpICkudGhlbigoKSA9PiByZXNvbHZlKCBkeW5hUHJvR28gKSlcclxuICAgICAgICA6IHJlamVjdChlcnIpXHJcbiAgICApO1xyXG59KTtcclxuIiwiaW1wb3J0IEFwaUVycm9yIGZyb20gJy4vZXJyb3JIYW5kbGVyL2FwaUVycm9yJztcclxuaW1wb3J0IHsgYWxsRGV2aWNlQ29uZmlnLCBmaW5kRGV2aWNlQnlEZXZpY2VOYW1lIH0gZnJvbSAnLi9jb25maWd1cmF0aW9ucyc7XHJcbmltcG9ydCB7IGJ1aWxkRGV2aWNlT2JqZWN0IH0gZnJvbSAnLi91dGlscy9pbnN0YW5jaWF0ZURldmljZSc7XHJcbmltcG9ydCB7IGZpbmREZXZpY2VUeXBlU3RyaW5nLCBmaW5kRGV2aWNlQnlQcm9kdWN0TmFtZSB9IGZyb20gJy4vdXRpbHMvaWRlbnRpZnlEZXZpY2UnO1xyXG5cclxuXHJcbmNvbnN0IGFycmFuZ2VDYWxsYmFja3MgPSBjYWxsQmFja3MgPT4ge1xyXG5cclxuICAgIGNvbnN0IGRlZmF1bHRDYWxsYmFjayA9IGRhdGFPYmogPT4ge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcIkNhbGxiYWNrIG5vdCBwcm92aWRlZCB0byAnc2NhbkZvckRldmljZXMnIGZ1bmN0aW9uLiBQbGVhc2UgcHJvdmlkZSBhdCBsZWFzdCBvbmUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gdGhpcyBtZXRob2RcIik7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ0cmFuc2FjdGlvbkNhbGxiYWNrIGRhdGE6IFwiLCBkYXRhT2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsQmFja3MgPSBjYWxsQmFja3MgfHwgZGVmYXVsdENhbGxiYWNrO1xyXG4gICAgXHJcbiAgICBjb25zdCBpc0Z1bmNUeXBlID0gKHR5cGVvZiBjYWxsQmFja3MgPT09ICdmdW5jdGlvbicpO1xyXG5cclxuICAgIGNvbnN0IHByb3BBc3NpZ25tZW50ID0gcHJvcE5hbWUgPT4gKGNhbGxCYWNrc1twcm9wTmFtZV0pID8gY2FsbEJhY2tzW3Byb3BOYW1lXSA6IFxyXG4gICAgICAgIChpc0Z1bmNUeXBlKSA/IGNhbGxCYWNrcyA6IGNhbGxCYWNrcy50cmFuc2FjdGlvbkNhbGxiYWNrO1xyXG5cclxuICAgIGNvbnN0IGRlZmF1bHRFcnJDYWxsYmFjayA9IGVyck9iaiA9PiBcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiW01hZ2Vuc2FCbHVldG9vdGggSW50ZXJuYWwgRXJyb3JdOiBcIiwgZXJyT2JqKTtcclxuXHJcbiAgICBjYWxsQmFja3MuZXJyb3JDYWxsYmFjayA9IChjYWxsQmFja3MuZXJyb3JDYWxsYmFjayB8fCBkZWZhdWx0RXJyQ2FsbGJhY2spO1xyXG4gICAgY2FsbEJhY2tzLnRyYW5zYWN0aW9uU3RhdHVzQ2FsbGJhY2sgPSAoIGNhbGxCYWNrcy50cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrIHx8IHByb3BBc3NpZ25tZW50KCd0cmFuc2FjdGlvblN0YXR1c0NhbGxiYWNrJykgKTtcclxuICAgIGNhbGxCYWNrcy51c2VyU2VsZWN0aW9uQ2FsbGJhY2sgPSAoIGNhbGxCYWNrcy51c2VyU2VsZWN0aW9uQ2FsbGJhY2sgfHwgcHJvcEFzc2lnbm1lbnQoJ3VzZXJTZWxlY3Rpb25DYWxsYmFjaycpICk7XHJcbiAgICBjYWxsQmFja3MuZGlzcGxheUNhbGxiYWNrID0gKCBjYWxsQmFja3MuZGlzcGxheUNhbGxiYWNrIHx8IHByb3BBc3NpZ25tZW50KCdkaXNwbGF5Q2FsbGJhY2snKSApO1xyXG4gICAgY2FsbEJhY2tzLmRpc2Nvbm5lY3RIYW5kbGVyID0gKGNhbGxCYWNrcy5kaXNjb25uZWN0SGFuZGxlciB8fCBwcm9wQXNzaWdubWVudCgndHJhbnNhY3Rpb25DYWxsYmFjaycpICk7XHJcblxyXG4gICAgcmV0dXJuIGNhbGxCYWNrcztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNjYW5Gb3JEZXZpY2VzID0gKGNhbGxCYWNrcywgZGV2aWNlTmFtZSwgZGV2aWNlVHlwZSkgPT4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGlmICh0eXBlb2YgY2FsbEJhY2tzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgY2FsbEJhY2tzLnRyYW5zYWN0aW9uQ2FsbGJhY2sgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgIHJldHVybiByZWplY3QoXCJXaGVuIHByb3ZpZGluZyBtdWx0aXBsZSBjYWxsYmFja3MgaW4gYW4gb2JqZWN0LCAndHJhbnNhY3Rpb25DYWxsYmFjaycgbXVzdCBiZSBwcm92aWRlZFwiKTtcclxuXHJcbiAgICBjYWxsQmFja3MgPSBhcnJhbmdlQ2FsbGJhY2tzKGNhbGxCYWNrcyk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IChkZXZpY2VOYW1lKSA/IGZpbmREZXZpY2VCeURldmljZU5hbWUoZGV2aWNlTmFtZSkgOiBhbGxEZXZpY2VDb25maWc7XHJcbiAgICBcclxuICAgIHJldHVybiBuYXZpZ2F0b3IuYmx1ZXRvb3RoLnJlcXVlc3REZXZpY2UoIG9wdGlvbnMgKVxyXG4gICAgICAgIC50aGVuKGRldmljZSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZXZpY2VUeXBlTmFtZSA9IGZpbmREZXZpY2VUeXBlU3RyaW5nKGRldmljZS5uYW1lLCBkZXZpY2VUeXBlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoZGV2aWNlVHlwZU5hbWUpID8gcmVzb2x2ZSggYnVpbGREZXZpY2VPYmplY3QoZGV2aWNlLCBjYWxsQmFja3MsIGRldmljZVR5cGVOYW1lKSApIDpcclxuICAgICAgICAgICAgICAgIGZpbmREZXZpY2VCeVByb2R1Y3ROYW1lKGRldmljZSkudGhlbiggXHJcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlVHlwZVN0cmluZyA9PiAoIWRldmljZVR5cGVTdHJpbmcpID8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIlNlbGVjdGVkIGRldmljZSBpcyBub3Qgc3VwcG9ydGVkXCIpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlc29sdmUoIGJ1aWxkRGV2aWNlT2JqZWN0KGRldmljZSwgY2FsbEJhY2tzLCBkZXZpY2VUeXBlU3RyaW5nKSApXHJcbiAgICAgICAgICAgICAgICApLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XHJcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+ICh0eXBlb2YgZXJyID09PSBcIm9iamVjdFwiKSA/IFxyXG4gICAgICAgICAgICByZWplY3QoIG5ldyBBcGlFcnJvcihlcnIpICkgOiBcclxuICAgICAgICAgICAgcmVqZWN0KFwiU2VsZWN0ZWQgZGV2aWNlIGlzIG5vdCBzdXBwb3J0ZWRcIilcclxuICAgICAgICApXHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9