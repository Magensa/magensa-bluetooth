!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["magensa-bluetooth"]=t():e["magensa-bluetooth"]=t()}(window,(function(){return function(e){var t={};function a(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,a),s.l=!0,s.exports}return a.m=e,a.c=t,a.d=function(e,t,i){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)a.d(i,s,function(t){return e[t]}.bind(null,s));return i},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";a.r(t),a.d(t,"scanForDevices",(function(){return pe}));class i extends Error{constructor(e){let{message:t,code:a,name:i}=e;super(t||"Web Bluetooth API threw an unknown, or undocumented error"),this.code=a||1e3,this.name=i||"WebBluetoothError"}}var s=i;const r={filters:[{services:["0508e6f8-ad82-898f-f843-e3410cb60104"]},{services:["0508e6f8-ad82-898f-f843-e3410cb60101"]},{services:["0508e6f8-ad82-898f-f843-e3410cb60103"]}],optionalServices:["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101","0508e6f8-ad82-898f-f843-e3410cb60202","device_information"],keepRepeatedDevices:!1,acceptAllAdvertisements:!1},n=Object.freeze({DFDF56:"Encrypted Transaction Data KSN",F0:"Transaction Results","5F30":"Service Code",DFDF59:"Encrypted Data Primitive",DFDF54:"Mac KSN",DFDF55:"MAC Encryption Type",DFDF25:"IFD Serial Number",FA:"Generic Data Container",F1:"Status Data Container",DFDF53:"Fallback Indicator",DFDF4D:"Masked T2 PICC/ICC Data",DFDF52:"Card Type",F8:"Encrypted Data Container",DFDF57:"Encryption Type",DFDF58:"Number of padding bytes in Encrypted Data block",DFDF36:"Encrypted Track 1 Status",DFDF37:"Encrypted Track 1",DFDF38:"Encrypted Track 2 Status",DFDF39:"Encrypted Track 2",DFDF3A:"Encrypted Track 3",DFDF3B:"Encrypted Track 3",DFDF3C:"Encrypted MagnePrint",DFDF43:"MagnePrint Status",DFDF50:"MSR KSN",DFDF51:"MSR Encryption Type",DFDF1A:"Transaction Status",DFDF1B:"Additional Transaction Info",F2:"Transaction Data Container",F3:"Reversal Data Container",F7:"Merchant Data Container","5F25":"Application Effective Date","5F24":"Application Expiration Date",89:"Authorization Code","5F2A":"Transaction Currency Code","9F02":"Amount Authorized","9F03":"Amount, Other","9F06":"Application Identifier","9F12":"Application Preferred Name","9F1C":"Terminal Identification","9F39":"POS Entry Mode","9C":"Transaction Type","9F34":"Cardholder Verification Results","5F57":"Account Type","5F20":"Cardholder Name",DFDF4D:"Masked Track 2 PICC/ICC Data",DFDF17:"EMV Transaction Result Message",DFDF05:"Reversal Data",DFDF06:"Online Response",DFDF01:"Certificate Revocation List",DFDF02:"Online Message for EMV Transaction",DFDF20:"Terminal Features",DFDF26:"EMV Database Level",DFDF5B:"Terminal Capabilities for Purchase Transaction",DFDF5C:"Terminal Capabilities for Cashback Transaction",DFDF6E:"Terminal Capabilities for Payment Transaction",DFDF75:"Terminal Capabilities for Inquiry",DFDF76:"Terminal Capabilities for Transfer",DFDF23:"ASI (Application Selection Indicator)",DFDF10:"Threshold Value for Biased Random Selection",DFDF11:"Target Percentage to be used for Random Selection",DFDF12:"Maximum Target Percentage to be used for Biased Random Selection",DFDF67:"MSR Fallback Supported",DFDF68:"PIN Bypass Supported",DFDF16:"Max Length of Issues Script",F9:"MAC Structure and Generic Data Container",70:"ARQC Container",F4:"MSR Data Container","9F1A":"Terminal Country Code","5F36":"Transaction Currency Exponent","9F4E":"Merchant Name and Location",DFDF14:"Socket Timeout for Online Processing",DFDF15:"Socket Retries",DFDF19:"Default Terminal Language",DFDF2D:"Supported Terminal Languages","9F15":"Merchant Category Code","9F16":"Merchant Identifier","9F33":"Terminal Capabilities","9F35":"Terminal Type","9F3C":"Transaction Reference Code","9F3D":"Transaction Currency Exponent","9F40":"Additional Terminal Capabilities",DF8122:"Terminal Action Code - Online",84:"Dedicated File (DF) Name",97:"Default TDOL","9F01":"Acquirer Identifier","9F09":"Application Version Number","9F1B":"Terminal Floor Limit","9F49":"Default DDOL",DF8120:"Terminal Action Code - Default",DF8121:"Terminal Action Code - Denial",DFDF40:"Signature Required","5F34":"PAN Sequence Number"});function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var o=class{constructor(){c(this,"logDeviceState",e=>{let t=new CustomEvent("deviceLog",{bubbles:!0,detail:e});window.dispatchEvent(t)}),c(this,"convertArrayToHexString",e=>Array.from(e,e=>("0"+(255&e).toString(16)).slice(-2)).join("").toUpperCase()),c(this,"readTwoByteLength",e=>e[0]<<8|e[1]),c(this,"bufferToUtf8",e=>new TextDecoder("utf-8").decode(Uint8Array.from(e))),c(this,"castDecToHex",e=>parseInt(e.toString(16),16)),c(this,"newArrayPartial",(e,t)=>new Array(t).fill(e)),c(this,"readByteArray",e=>{let t=[];for(let a=0;a<e.byteLength;a++)t.push(e.getUint8(a));return t}),c(this,"hexToAscii",e=>{let t="";for(let a=0;a<e.length&&"00"!==e.substr(a,2);a+=2)t+=String.fromCharCode(parseInt(e.substr(a,2),16));return t.trim()}),c(this,"decodeRLE",e=>{let t=[e[0]],a=0,i=e.length;for(let s=1;s<i;s++)a=s+1,a+1<i&&e[s]===e[a]?(t.push(...this.newArrayPartial(e[s],e[a+1])),s=a+1):t.push(e[s]);return t}),c(this,"buildInitialDataArray",e=>{let t=[];for(let e=Math.min(...Object.keys(this.rawData));e<this.maxBlockId;e++)t=t.concat(...this.rawData[e]);return e?this.checkRle(t):t}),c(this,"checkRle",e=>this.rleFormats[this.initialNotification[0]]?this.decodeRLE(e):e),c(this,"convertCurrencyCode",e=>{let t=e.toLowerCase();return"us"===t?[8,64]:"euro"===t?[9,120]:[0,0]}),c(this,"convertNumToAmount",e=>{let t=e.toString(),a=[];for(;t.length<12;)t="0"+t;for(let e=0;e<t.length;e+=2)a.push(parseInt(t.substr(e,2),16));return a}),c(this,"delayPromise",(e,t)=>new Promise(a=>{setTimeout(()=>a(t),e)})),this.rleFormats=Object.freeze({0:!1,1:!0,2:!1,3:!0})}};function h(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var d=class extends o{constructor(){super(),h(this,"formatExpPAN",e=>{let t="object"==typeof e?this.bufferToUtf8(e.slice(4)):e;if(-1!==t.indexOf(";")){let e=this.splitExpPAN(t);return{maskedPAN:e[0],Last4:e[1],expirationDate:e[2],serviceCode:e[3]}}return{maskedPAN:"",Last4:"",expirationDate:"",serviceCode:""}}),h(this,"splitExpPAN",e=>{if(e.length>3){let t=e.replace(";","").replace("?","").split("="),a=t[1].slice(0,4),i=t[1].slice(4,7),s=a.slice(-2)+"/"+a.slice(0,2);return[t[0],t[0].slice(-4),s,i]}return["Not Found","Not Found","Not Found","Not Found"]}),this.convertStatusToString=Object.freeze({0:"Ok",1:"Empty",2:"Error",4:"Disabled"})}};function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var u=class extends d{constructor(){super(),l(this,"tlvParser",(e,t)=>{let a,i,s,r=e.length,n=[],c=0,o=!0,h=null,d=[];for(;c<r;)if(i=e[c],o){a=0;let t=!0;if(0===i)break;for(;t&&c<r;)i=e[c],c++,d[a]=i,t=0===a?(i&this.moreTagBytesFlag1)==this.moreTagBytesFlag1:(i&this.moreTagBytesFlag2)==this.moreTagBytesFlag2,a++;h=this.convertArrayToHexString(d.slice(0,a)),o=!1}else{if(s=0,(i&this.moreLengthFlag)==this.moreLengthFlag){let t=i&this.oneByteLengthMask;c++;let a=0;for(;a<t&&c<r;)i=e[c],c++,s=((255&s)<<8)+i,a++}else s=i&this.oneByteLengthMask,c++;if(h){let a=d[0],i=(c+s>r?r:c+s)-c,o=i>0?this.convertArrayToHexString(e.slice(c,c+i)):"";n.push({tag:h,tagLabel:this.magTekTags[h]?this.magTekTags[h]:"Tag Name not yet documented",tagLength:s||o.length+.5,tagValue:this.hexOrAsciiFormatter(h,o,t)}),(a&this.constructedFlag)!=this.constructedFlag&&(c+=s)}o=!0}return n}),l(this,"hexOrAsciiFormatter",(e,t,a)=>{switch(e){case"DFDF1A":return`${t} ${this.trxStatusToString[parseInt(t,16)]}`;case"DFDF4D":return this.hexToAscii(t);case"DFDF25":return a?this.hexToAscii(t):t;case"5F20":return this.hexToAscii(t);default:return t}}),this.magTekTags=n,this.moreTagBytesFlag1=31,this.moreTagBytesFlag2=128,this.constructedFlag=32,this.moreLengthFlag=128,this.oneByteLengthMask=127,this.trxStatusToString=Object.freeze({0:"Approved",1:"Declined",2:"Error",16:"Cancelled By Host",30:"Manual Selected Cancelled by Host",31:"Manual Selection Timeout",33:"Waiting for Card Cancelled by Host",34:"Waiting for Card Timeout",35:"Cancelled by Card Swipe (MSR)",255:"Unknown Transaction Status"})}};class m extends Error{constructor(){super("Device communication error. Length does not match data"),this.name="BleTransmissionError",this.code=1012}}var v=m;class D extends Error{constructor(e){let{code:t,name:a,message:i}=e;super(i),this.name=a||"DeviceError",this.code=t||1e3}}var p=D;function g(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var C=class extends u{constructor(e){super(),g(this,"buildDeviceErr",e=>e instanceof DOMException?new s(e):e instanceof Error?e:new p(e)),g(this,"throwLenErr",()=>new v),g(this,"sendErrToCallback",e=>(this.errorCallback(e),e)),this.errorCallback=e.errorCallback}};const f=Object.freeze({errorCode:8,errorName:"NotFoundError"}),b=Object.freeze({code:19,name:"NetworkError"}),S=Object.freeze({code:1002,name:"DeviceNotFound",message:"Please select device to connect"}),T=Object.freeze({code:1003,name:"GattServerNotConnected",message:"Please connect desired device"}),y=Object.freeze({code:1004,name:"CommandNotSent",message:"Command characteristic not found, device not opened"}),w=Object.freeze({code:1005,name:"CommandNotSent",message:"Device not opened"}),k=Object.freeze({code:1006,name:"CommandNotSent",message:"Application From Host not found.  Device not connected"}),A=Object.freeze({code:1007,name:"ReadFailed",message:"Unable to read data from device. Communication error"}),F=Object.freeze({code:1008,name:"ResponseNotReceived",message:"Command was sent, but response was not received from device"}),E=Object.freeze({code:1009,name:"GetServiceFail",message:"Failed to retrieve primary GATT service. Please connect device"}),P=Object.freeze({code:1013,name:"CommandNotAccepted",message:"Device did not accept command"}),I="Success, listening for swipe",R="DynaPro Mini",N="Configuration",B="Unknown",O=Object.freeze({code:0,message:"Success, there was no session to clear"}),L=Object.freeze({code:19,message:"GATT operation already in progress."}),x=Object.freeze({code:0,message:"Device Closed"}),M=Object.freeze({eDynamo:3,tDynamo:7,[R]:3,dynaProGo:7}),j=Object.freeze({msr:1,chip:2,chipmsr:3,contactless:4,contactlessmsr:5,contactlesschip:6,all:7});new RegExp(/^eDynamo-/),new RegExp(/^tDynamo-/),new RegExp(/^DPMini/),new RegExp(/^DPG/);function H(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var $=class extends C{constructor(e,t){super(t),H(this,"cardTypes",e=>"all"!==e?j[e]||3:M[this.deviceType]||3),H(this,"connect",()=>new Promise((e,t)=>(this.logDeviceState(`[GATT]: Device Connection Request || ${new Date}`),this.device?this.device.gatt.connect().then(t=>(this.logDeviceState(`[GATT]: Device connected - GATT Server retrieved successfully || ${new Date}`),this.gattServer=t,e())):t(this.buildDeviceErr(S))))),H(this,"disconnect",()=>new Promise(e=>this.device.gatt.connected?(this.device.gatt.disconnect(),e(x)):e(x))),H(this,"cacheCardServiceBase",e=>new Promise((t,a)=>(e=e||0,this.logDeviceState(`[GATT]: Cache Card Service Request || ${new Date}`),this.gattServer?this.findPrimaryService(e).then(e=>t(e)).catch(e=>a(e)):a(this.buildDeviceErr(T))))),H(this,"findPrimaryService",e=>new Promise((t,a)=>this.gattServer.getPrimaryService(this.deviceUUIDs[e]).then(e=>(this.cardService=e,this.logDeviceState(`[GATT]: Success! GATT Card Service retrieved and cached || ${new Date}`),this.device.addEventListener("gattserverdisconnected",this.disconnectHandler),t(e))).catch(i=>i.code===f.errorCode&&i.name===f.errorName?(this.deviceUUIDs[e+1],this.logDeviceState(`[ERROR]: Failed to connect. UUID: ${this.deviceUUIDs[e]} is not valid for this device. Trying again with UUID: ${this.deviceUUIDs[e+1]} || ${new Date}`),t(this.findPrimaryService(e+1))):(this.logDeviceState(`[ERROR]: Failed to retrieve Card Service - UUID: ${this.deviceUUIDs[e]} is not valid for this device. || ${new Date}`),a(i))))),H(this,"connectAndCache",e=>new Promise((t,a)=>{let i=t=>new Promise((a,s)=>t<4?this.connect().then(()=>this.cacheCardServiceBase(e)).then(e=>a(e)).catch(e=>e.code===b.code&&e.name===b.name?setTimeout(()=>(this.logDeviceState(`[ERROR]: Error caching GATT Service - Clearing cache and trying again. || ${new Date}`),this.clearGattCache(),a(i(t+1))),500):(this.logDeviceState(`[ERROR]: Failed to cache GATT Service || ${new Date}`),s(e))):s(this.buildDeviceErr(E)));return i(0).then(e=>t(e)).catch(e=>a(e))})),H(this,"onDestroyHandler",()=>this.device&&this.device.gatt.connected?this.device.gatt.disconnect():null),H(this,"waitForDeviceResponse",e=>new Promise(t=>{let a=i=>i<e?this.commandRespAvailable?t(!0):setTimeout(()=>a(i+1),200):t(!1);a(0)})),H(this,"disconnectHandler",e=>{this.gattServer=null,this.cardService=null,this.logDeviceState(`[Disconnected]: Disconnect event. Returning event to user, removing device listener || ${new Date}`),this.disconnectCallback(e),this.device.removeEventListener("gattserverdisconnected",this.disconnectHandler)}),H(this,"isDeviceConnected",()=>!!this.device.gatt&&this.device.gatt.connected),this.device=e,this.disconnectCallback=t.disconnectHandler,this.gattServer=null,this.cardService=null,this.deviceUUIDs=["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101"],this.statusVerbosity=Object.freeze({minimum:0,medium:1,verbose:2}),this.currencyCode=Object.freeze({dollar:[8,64],euro:[9,120],pound:[8,38],default:[0,0]}),this.commandRespAvailable=!1}};function U(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var q=class extends ${constructor(e,t){super(e,t),U(this,"decimalToBinary",e=>{let t=(e>>>0).toString(2);return"00000000".substr(t.length)+t}),U(this,"stringNumToBool",e=>!!+e),U(this,"findNullTerminatedString",e=>{let t;for(let a=0;a<e.length;a++)if(0===e[a]&&0===e[a+1]&&0===e[a+2]){t=a;break}return t?this.convertArrayToHexString(e.slice(2,t)):this.convertArrayToHexString(e.slice(2))})}};function z(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var W=class extends q{constructor(e,t){super(e,t),z(this,"parseDeviceConfiguration",e=>({...this.firstDeviceControlByte(this.decimalToBinary(e[1])),...this.secondDeviceControlByte(this.decimalToBinary(e[2])),...this.maskConfigurationByte(this.decimalToBinary(e[3])),...this.msrConfigurationByte(this.decimalToBinary(e[4])),maskCharacter:this.findMaskCharacter(e[5]),leadingUnmaskedLength:parseInt(this.decimalToBinary(e[6]).slice(4),2),trailingUnmaskedLength:parseInt(this.decimalToBinary(e[6]).slice(0,4),2),emvL2IcsConfig:this.emvL2ConfigOptions[this.decimalToBinary(e[7]).slice(0,4)]||`${B}/Undocumented EMV L2 ICS ${N}`,...this.contactlessConfig(e[8])})),z(this,"contactlessConfig",e=>({contactlessSupport:this.enabledBrands[this.convertArrayToHexString([e])[0]],contactlessGuiControls:"1"===this.decimalToBinary(e)[5]?"Alternate":"Standard"})),z(this,"findMaskCharacter",e=>{if(48===e)return"ASCII: '0'";{const t=this.convertArrayToHexString([e]),a=this.hexToAscii(t);return a?`ASCII: '${a}'`:`Non-ASCII character in hex: '${t}'`}}),z(this,"firstDeviceControlByte",e=>({requireMutualAuth:this.stringNumToBool(e[0]),msrEncryptionVariant:"1"===e[1]?"DATA":"PIN",isClearTextEnabled:this.stringNumToBool(e[3]),isBeeperModeEnabled:this.stringNumToBool(e[4]),isBitmapLocked:this.stringNumToBool(e[6]),isConfigurationLocked:this.stringNumToBool(e[7])})),z(this,"secondDeviceControlByte",e=>({isArpcMacEnabled:this.stringNumToBool(e[1]),isFinancialIccCardTypeReportingEnabled:this.stringNumToBool(e[2]),arqcBatchDataOutputFormat:"1"===e[3]?"Reserved Format":"DynaPro Format"})),z(this,"maskConfigurationByte",e=>({isIsoMaskEnabled:this.stringNumToBool(e[7]),isCheckDigitEnabled:this.stringNumToBool(e[6]),isMs2Point0Enabled:"00"!==e.slice(4,6)})),z(this,"msrConfigurationByte",e=>({isAAMVAcardEnabled:this.stringNumToBool(e[7]),track3Data:this.trackDataOptions[e.slice(4,6)]||B,track2Data:this.trackDataOptions[e.slice(2,4)]||B,track1Data:this.trackDataOptions[e.slice(0,2)]||B})),this.trackDataOptions=Object.freeze({"00":"Disabled","01":"Enabled",11:"Required"}),this.emvL2ConfigOptions=Object.freeze({"0000":"No L2 Capability","0001":`${N} C1 (EMVCo certified)`,"0010":`${N} C2`,"0011":`${N} C3`,"0100":`${N} C4 (EMVCo certified)`,"0101":`${N} C5 (EMVCo certified)`,"0110":`${N} C6`,"0111":`${N} C7`}),this.enabledBrands=Object.freeze({0:"All contacless kernals enabled",1:"PayPass/MCL support disabled",2:"payWave support disabled",4:"Expresspay support disabled",8:"D-PAS support disabled"})}};function K(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var V=class extends W{constructor(e,t){super(e,t),K(this,"parseEmvCompletion",e=>({})),K(this,"formatSerialNumber",e=>{let t=this.findNullTerminatedString(e);this.requestedSn={serialNumber:t},this.getSerialNumber=!0}),K(this,"formatKsnAndSn",e=>{this.requestedKsn={ksn:this.convertArrayToHexString(e.slice(2,12)),serialNumber:this.convertArrayToHexString(e.slice(12,20))},this.getKsnAvailable=!0}),K(this,"handleBigBlockBegin",e=>{switch(e[1]){case 164:this.arqcArriving=!0,this.arqcTotalLen=this.readTwoByteLength([e[5],e[4]]);break;case 171:this.batchDataArriving=!0,this.batchTotalLen=this.readTwoByteLength([e[5],e[4]]);break;case 24:case 32:case 33:break;default:this.transactionStatusCallback({bufferType:this.bufferTypes[e[1]]||"Buffer type not documented"})}}),K(this,"handleArqcBigBlockFinish",()=>{let e=this.buildInitialDataArray(!1),t=this.convertArrayToHexString(e);this.logDeviceState(t),this.cardDataObj={...this.cardDataObj,arqcData:t,arqcDataParsed:this.tlvParser(e.slice(2))},this.rawData={},this.arqcArriving=!1}),K(this,"handleBatchBigBlockFinish",()=>{let e=this.buildInitialDataArray(!1),t=this.convertArrayToHexString(e);this.logDeviceState(t),this.transactionHasStarted=!1;let a=this.tlvParser(e.slice(2)),i=a.find(e=>{let{tag:t}=e;return"DFDF40"===t});return this.cardDataObj=i?{...this.cardDataObj,batchData:t,batchDataParsed:a,signatureRequired:1===i}:{...this.cardDataObj,batchData:t,batchDataParsed:a},this.rawData={},this.batchDataArriving=!1,this.transactionCallback(this.cardDataObj)}),K(this,"handleBigBlockFinish",()=>this.arqcArriving?this.handleArqcBigBlockFinish():this.batchDataArriving?this.handleBatchBigBlockFinish():void 0),K(this,"parseEmvCardholderInteractionStatus",e=>{switch(e[1]){case 2:return{emvCardholderStatus:this.cardholderStatusIds[e[1]],amountConfirmed:1===e[4]||2!==e[4]&&"Unknown/Undocumented Amount Confirmed Status"};case 4:return{emvCardholderStatus:this.cardholderStatusIds[e[1]],applicationOrLabelName:this.bufferToUtf8(e.slice(4))};case 10:return{emvCardholderStatus:this.cardholderStatusIds[e[1]],methodSelected:1===e[4]?"Credit":2===e[4]?"Debit":`${B}/Undocumented payment method selected`};case 32:return{emvCardholderStatus:this.cardholderStatusIds[e[1]]||`${B}/Undocumented Cardholder Interaction Status ID: ${e[1]}`,tlvData:this.tlvParser(e.slice(4))};default:return void 0===e[4]?{emvCardholderStatus:this.cardholderStatusIds[e[1]]||`${B}/Undocumented Cardholder Interaction Status ID: ${e[1]}`}:{emvCardholderStatus:this.cardholderStatusIds[e[1]]||`${B}/Undocumented Cardholder Interaction Status ID: ${e[1]}`,undocumentedData:this.convertArrayToHexString(e.slice(4))}}}),K(this,"parseDisplayMessageDone",e=>({displayStatus:this.operationStatus[e[2]]||"Display Status not yet documented"})),K(this,"parseCardStatusReport",e=>e.length<4?{operationStatus:this.operationStatus[e[1]]||`${B} Operation Status`}:{operationStatus:this.operationStatus[e[1]],cardStatus:this.cardStatusOk===e[2]?"Ok":"Error",cardType:this.cardTypesEnum[e[3]]}),K(this,"parseAckResponse",e=>({code:e[1],message:this.ACKSTS[e[1]],commandType:this.pinCommandIds[e[2]]||"Device error or command type not documented"})),K(this,"parseDeviceStateReport",e=>({deviceState:this.deviceState[e[1]],sessionState:this.parseSessionState(this.decimalToBinary(e[2])),deviceStatus:this.parseDeviceStatus(this.decimalToBinary(e[3])),deviceCertStatus:this.parseCertStatus(this.decimalToBinary(e[4])),hardwareStatus:this.parseHardwareStatus(this.decimalToBinary(e[5])),additionalInfo:this.parseAdditionalInfo(this.decimalToBinary(e[6]))})),K(this,"parseSessionState",e=>({powerDidChange:this.stringNumToBool(e[0]),cardDataIsAvailable:this.stringNumToBool(e[4]),panParsedFromCard:this.stringNumToBool(e[5]),externalPanSent:this.stringNumToBool(e[6]),amountWasSent:this.stringNumToBool(e[7])})),K(this,"parseCertStatus",e=>({msrCrlCertExists:this.stringNumToBool(e[0]),pinCrlCertExists:this.stringNumToBool(e[1]),mfgUnbindCertExists:this.stringNumToBool(e[3]),msrCaCertExists:this.stringNumToBool(e[4]),pinCaCertExists:this.stringNumToBool(e[5]),deviceCaCertExists:this.stringNumToBool(e[6]),deviceCertExists:this.stringNumToBool(e[7])})),K(this,"parseDeviceStatus",e=>"00000000"!==e?{pinKeyStatus:this.pinKeyStatusEnum[e.slice(6)],msrKeyStatus:this.msrKeyStatusEnum[e.slice(4,6)],tamperDetected:this.stringNumToBool(e[3]),isAuthenticated:this.stringNumToBool(e[1]),deviceErrorDetected:this.stringNumToBool(e[0])}:"Ok"),K(this,"parseHardwareStatus",e=>({IE3_only:this.stringNumToBool(e[0]),SRED:this.stringNumToBool(e[1]),MagHeadIsProgrammed:this.stringNumToBool(e[6]),tamperSensorsAreActive:this.stringNumToBool(e[7])})),K(this,"parseAdditionalInfo",e=>({ICC_AcquirerMasterKeyIsInjected:!this.stringNumToBool(e[7]),ICC_SessionKeyIsActive:!this.stringNumToBool(e[6]),CAPK_EmvDatabaseIsCorrupted:this.stringNumToBool(e[5]),EmvTerminalDatabaseIsCorrupted:this.stringNumToBool(e[4]),cardIsPresentInChipCardConnector:this.stringNumToBool(e[3])})),K(this,"parseCardData",e=>{let t=this.cardDataIds[e[1]]||`trackName${B}`;if(e[2]===this.statusEnum.ok)switch(t){case"track1":this.cardDataObj={...this.cardDataObj,[t]:this.bufferToUtf8(e.slice(4))};break;case"track2":this.cardDataObj={...this.cardDataObj,[t]:this.bufferToUtf8(e.slice(4)),...this.formatExpPAN(e)};break;case"ksnAndMagnePrintStatus":this.cardDataObj={...this.cardDataObj,ksn:this.convertArrayToHexString(e.slice(4,14)),magnePrintStatus:this.convertArrayToHexString(e.slice(-4))};break;default:this.cardDataObj={...this.cardDataObj,[t]:this.convertArrayToHexString(e.slice(4))}}else this.cardDataObj={...this.cardDataObj,[t]:this.convertStatusToString[e[2]]}}),this.operationStatus=Object.freeze({0:"Ok",1:"Cardholder Cancel",2:"Timeout",3:"Host Cancel",4:"Verify fail",5:"Keypad Security",6:"Calibration Done",7:"Write with duplicate RID and index",8:"Write with corrupted Key",9:"CA Public Key reached maximum capacity",10:"CA Public Key read with invalid RID or Index"}),this.ACKSTS=Object.freeze({0:"Ok",21:"RID error/Index not found",128:"Device Error: error, tamper, missing certificate or incorrect signature detected",129:"Device not idle",130:"Data Error or Bad Paramater(s)",131:"Length Error: data size is either too small, too large, incomplete, or OID of the cert doesn't match predefined OID",132:"PAN Exists",133:"Missing or Incorrect Key",134:"Device Busy",135:"Device Locked",136:"Auth required",137:"Bad Auth",138:"Device Not Available",139:"Amount Needed - If PIN amount is required, no amount has been set",140:"Battery is critically low",141:"Device is resetting",144:"Certificate does not exist",145:"Expired (Cert/CRL)",146:"Invalid (Cert/CRL/Message)",147:"Revoked (Cert/CRL)",148:"CRL does not exist",149:"Certificate exists",150:"Duplicate KSN/Key"}),this.pinDisplayMessages=Object.freeze({0:"Hands Off",1:"Approved",2:"Declined",3:"Cancelled",4:"Thank You",5:"PIN Invalid",6:"Processing",7:"Please Wait"}),this.pinCommandIds=Object.freeze({1:"responseACK",2:"clearSession",3:"swipe",10:"requestMsrData",7:"displayMessage",162:"emvTransactionStatus",171:"requestEmvData",48:"getKsn",5:"cancelCommand",26:"requestDeviceInfo"}),this.cardTypesEnum=Object.freeze({0:"Other",1:"Financial",2:"AAMVA",3:"Manual",4:"Unknown",5:"ICC",6:"Contactless ICC - EMV",7:"Financial MSR + ICC",8:"Contactless ICC - MSD"}),this.deviceState=Object.freeze({0:"Idle",1:"Session",2:"Wait For Card",3:"Wait For PIN",4:"Wait For Selection",5:"Displaying Message",6:"Test (Reserved for future use)",7:"Manual Card Entry",9:"Wait Cardholder Entry",10:"Chip Card",11:"ICC Kernel Test",12:"EMV Transaction",13:"Show PAN"}),this.pinKeyStatusEnum=Object.freeze({"00":"PIN Key OK","01":"PIN Key Exhausted",10:"No PIN Key",11:"PIN Key Not Bound"}),this.msrKeyStatusEnum=Object.freeze({"00":"MSR Key OK","01":"MSR Key Exhausted",10:"No MSR Key",11:"MSR Key Not Bound"}),this.cardDataIds=Object.freeze({1:"track1",2:"track2",3:"track3",4:"encryptedTrack1",5:"encryptedTrack2",6:"encryptedTrack3",7:"magnePrint",64:"encryptedPanAndExp",65:"serialNumber",99:"ksnAndMagnePrintStatus",100:"CBC-MAC"}),this.cardholderStatusIds=Object.freeze({1:"Waiting for amount confirmation selection",2:"Amount confirmation selected",3:"Waiting for multi-payment ICC Application selection",4:"ICC Application selected",7:"Waiting for language selection",8:"Language selected",9:"Waiting for credit/debit selection",10:"Credit/Debit selected",11:"Waiting for Pin Entry for ICC",12:"PIN entered for ICC",13:"Waiting for Pin Entry for MSR",14:"PIN entered for MSR"}),this.bufferTypes=Object.freeze({2:"Device Certificate",50:"Set BIN (MAC)",66:"CSR",161:"EMV data in TLV format, Tag Data (MAC)",162:"RESERVED",163:"RESERVED",164:"EMV data in TLV format, Authorization Request (ARQC)",165:"CA Public Key (MAC)",171:"EMV data in TLV format, Batch Data"}),this.cardDataObj={},this.cardStatusOk=0,this.arqcArriving=!1,this.batchDataArriving=!1,this.arqcTotalLen=0,this.batchTotalLen=0,this.statusEnum=Object.freeze({ok:0,empty:1,error:2,disabled:3})}};function G(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var _=class extends V{constructor(e,t){super(e,t),G(this,"getCardService",()=>new Promise((e,t)=>this.device?this.connectAndCache(2).then(e=>(this.logDeviceState(`[GATT]: Cache AppDataToHostLength Characteristic || ${new Date}`),e.getCharacteristic(this.deviceToHostLen))).then(e=>(this.logDeviceState(`[GATT]: Begin notifications on AppDataToHostLength Characteristic || ${new Date}`),e.startNotifications())).then(e=>(this.logDeviceState(`[GATT]: Add listener to notifications || ${new Date}`),e.removeEventListener("characteristicvaluechanged",this.dataWatcher),e.addEventListener("characteristicvaluechanged",this.dataWatcher),this.cardDataListener=e,this.logDeviceState(`[GATT]: Cache AppDataToHost Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceToHostData))).then(e=>(this.receiveDataChar=e,this.logDeviceState(`[GATT]: Cache AppDataFromHostLength Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceFromHostLen))).then(e=>(this.sendLenToDevice=e,this.logDeviceState(`[GATT]: Cache AppDataFromHost Characteristic || ${new Date}`),this.cardService.getCharacteristic(this.deviceFromHostData))).then(e=>(this.commandCharacteristic=e,window&&(window.removeEventListener("beforeunload",this.onDestroyHandler),window.addEventListener("beforeunload",this.onDestroyHandler)),this.logDeviceState(`[GATT]: Successfully cached all GATT services and characteristics. Returning successful pair to user || ${new Date}`),this.delayPromise(400))).then(()=>e({code:0,message:"Device Open"})).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(S)))),G(this,"dataWatcher",e=>{let t=e.target.value.getUint8(0);return this.logDeviceState(`[NOTIFY: AppDataToHostLength]: ${this.convertArrayToHexString([t])} || ${new Date}`),this.commandSent?3===t||9===t?(this.commandSent=!1,void(this.commandRespAvailable=!0)):void console.log("[!!] Unaccounted for code path. Data Event: ",t):this.readCommandResp()}),G(this,"readCommandResp",()=>new Promise((e,t)=>this.receiveDataChar?this.receiveDataChar.readValue().then(e=>this.readValueHandler(e)).then(t=>e(t)).catch(a=>a.code===L.code&&a.message===L.message?(this.logDeviceState(`[INFO]: Read failed due to device being busy. Attempting read again || ${new Date}`),e(this.readCommandResp())):t(this.buildDeviceErr(a))):t(this.buildDeviceErr(A)))),G(this,"readValueHandler",e=>new Promise(t=>{let a=this.readByteArray(e);if(this.logDeviceState(`[READ: AppDataToHost]: ${this.convertArrayToHexString(a)} || ${new Date}`),a.length)switch(a[0]){case this.reportIds.cardStatusReport:return t(this.handleCardStatusReport(a));case this.reportIds.deviceStateReport:return t(this.handleDeviceStateReport(a));case this.reportIds.responseAck:return t(this.parseAckResponse(a));case this.reportIds.cardDataReport:return t(this.handleCardDataReport(a));case this.reportIds.emvCardholderStatus:return t(this.handleCardholderStatusReport(a));case this.reportIds.emvCompletion:return t(this.handleEmvCompletion(a));case this.reportIds.bigBlockData:return t(this.handleBigBlockData(a));case this.reportIds.getKsn:return t(this.formatKsnAndSn(a));case this.reportIds.requestSn:return t(this.formatSerialNumber(a));case this.reportIds.deviceConfig:return console.log("Made it",a),t(this.parseDeviceConfiguration(a));default:return t(this.handleRawData(a))}else t()})),G(this,"handleRawData",e=>(this.logDeviceState(`[Data Resp]: There is no parser for this data, returning to caller: ${this.convertArrayToHexString(e)} || ${new Date}`),this.transactionCallback(e))),G(this,"handleEmvCompletion",e=>(console.log("[!] EMV Completion: ",e),this.transactionStatusCallback(this.parseEmvCompletion(e)))),G(this,"handleBigBlockData",e=>{switch(e[2]){case 0:this.handleBigBlockBegin(e);break;case 99:this.maxBlockId=Math.max(...Object.keys(this.rawData))+1,this.logDeviceState(this.rawData),this.handleBigBlockFinish();break;default:this.rawData={...this.rawData,[e[2]]:e.slice(4)}}}),G(this,"handleCardholderStatusReport",e=>this.transactionStatusCallback(this.parseEmvCardholderInteractionStatus(e))),G(this,"handleCardStatusReport",e=>new Promise(t=>(this.transactionStatusCallback(this.parseCardStatusReport(e)),this.swipeHasBegun?this.sendCommandWithResp([1,10,0]).then(e=>(this.transactionStatusCallback(e),t())).catch(e=>this.sendErrToCallback(this.buildDeviceErr(e))):this.transactionHasStarted?this.sendCommandWithResp([1,171,0]).then(e=>(this.transactionStatusCallback(e),t())).catch(e=>this.sendErrToCallback(this.buildDeviceErr(e))):t()))),G(this,"handleDeviceStateReport",e=>{this.dataGathered&&(this.dataGathered=!1,this.startTransactionCommand=null,this.transactionCallback({swipeData:this.cardDataObj})),this.transactionStatusCallback(this.parseDeviceStateReport(e))}),G(this,"handleCardDataReport",e=>{this.swipeHasBegun&&(this.swipeHasBegun=!1,this.dataGathered=!0),3!==e.length?this.parseCardData(e):(this.logDeviceState("[ERROR] Undocumented Card Data below"),this.logDeviceState(e))}),G(this,"requestCardSwipe",e=>new Promise((t,a)=>(this.swipeHasBegun=!0,this.cardDataObj={},this.device.gatt.connected?this.sendCommandWithResp([1,2,0]).then(t=>(this.transactionStatusCallback(t),this.sendCommandWithResp(this.buildSwipeCommand(e||{})))).then(e=>t(e)).catch(e=>a(e)):a(this.buildDeviceErr(w))))),G(this,"startTransaction",e=>new Promise((t,a)=>(this.transactionHasStarted=!0,this.cardDataObj={},this.logDeviceState(`[INFO]: EMV transaction begun || ${new Date}`),this.device.gatt.connected?this.sendCommandWithResp([1,2,0]).then(e=>(this.transactionStatusCallback(e),this.logDeviceState(e),Promise.resolve())).then(()=>this.sendCommandWithResp(this.buildEmvCommand(e||{}))).then(e=>t(e)).catch(e=>a(e)):a(this.buildDeviceErr(w))))),G(this,"buildSwipeCommand",e=>{let{timeout:t,isFallback:a,toneChoice:i,displayType:s}=e,r=[1,3,t||60,!0===a?4:s&&this.displayTypes[s.toLowerCase()]||2,i&&this.toneChoice[i.toLowerCase()]||1];return this.startTransactionCommand=r,r}),G(this,"buildEmvCommand",e=>{let{timeout:t,pinTimeout:a,cardType:i,transactionType:s,cashBack:r,currencyCode:n,toneChoice:c,isQuickChip:o,authorizedAmount:h,emvOptions:d}=e,l=[1,162,t||60,a||20,0,c&&this.toneChoice[c.toLowerCase()]||1,i?this.cardTypes(i.toLowerCase()):3,d&&this.emvOptions[d.toLowerCase()]||0];return l=h?l.concat(this.convertNumToAmount(h)):l.concat([0,0,0,0,1,0]),l=s?l.concat(this.transactionTypes[s.toLowerCase()]||0):l.concat(0),l=r?l.concat(this.convertNumToAmount(r)):l.concat(this.newArrayPartial(0,6)),l=l.concat(this.newArrayPartial(0,12)),l=n?l.concat(this.currencyCode[n.toLowerCase()]||this.currencyCode.default):l.concat([8,64]),l.push(0),l.push(!1===o?0:1),l=l.concat(this.newArrayPartial(0,28)),this.startTransactionCommand=l,l}),G(this,"sendPinCommand",e=>new Promise((t,a)=>(this.logDeviceState(`[AppFromHostLength]: ${this.convertArrayToHexString([e.length])} || ${new Date}`),this.sendLenToDevice?this.sendLenToDevice.writeValue(Uint8Array.of(e.length)).then(()=>(this.commandSent=!0,this.logDeviceState(`[AppFromHostData]: ${this.convertArrayToHexString(e)} || ${new Date}`),t(this.commandCharacteristic.writeValue(Uint8Array.from(e))))).catch(e=>(this.commandSent=!1,a(e))):a(this.buildDeviceErr(k))))),G(this,"sendCommandWithResp",e=>new Promise((t,a)=>this.sendPinCommand(e).then(()=>this.commandRespAvailable?Promise.resolve(!0):this.waitForDeviceResponse(16)).then(t=>t?this.readCommandResp():this.tryCommandAgain(e)).then(e=>(this.commandRespAvailable=!1,t(e))).catch(e=>(this.commandRespAvailable=!1,a(this.buildDeviceErr(e)))))),G(this,"tryCommandAgain",e=>new Promise((t,a)=>this.sendPinCommand(e).then(()=>this.waitForDeviceResponse(5)).then(e=>e?t(this.readCommandResp()):a(this.buildDeviceErr(responseNotReceived))))),G(this,"cancelTransaction",()=>new Promise((e,t)=>this.commandCharacteristic?this.sendCommandWithResp([1,5,0]).then(t=>e(t)).catch(e=>t(e)):t(this.buildDeviceErr(y)))),G(this,"clearSession",()=>new Promise((e,t)=>(this.logDeviceState(`[ClearSession]: Request to clear session || ${new Date}`),this.sendLenToDevice?this.sendCommandWithResp([1,2,0]).then(t=>(this.transactionStatusCallback(t),this.logDeviceState(`[ClearSession]: Received clear session resp || ${new Date}`),e(t))).catch(e=>t(this.buildDeviceErr(e))):e(O)))),G(this,"closePinDevice",()=>new Promise((e,t)=>this.cardDataListener?this.cardDataListener.stopNotifications().then(()=>(this.logDeviceState(`[Close Device]: GATT notifications stopped. Clearing JS cache || ${new Date}`),this.cardDataListener.removeEventListener("characteristicvaluechanged",this.dataWatcher),this.cardDataListener=null,this.clearGattCache(),e(this.disconnect()))).catch(e=>t(e)):this.disconnect().then(()=>(this.logDeviceState(`[Close Device]: Device Closed. Clearing JS cache || ${new Date}`),this.clearGattCache(),e())).catch(e=>t(e)))),G(this,"closeDevice",()=>new Promise((e,t)=>this.device.gatt.connected?this.clearSession().then(()=>this.closePinDevice()).then(()=>e(x)).catch(e=>(this.disconnect(),t(this.buildDeviceErr(e)))):e(x))),G(this,"clearGattCache",()=>{this.transactionHasStarted=!1,this.receiveDataChar=null,this.commandCharacteristic=null,this.sendLenToDevice=null,this.commandSent=!1,this.commandRespAvailable=!1,this.swipeHasBegun=!1,this.dataGathered=!1,this.startTransactionCommand=null}),this.transactionCallback=t.transactionCallback||t,this.transactionStatusCallback=t.transactionStatusCallback,this.deviceFromHostLen="0508e6f8-ad82-898f-f843-e3410cb60220",this.deviceFromHostData="0508e6f8-ad82-898f-f843-e3410cb60221",this.deviceToHostLen="0508e6f8-ad82-898f-f843-e3410cb60222",this.deviceToHostData="0508e6f8-ad82-898f-f843-e3410cb60223",this.cardDataListener=null,this.receiveDataChar=null,this.commandCharacteristic=null,this.sendLenToDevice=null,this.commandSent=!1,this.swipeHasBegun=!1,this.transactionHasStarted=!1,this.dataGathered=!1,this.startTransactionCommand=null,this.transactionTypes=Object.freeze({purchase:0,cashadvance:1,cashback:2,purchasegoods:4,purchaseservices:8,contactlesscashback:9,cashmanual:18,refund:32,chiponlypayment:80}),this.emvOptions=Object.freeze({normal:0,bypasspin:1,forceonline:2,acquirernotavailable:4}),this.displayTypes=Object.freeze({swipeidlealternate:0,swipecard:1,pleaseswipe:2,pleaseswipeagain:3,chiperroruseswipe:4}),this.reportIds=Object.freeze({responseAck:1,endSession:2,requestCardSwipe:3,cardStatusReport:34,deviceStateReport:32,cardDataReport:35,emvCardholderStatus:44,bigBlockData:41,emvCompletion:162,getKsn:48,requestSn:26,deviceConfig:9}),this.toneChoice=Object.freeze({nosound:0,onebeep:1,twobeeps:2}),this.initialNotification=[0]}};function Q(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Y=class extends _{constructor(e,t){super(e,t),Q(this,"getDeviceInfo",()=>new Promise((e,t)=>this.device?this.gatherDeviceInfo().then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(S)))),Q(this,"gatherDeviceInfo",()=>new Promise((e,t)=>{this.checkIfDeviceIdle().then(()=>this.getDeviceInfoProceed()).then(t=>e({...t,deviceName:this.device.name,isConnected:this.device.gatt.connected})).catch(e=>t(e))})),Q(this,"getDeviceInfoBase",()=>new Promise(e=>{this.sendCommandWithResp([1,26,5]).then(t=>e(t))})),Q(this,"getDeviceInfoProceed",()=>new Promise((e,t)=>{this.sendPinCommand([0,26,5]).then(()=>this.getSerialNumber||this.waitForSn(5)).then(e=>e?Promise.resolve():t(this.buildDeviceErr(F))).then(()=>{let t={serialNumber:this.hexToAscii(this.requestedSn.serialNumber)};return this.getSerialNumber=!1,this.requestedSn=null,e(t)}).catch(e=>t(e))})),Q(this,"checkIfDeviceIdle",()=>new Promise(e=>{this.getDeviceInfoBase().then(t=>"Device not idle"===t.message?this.clearSession().then(()=>this.getDeviceInfoBase()):(this.transactionStatusCallback(t),e())).then(t=>(this.transactionStatusCallback(t),e()))})),Q(this,"waitForSn",e=>new Promise(t=>{let a=i=>i<e?this.getSerialNumber?t(!0):setTimeout(()=>a(i+1),200):t(!1);a(0)})),this.getKsnAvailable=!1,this.requestedKsn=null,this.getSerialNumber=!1,this.requestedSn=null,this.deviceType=R}};function J(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var X=class extends _{constructor(e,t){super(e,t),J(this,"getDeviceInfo",()=>new Promise((e,t)=>this.device?this.gatherDeviceInfo().then(t=>e(t)).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(S)))),J(this,"gatherDeviceInfo",()=>new Promise((e,t)=>{this.checkIfDeviceIdle().then(()=>this.getDeviceInfoProceed()).then(t=>e({...t,deviceName:this.device.name,isConnected:this.device.gatt.connected})).catch(e=>t(e))})),J(this,"getDeviceInfoBase",()=>new Promise(e=>{this.sendCommandWithResp([1,26,5]).then(t=>e(t))})),J(this,"getDeviceInfoProceed",()=>new Promise((e,t)=>{this.sendPinCommand([0,26,5]).then(()=>this.getSerialNumber||this.waitForSn(5)).then(e=>e?Promise.resolve():t(this.buildDeviceErr(F))).then(()=>{let t={serialNumber:this.hexToAscii(this.requestedSn.serialNumber)};return this.getSerialNumber=!1,this.requestedSn=null,e(t)}).catch(e=>t(e))})),J(this,"checkIfDeviceIdle",()=>new Promise(e=>{this.getDeviceInfoBase().then(t=>"Device not idle"===t.message?this.clearSession().then(()=>this.getDeviceInfoBase()):(this.transactionStatusCallback(t),e())).then(t=>(this.transactionStatusCallback(t),e()))})),J(this,"waitForSn",e=>new Promise(t=>{let a=i=>i<e?this.getSerialNumber?t(!0):setTimeout(()=>a(i+1),200):t(!1);a(0)})),this.getKsnAvailable=!1,this.requestedKsn=null,this.getSerialNumber=!1,this.requestedSn=null,this.deviceType="dynaProGo"}};function Z(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var ee=class extends ${constructor(e,t){super(e,t),Z(this,"trackIndices",e=>Object.freeze({track1DecodeStatus:e,track2DecodeStatus:e+1,track3DecodeStatus:e+2,track1Len:e+3,track2Len:e+4,track3Len:e+5,cardEncodeType:e+6,track1Start:e+7,track1End:e+118,track2Start:e+119,track2End:e+230,track3Start:e+231,track3End:e+342,cardStatus:e+343,magnePrintStatusStart:e+344,magnePrintStatusEnd:e+347,magnePrintLen:e+348,magnePrintStart:e+349,magnePrintEnd:e+476,serialNumberStart:e+477,serialNumberEnd:e+492,deviceEncStatusStart:e+493,deviceEncStatusEnd:e+494,ksnStart:e+495,ksnEnd:e+504,track1MaskedLen:e+505,track2MaskedLen:e+506,track3MaskedLen:e+507,track1MaskedStart:e+508,track1MaskedEnd:e+619,track2MaskedStart:e+620,track2MaskedEnd:e+731,track3MaskedStart:e+732,track3MaskedEnd:e+843,encSessionIdStart:e+844,encSessionIdEnd:e+851,track1AbsLen:e+852,track2AbsLen:e+853,track3AbsLen:e+854,magnePrintAbsLen:e+855})),Z(this,"parseHidData",e=>{let t=this.trackIndices(this.offset),a={};return this.dataNames.forEach(i=>{let s=e.slice(t[`${i}Start`],t[`${i}End`]+1);t.hasOwnProperty(`${i}Len`)&&(s=s.slice(0,e[t[`${i}Len`]])),a="track2Masked"===i?this.formatTrack2Masked(a,i,this.bufferToUtf8(s)):t.hasOwnProperty(`${i}DecodeStatus`)?this.formatTrackWithDecode(a,i,e[t[`${i}DecodeStatus`]],this.convertArrayToHexString(s)):"serialNumber"===i?this.formatSerialNumber(a,s):{...a,[i]:i.toLowerCase().includes("masked")?this.bufferToUtf8(s):this.convertArrayToHexString(s)}}),{swipeData:{...a}}}),Z(this,"formatSerialNumber",(e,t)=>({...e,serialNumber:this.bufferToUtf8(t)})),Z(this,"formatTrack2Masked",(e,t,a)=>({...e,[t]:a,...this.formatExpPAN(a)})),Z(this,"formatTrackWithDecode",(e,t,a,i)=>({...e,[t]:i,[`${t}DecodeStatus`]:this.convertStatusToString[a],[`${t}DecodeStatusCode`]:a})),this.dataNames=["track1","track2","track3","ksn","magnePrint","magnePrintStatus","serialNumber","encSessionId","track1Masked","track2Masked","track3Masked"],this.offset=3}};function te(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var ae=class extends ee{constructor(e,t){super(e,t),te(this,"parseTransactionStatus",e=>{let t=this.readTwoByteLength([e[1],e[2]]),a=e.slice(3);return a.length===t?this.parseNotifications(a):this.throwLenErr()}),te(this,"parseNotifications",e=>{let t=e.slice(6),a=this.readTwoByteLength([t[0],t[1]]),i=t.slice(2),s=i[0],r=i[2];return i.length===a?{transactionStatus:{statusCode:s,statusMsg:this.TrxStatusEnum[s]||"Status code message not documented",progressCode:r,progressMsg:this.TrxProgressIndicator[r]||"Progress code message not documented"}}:this.throwLenErr()}),this.TrxStatusEnum=Object.freeze({0:"Transaction Started and Idle",1:"Card is Inserted",2:"Error",3:"Transaction Progress Change",4:"Waiting for User Response",5:"Timed Out",6:"Transaction Complete",7:"Cancelled by Host",8:"Card Removed",9:"Contactless Token Detected, Powering Up Card",10:"MSR Swipe Detected"}),this.TrxProgressIndicator=Object.freeze({0:"No transaction in progress",1:"Waiting for cardholder to present payment",2:"Powering up the card",3:"Selecting the application",4:"Waiting for user language selection",5:"Waiting for user application selection",6:"Initiating application",7:"Reading application data",8:"Offline data authentication",9:"Process restrictions",10:"Cardholder verification",11:"Terminal risk management",12:"Terminal action analysis",13:"Generating first application cryptogram",14:"Card action analysis",15:"Online processing",16:"Waiting online processing response",17:"Transaction Complete",18:"Transaction Error",19:"Transaction Approved",20:"Transaction Declined",21:"Transaction Cancelled by MSR Swipe",22:"EMV error - Conditions Not Satisfied",23:"EMV error - Card Blocked",24:"Application selection failed",25:"EMV error - Card Not Accepted",26:"Empty Candidate List",27:"Application Blocked",41:"Contactless Remove Card",42:"Collision Detected",43:"Refer to Mobile Device Prompt",44:"Contactless Transaction Complete",45:"Request Switch to ICC/MSR - Kernel has refused contactless payment",46:"Wrong Card Type (MSD or EMV)",47:"No Application Interchange Profile (Tag 82) Received",49:"Magnetic stripe decoding error.",60:"Magnetic stripe decoding during Technical Fallback. Revert to MSR, powering up but not receiving an Answer to Reset from card.",61:"Magnetic stripe card decoded during MSR Fallback. Device reverted to MSR, but encountered fatal errors.",62:"Magnetic stripe card decoded during a No Fallback MSR read."})}};function ie(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var se=class extends ae{constructor(e,t){super(e,t),ie(this,"parseEmvData",(e,t)=>t?{arqcData:this.convertArrayToHexString(e.slice(11)),arqcDataParsed:this.tlvParser(e.slice(13),!0)}:{signatureRequired:1===e[11],batchData:this.convertArrayToHexString(e.slice(11)),batchDataParsed:this.tlvParser(e.slice(14),!0)}),ie(this,"parseEmvCommandResponse",e=>{let t=e.slice(4,6);return parseInt(t.join(""))?{code:parseInt(this.convertArrayToHexString(t),16),name:"StartTransactionError",message:this.emvResultCodes[t[1]]||"Transaction Error Message not yet documented"}:{code:0,message:"Success, transaction has started"}}),this.emvResultCodes=Object.freeze({129:"Failure, DUKPT scheme is not loaded",130:"Failure, DUKPT scheme is loaded but all of its keys have been used",131:"Failure, DUKPT scheme is not loaded (Security Level not 3 or 4)",132:"Invalid Total Transaction Time Field",133:"Invalid Card Type Field",134:"Invalid Options Field",135:"Invalid Amount Authorized Field",136:"Invalid Transaction Type Field",137:"Invalid Cash Back Field",138:"Invalid Transaction Currency Code Field",142:"Invalid Reporting Option",143:"Transaction Already In Progress",145:"Invalid Device Serial Number",150:"Invalid System Date and Time"})}};function re(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var ne=class extends se{constructor(e,t){super(e,t),re(this,"getCardServiceBase",e=>new Promise((t,a)=>this.device?this.connectAndCache(e).then(e=>e.getCharacteristic(this.cardDataNotification)).then(e=>(this.logDeviceState(`[GATT NOTIFICATIONS]: Request to cache characteristics, start notifications, and attach listeners. || ${new Date}`),this.cardDataListener=e,this.cardDataListener.startNotifications())).then(e=>{this.cardDataListener.removeEventListener("characteristicvaluechanged",this.cardDataHandler),this.cardDataListener.addEventListener("characteristicvaluechanged",this.cardDataHandler)}).then(()=>this.cardService.getCharacteristic(this.commandCharId)).then(e=>{this.commandCharacteristic=e,window&&(window.removeEventListener("beforeunload",this.onDestroyHandler),window.addEventListener("beforeunload",this.onDestroyHandler))}).then(()=>this.cardService.getCharacteristic(this.dataReadyId)).then(e=>(this.dataReadyCharacteristic=e,this.dataReadyCharacteristic.startNotifications())).then(e=>{this.dataReadyCharacteristic.removeEventListener("characteristicvaluechanged",this.dataReadyHandler),this.dataReadyCharacteristic.addEventListener("characteristicvaluechanged",this.dataReadyHandler)}).then(()=>this.cardService.getCharacteristic(this.dataReadStatusId)).then(e=>(this.dataReadStatusCharacteristic=e,this.logDeviceState(`[GATT NOTIFICATIONS]: Success! Cached characteristics, started notifications, and attached listeners. || ${new Date}`),t())).catch(e=>a(e)):a(this.buildDeviceErr(S)))),re(this,"dataReadyHandler",e=>{let t=e.target.value,a=this.readByteArray(t);this.logDeviceState("dataReady listener:"),this.logDeviceState(a),this.commandSent&&(this.commandRespAvailable=!0,this.commandSent=!1)}),re(this,"cardDataHandler",e=>{let t=e.target.value;if(255!==t.getUint8(0)){let e=this.readByteArray(t);this.rawData={...this.rawData,[e[0]]:e.slice(1)}}else{if(this.maxBlockId=t.getUint8(1),this.checkNotificationLength()){if(this.initialNotification=this.rleFormats[this.rawData[0][0]]?this.decodeRLE(this.rawData[0]):this.rawData[0],this.logDeviceState(this.rawData),this.isSwipeData(this.initialNotification[0]))return this.returnToUser(this.transactionCallback)(this.parseHidData(this.buildInitialDataArray(!0)));{let e=this.convertArrayToHexString([this.initialNotification[7],this.initialNotification[8]]);return this.findNotificationType(e)}}this.sendErrToCallback(this.throwLenErr())}}),re(this,"findNotificationType",e=>{let t=this.buildInitialDataArray(!0);switch(e){case"0300":return this.logDeviceState("==Transaction Status=="),this.returnToUser(this.transactionStatusCallback)(this.parseTransactionStatus(t));case"0301":return this.logDeviceState("==Display Message Request=="),this.returnToUser(this.displayCallback)({displayMessage:this.bufferToUtf8(t.slice(11))});case"0302":this.logDeviceState("==User Selection Request=="),this.logDeviceState(t),this.logDeviceState(this.convertArrayToHexString(t));break;case"0303":return this.logDeviceState("==ARQC Message=="),this.returnToUser(this.transactionCallback)(this.parseEmvData(t,!0));case"0304":return this.logDeviceState("==Batch Data Message=="),this.returnToUser(this.transactionCallback)(this.parseEmvData(t,!1));default:this.logDeviceState(`Undocumented Notification ID: ${e}`,t),this.logDeviceState(this.convertArrayToHexString(t))}}),re(this,"startTransaction",e=>new Promise((t,a)=>this.device.gatt.connected?this.sendCommandWithResp(this.buildEmvCommand(e||{})).then(i=>{let s=this.parseEmvCommandResponse(i);return this.logDeviceState(s),0===s.code?t(s):918!==s.code?a(this.buildDeviceErr(s)):this.setDeviceDateTime().then(()=>this.delayPromise(500)).then(()=>t(this.startTransaction(e)))}).catch(e=>a(this.buildDeviceErr(e))):a(this.buildDeviceErr(w)))),re(this,"buildEmvCommand",e=>{let{timeout:t,cardType:a,transactionType:i,cashBack:s,currencyCode:r,reportVerbosity:n,emvOptions:c,authorizedAmount:o}=e,h=[...this.emvCommandBase,t||60,a?this.cardTypes(a.toLowerCase()):3,c&&this.emvOptions[c.toLowerCase()]||128];return h=o?h.concat(this.convertNumToAmount(o)):h.concat([0,0,0,0,1,0]),h=i?h.concat(this.transactionTypes[i.toLowerCase()]||0):h.concat(0),h=s?h.concat(this.convertNumToAmount(s)):h.concat(this.newArrayPartial(0,6)),h=r?h.concat(this.currencyCode[r.toLowerCase()]||this.currencyCode.default):h.concat([8,64]),h.push(n?this.statusVerbosity[n.toLowerCase()]||0:1),h}),re(this,"readCommandValue",()=>new Promise(e=>this.commandCharacteristic.readValue().then(t=>e(this.readByteArray(t))))),re(this,"readBatteryLevel",()=>new Promise(e=>this.sendCommandWithResp([69,0]).then(t=>e(t[2])))),re(this,"isSwipeData",e=>0===e||1===e),re(this,"checkNotificationLength",()=>Math.max(...Object.keys(this.rawData))===this.maxBlockId-1),re(this,"sendCommandWithResp",e=>new Promise((t,a)=>this.commandCharacteristic?(this.logDeviceState(`Sending command: ${this.convertArrayToHexString(e)}`),this.commandSent=!0,this.commandCharacteristic.writeValue(Uint8Array.from(e)).then(()=>this.commandRespAvailable?Promise.resolve(!0):this.waitForDeviceResponse(15)).then(e=>(this.commandRespAvailable=!1,e?this.readCommandValue():a(this.buildDeviceErr(F)))).then(e=>t(e)).catch(e=>a(this.buildDeviceErr(e)))):a(this.buildDeviceErr(y)))),re(this,"returnToUser",e=>t=>(this.initialNotification=null,this.maxBlockId=null,this.rawData={},e(t))),re(this,"buildDateTimeCommand",()=>{let e=[73,34,0,0,3,12,0,28];e=e.concat(this.newArrayPartial(0,17));let t=new Date;return e.push(this.castDecToHex(t.getMonth()+1)),e.push(this.castDecToHex(t.getDate())),e.push(this.castDecToHex(t.getHours())),e.push(this.castDecToHex(t.getMinutes())),e.push(this.castDecToHex(t.getSeconds())),e.push(0),e.push(this.castDecToHex(t.getFullYear()-2008)),e=e.concat(this.newArrayPartial(0,4)),e}),re(this,"setDeviceDateTime",()=>this.sendCommandWithResp(this.buildDateTimeCommand())),re(this,"getKsn",()=>new Promise((e,t)=>this.device.gatt.connected?this.sendCommandWithResp([9,0]).then(e=>this.convertArrayToHexString(e.slice(2))).then(t=>e(t)):t(this.buildDeviceErr(T)))),re(this,"getDeviceSn",()=>new Promise(e=>this.sendCommandWithResp([0,1,3]).then(e=>this.bufferToUtf8(e.slice(2))).then(t=>e(t)))),re(this,"gatherDeviceInfo",()=>new Promise((e,t)=>{let a,i;this.readBatteryLevel().then(e=>(a=e,this.getDeviceSn())).then(t=>(i=t,e([a,i]))).catch(e=>t(e))})),re(this,"getDeviceInfo",()=>new Promise((e,t)=>this.device.gatt.connected?this.gatherDeviceInfo().then(t=>e({deviceName:this.device.name,batteryLevel:t[0],serialNumber:t[1],isConnected:this.device.gatt.connected})).catch(e=>this.buildDeviceErr(e)):t(this.buildDeviceErr(w)))),re(this,"clearGattCache",()=>{window&&window.removeEventListener("beforeunload",this.onDestroyHandler),this.maxBlockId=null,this.initialNotification=null,this.rawData={},this.dataReadStatusCharacteristic=null,this.dataReadyCharacteristic=null,this.commandCharacteristic=null,this.cardDataListener=null}),re(this,"ceaseNotifications",()=>new Promise(e=>this.cardDataListener?this.cardDataListener.stopNotifications().then(()=>(this.cardDataListener.removeEventListener("characteristicvaluechanged",this.cardDataHandler),this.dataReadStatusCharacteristic.stopNotifications())).then(()=>(this.dataReadyCharacteristic.removeEventListener("characteristicvaluechanged",this.dataReadyHandler),e())):e())),re(this,"cancelTransaction",()=>new Promise((e,t)=>this.commandCharacteristic?this.commandCharacteristic.writeValue(this.cancelEmvCommand).then(()=>e()).catch(e=>t(this.buildDeviceErr(e))):t(this.buildDeviceErr(y)))),re(this,"closeDevice",()=>new Promise((e,t)=>this.device.gatt.connected?this.ceaseNotifications().then(()=>(this.clearGattCache(),this.disconnect())).then(()=>e({code:0,message:"Device Closed"})).catch(e=>t(this.buildDeviceErr(e))):e({code:0,message:"Device Closed"}))),this.transactionCallback=t.transactionCallback||t,this.displayCallback=t.displayCallback,this.transactionStatusCallback=t.transactionStatusCallback,this.userSelectionCallback=t.userSelectionCallback,this.maxBlockId=null,this.initialNotification=null,this.rawData={},this.dataReadStatusCharacteristic=null,this.dataReadyCharacteristic=null,this.commandCharacteristic=null,this.cardDataListener=null,this.cardDataNotification="0508e6f8-ad82-898f-f843-e3410cb60201",this.commandCharId="0508e6f8-ad82-898f-f843-e3410cb60200",this.dataReadyId="0508e6f8-ad82-898f-f843-e3410cb60202",this.dataReadStatusId="0508e6f8-ad82-898f-f843-e3410cb60203",this.transactionTypes=Object.freeze({purchase:0,cashback:2,refund:32,contactlesscashback:9}),this.emvOptions=Object.freeze({normal:0,bypasspin:1,forceonline:2,quickchip:128,pinbypassquickchip:129,forceonlinequickchip:130}),this.emvCommandBase=[73,25,0,0,3,0,0,19],this.cancelEmvCommand=Uint8Array.of(73,6,0,0,3,4,0,0)}};function ce(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var oe=class extends ne{constructor(e,t){super(e,t),ce(this,"getCardService",()=>new Promise((e,t)=>this.getCardServiceBase(1).then(()=>e({code:0,message:"Device Open"})).catch(e=>t(this.buildDeviceErr(e))))),ce(this,"requestCardSwipe",()=>new Promise((e,t)=>this.device.gatt.connected?e({code:0,message:I}):this.getCardServiceBase(1).then(()=>e({code:0,message:I})).catch(e=>t(this.buildDeviceErr(e))))),this.deviceType="eDynamo"}};function he(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var de=class extends ne{constructor(e,t){super(e,t),he(this,"getCardService",()=>new Promise((e,t)=>this.getCardServiceBase().then(()=>e({code:0,message:"Device Open"})).catch(e=>t(this.buildDeviceErr(e))))),he(this,"requestCardSwipe",()=>new Promise((e,t)=>this.device.gatt.connected?this.sendCommandWithResp(this.setHeadAlwaysOn).then(a=>0===parseInt(a)?e({code:0,message:I}):t(this.buildDeviceErr(P))).catch(e=>t(e)):this.getCardServiceBase().then(()=>this.sendCommandWithResp(this.setHeadAlwaysOn)).then(a=>0===parseInt(a)?e({code:0,message:I}):t(this.buildDeviceErr(P))).catch(e=>t(e)))),this.setHeadAlwaysOn=[88,1,1],this.deviceType="tDynamo"}};class le{constructor(e){let{getCardService:t,startTransaction:a,cancelTransaction:i,sendCommandWithResp:s,clearSession:r,closeDevice:n,getDeviceInfo:c,requestCardSwipe:o,isDeviceConnected:h,disconnect:d}=e;this.openDevice=t,this.startTransaction=a,this.cancelTransaction=i,this.sendCommand=s,this.clearSession=r||(()=>Promise.resolve()),this.closeDevice=n,this.deviceInfo=c,this.requestCardSwipe=o,this.isDeviceOpen=h,this.forceDisconnect=d}}const ue={eDynamo:(e,t)=>new oe(e,t),tDynamo:(e,t)=>new de(e,t),dynaProGo:(e,t)=>new X(e,t),"DynaPro Mini":(e,t)=>new Y(e,t)},me=(e,t,a)=>({id:e.id,name:e.name,deviceType:a,deviceInterface:new le(ue[a](e,t))}),ve=e=>{console.warn("Callback not provided to 'scanForDevices' function. Please provide at least one callback function to this method"),console.log("transactionCallback data: ",e)},De=e=>console.error("[MagensaBluetooth Internal Error]: ",e),pe=(e,t)=>new Promise((a,i)=>{if("object"==typeof(e=e||ve)&&void 0===e.transactionCallback)return i("When providing multiple callbacks in an object, 'transactionCallback' must be provided");const n=t=>e[t]?e[t]:"function"==typeof e?e:e.transactionCallback;e.errorCallback=e.errorCallback||De,e.transactionStatusCallback=e.transactionStatusCallback||n("transactionStatusCallback"),e.userSelectionCallback=e.userSelectionCallback||n("userSelectionCallback"),e.displayCallback=e.displayCallback||n("displayCallback"),e.disconnectHandler=e.disconnectHandler||n("transactionCallback");const c=t?(e=>({filters:[{namePrefix:e}],optionalServices:["0508e6f8-ad82-898f-f843-e3410cb60104","0508e6f8-ad82-898f-f843-e3410cb60103","0508e6f8-ad82-898f-f843-e3410cb60101","device_information"],keepRepeatedDevices:!1,acceptAllAdvertisements:!1}))(t):r;return navigator.bluetooth.requestDevice(c).then(t=>{return(s=t,new Promise((e,t)=>{let a;return s.gatt.connect().then(e=>e.getPrimaryService("device_information")).then(e=>e.getCharacteristic("model_number_string")).then(e=>e.readValue()).then(e=>(a=new TextDecoder("utf-8").decode(e).trim(),s.gatt.disconnect())).then(()=>e(a)).catch(a=>a.code===f.errorCode&&a.name===f.errorName&&a.message.includes("0000180a-0000-1000-8000-00805f9b34fb")?s.gatt.connected?Promise.resolve(s.gatt.disconnect()).then(()=>e("dynaProGo")):e("dynaProGo"):t(a))})).then(s=>s?a(me(t,e,s)):i("Selected device is not supported")).catch(e=>i(e));var s}).catch(e=>i("object"==typeof e?new s(e):"Selected device is not supported"))})}])}));
//# sourceMappingURL=magensa-bluetooth.map